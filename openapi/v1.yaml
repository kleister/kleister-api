---
openapi: "3.0.0"

info:
  version: "1.0.0-alpha1"
  description: "API definition for Kleister, manage mod packs for Minecraft"
  title: "Kleister OpenAPI"
  contact:
    name: "Kleister"
    email: "kleister@webhippie.de"
    url: "https://kleister.eu"
  license:
    name: "Apache-2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

servers:
  - url: "https://try.kleister.eu/api/v1"

security:
  - Header: []
  - Bearer: []
  - Basic: []

paths:
  /auth/{provider}/request:
    get:
      summary: "Request the redirect to defined provider"
      operationId: "RequestProvider"
      tags:
        - "auth"
      parameters:
        - $ref: "#/components/parameters/AuthProviderParam"
      security: []
      responses:
        "308":
          description: "Redirect to the provider"
          content:
            text/html:
              schema:
                type: "string"
        "404":
          description: "Provider not found"
          content:
            text/html:
              schema:
                type: "string"
        "500":
          description: "Internal server error"
          content:
            text/html:
              schema:
                type: "string"

  /auth/{provider}/callback:
    get:
      summary: "Callback to parse the defined provider"
      operationId: "CallbackProvider"
      tags:
        - "auth"
      parameters:
        - $ref: "#/components/parameters/AuthProviderParam"
        - $ref: "#/components/parameters/AuthStateParam"
        - $ref: "#/components/parameters/AuthCodeParam"
      security: []
      responses:
        "308":
          description: "Generated expiring token"
          content:
            text/html:
              schema:
                type: "string"
        "412":
          description: "Failed to initialize provider"
          content:
            text/html:
              schema:
                type: "string"
        "404":
          description: "Provider not found"
          content:
            text/html:
              schema:
                type: "string"
        "500":
          description: "Internal server error"
          content:
            text/html:
              schema:
                type: "string"

  /auth/providers:
    get:
      summary: "Fetch the available auth providers"
      operationId: "ListProviders"
      tags:
        - "auth"
      security: []
      responses:
        "200":
          $ref: "#/components/responses/ProvidersResponse"

  /auth/redirect:
    post:
      summary: "Retrieve real token after redirect"
      operationId: "RedirectAuth"
      tags:
        - "auth"
      requestBody:
        $ref: "#/components/requestBodies/RedirectAuthBody"
      security: []
      responses:
        "200":
          $ref: "#/components/responses/TokenResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/InvalidTokenError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/login:
    post:
      summary: "Authenticate an user by credentials"
      operationId: "LoginAuth"
      tags:
        - "auth"
      requestBody:
        $ref: "#/components/requestBodies/LoginAuthBody"
      security: []
      responses:
        "200":
          $ref: "#/components/responses/LoginResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/BadCredentialsError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/refresh:
    get:
      summary: "Refresh an auth token before it expires"
      operationId: "RefreshAuth"
      tags:
        - "auth"
      responses:
        "200":
          $ref: "#/components/responses/RefreshResponse"
        "401":
          $ref: "#/components/responses/InvalidTokenError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/verify:
    get:
      summary: "Verify validity for an authentication token"
      operationId: "VerifyAuth"
      tags:
        - "auth"
      responses:
        "200":
          $ref: "#/components/responses/VerifyResponse"
        "401":
          $ref: "#/components/responses/InvalidTokenError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /profile/token:
    get:
      summary: "Retrieve an unlimited auth token"
      operationId: "TokenProfile"
      tags:
        - "profile"
      responses:
        "200":
          $ref: "#/components/responses/TokenResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /profile/self:
    get:
      summary: "Fetch profile details of the personal account"
      operationId: "ShowProfile"
      tags:
        - "profile"
      responses:
        "200":
          $ref: "#/components/responses/ProfileResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update your own profile information"
      operationId: "UpdateProfile"
      tags:
        - "profile"
      requestBody:
        $ref: "#/components/requestBodies/UpdateProfileBody"
      responses:
        "200":
          $ref: "#/components/responses/ProfileResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /minecraft:
    get:
      summary: "Fetch the available Minecraft versions"
      operationId: "ListMinecrafts"
      tags:
        - "minecraft"
      parameters:
        - $ref: "#/components/parameters/SearchQueryParam"
      responses:
        "200":
          $ref: "#/components/responses/MinecraftsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update the available Minecraft versions"
      operationId: "UpdateMinecraft"
      tags:
        - "minecraft"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "503":
          $ref: "#/components/responses/RemoteUnavailableError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /minecraft/{minecraft_id}/builds:
    get:
      summary: "Fetch the builds attached to a Minecraft version"
      operationId: "ListMinecraftBuilds"
      tags:
        - "minecraft"
      parameters:
        - $ref: "#/components/parameters/MinecraftParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/MinecraftBuildsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Attach a build to a Minecraft version"
      operationId: "AttachMinecraftToBuild"
      tags:
        - "minecraft"
      parameters:
        - $ref: "#/components/parameters/MinecraftParam"
      requestBody:
        $ref: "#/components/requestBodies/MinecraftBuildBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/AlreadyAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Unlink a build from a Minecraft version"
      operationId: "DeleteMinecraftFromBuild"
      tags:
        - "minecraft"
      parameters:
        - $ref: "#/components/parameters/MinecraftParam"
      requestBody:
        $ref: "#/components/requestBodies/MinecraftBuildBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /forge:
    get:
      summary: "Fetch the available Forge versions"
      operationId: "ListForges"
      tags:
        - "forge"
      parameters:
        - $ref: "#/components/parameters/SearchQueryParam"
      responses:
        "200":
          $ref: "#/components/responses/ForgesResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update the available Forge versions"
      operationId: "UpdateForge"
      tags:
        - "forge"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "503":
          $ref: "#/components/responses/RemoteUnavailableError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /forge/{forge_id}/builds:
    get:
      summary: "Fetch the builds attached to a Forge version"
      operationId: "ListForgeBuilds"
      tags:
        - "forge"
      parameters:
        - $ref: "#/components/parameters/ForgeParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/ForgeBuildsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Attach a build to a Forge version"
      operationId: "AttachForgeToBuild"
      tags:
        - "forge"
      parameters:
        - $ref: "#/components/parameters/ForgeParam"
      requestBody:
        $ref: "#/components/requestBodies/ForgeBuildBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/AlreadyAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Unlink a build from a Forge version"
      operationId: "DeleteForgeFromBuild"
      tags:
        - "forge"
      parameters:
        - $ref: "#/components/parameters/ForgeParam"
      requestBody:
        $ref: "#/components/requestBodies/ForgeBuildBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /neoforge:
    get:
      summary: "Fetch the available Neoforge versions"
      operationId: "ListNeoforges"
      tags:
        - "neoforge"
      parameters:
        - $ref: "#/components/parameters/SearchQueryParam"
      responses:
        "200":
          $ref: "#/components/responses/NeoforgesResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update the available Neoforge versions"
      operationId: "UpdateNeoforge"
      tags:
        - "neoforge"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "503":
          $ref: "#/components/responses/RemoteUnavailableError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /neoforge/{neoforge_id}/builds:
    get:
      summary: "Fetch the builds attached to a Neoforge version"
      operationId: "ListNeoforgeBuilds"
      tags:
        - "neoforge"
      parameters:
        - $ref: "#/components/parameters/NeoforgeParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/NeoforgeBuildsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Attach a build to a Neoforge version"
      operationId: "AttachNeoforgeToBuild"
      tags:
        - "neoforge"
      parameters:
        - $ref: "#/components/parameters/NeoforgeParam"
      requestBody:
        $ref: "#/components/requestBodies/NeoforgeBuildBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/AlreadyAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Unlink a build from a Neoforge version"
      operationId: "DeleteNeoforgeFromBuild"
      tags:
        - "neoforge"
      parameters:
        - $ref: "#/components/parameters/NeoforgeParam"
      requestBody:
        $ref: "#/components/requestBodies/NeoforgeBuildBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /quilt:
    get:
      summary: "Fetch the available Quilt versions"
      operationId: "ListQuilts"
      tags:
        - "quilt"
      parameters:
        - $ref: "#/components/parameters/SearchQueryParam"
      responses:
        "200":
          $ref: "#/components/responses/QuiltsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update the available Quilt versions"
      operationId: "UpdateQuilt"
      tags:
        - "quilt"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "503":
          $ref: "#/components/responses/RemoteUnavailableError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /quilt/{quilt_id}/builds:
    get:
      summary: "Fetch the builds attached to a Quilt version"
      operationId: "ListQuiltBuilds"
      tags:
        - "quilt"
      parameters:
        - $ref: "#/components/parameters/QuiltParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/QuiltBuildsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Attach a build to a Quilt version"
      operationId: "AttachQuiltToBuild"
      tags:
        - "quilt"
      parameters:
        - $ref: "#/components/parameters/QuiltParam"
      requestBody:
        $ref: "#/components/requestBodies/QuiltBuildBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/AlreadyAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Unlink a build from a Quilt version"
      operationId: "DeleteQuiltFromBuild"
      tags:
        - "quilt"
      parameters:
        - $ref: "#/components/parameters/QuiltParam"
      requestBody:
        $ref: "#/components/requestBodies/QuiltBuildBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /fabric:
    get:
      summary: "Fetch the available Fabric versions"
      operationId: "ListFabrics"
      tags:
        - "fabric"
      parameters:
        - $ref: "#/components/parameters/SearchQueryParam"
      responses:
        "200":
          $ref: "#/components/responses/FabricsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update the available Fabric versions"
      operationId: "UpdateFabric"
      tags:
        - "fabric"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "503":
          $ref: "#/components/responses/RemoteUnavailableError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /fabric/{fabric_id}/builds:
    get:
      summary: "Fetch the builds attached to a Fabric version"
      operationId: "ListFabricBuilds"
      tags:
        - "fabric"
      parameters:
        - $ref: "#/components/parameters/FabricParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/FabricBuildsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Attach a build to a Fabric version"
      operationId: "AttachFabricToBuild"
      tags:
        - "fabric"
      parameters:
        - $ref: "#/components/parameters/FabricParam"
      requestBody:
        $ref: "#/components/requestBodies/FabricBuildBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/AlreadyAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Unlink a build from a Fabric version"
      operationId: "DeleteFabricFromBuild"
      tags:
        - "fabric"
      parameters:
        - $ref: "#/components/parameters/FabricParam"
      requestBody:
        $ref: "#/components/requestBodies/FabricBuildBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /packs:
    get:
      summary: "Fetch all available packs"
      operationId: "ListPacks"
      tags:
        - "pack"
      parameters:
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/PacksResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Create a new pack"
      operationId: "CreatePack"
      tags:
        - "pack"
      requestBody:
        $ref: "#/components/requestBodies/CreatePackBody"
      responses:
        "200":
          $ref: "#/components/responses/PackResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /packs/{pack_id}:
    get:
      summary: "Fetch a specific pack"
      operationId: "ShowPack"
      tags:
        - "pack"
      parameters:
        - $ref: "#/components/parameters/PackParam"
      responses:
        "200":
          $ref: "#/components/responses/PackResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update a specific pack"
      operationId: "UpdatePack"
      tags:
        - "pack"
      parameters:
        - $ref: "#/components/parameters/PackParam"
      requestBody:
        $ref: "#/components/requestBodies/UpdatePackBody"
      responses:
        "200":
          $ref: "#/components/responses/PackResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Delete a specific pack"
      operationId: "DeletePack"
      tags:
        - "pack"
      parameters:
        - $ref: "#/components/parameters/PackParam"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "400":
          $ref: "#/components/responses/ActionFailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /packs/{pack_id}/avatar:
    post:
      summary: "Upload an avatar for the defined pack"
      operationId: "CreatePackAvatar"
      tags:
        - "mod"
      parameters:
        - $ref: "#/components/parameters/PackParam"
      requestBody:
        $ref: "#/components/requestBodies/PackAvatarBody"
      responses:
        "200":
          $ref: "#/components/responses/PackAvatarResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Delete the avatar for the defined pack"
      operationId: "DeletePackAvatar"
      tags:
        - "mod"
      parameters:
        - $ref: "#/components/parameters/PackParam"
      responses:
        "200":
          $ref: "#/components/responses/PackAvatarResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "400":
          $ref: "#/components/responses/ActionFailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /packs/{pack_id}/users:
    get:
      summary: "Fetch all users attached to pack"
      operationId: "ListPackUsers"
      tags:
        - "pack"
      parameters:
        - $ref: "#/components/parameters/PackParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/PackUsersResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Attach a user to pack"
      operationId: "AttachPackToUser"
      tags:
        - "pack"
      parameters:
        - $ref: "#/components/parameters/PackParam"
      requestBody:
        $ref: "#/components/requestBodies/PackUserPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/AlreadyAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update user perms for pack"
      operationId: "PermitPackUser"
      tags:
        - "pack"
      parameters:
        - $ref: "#/components/parameters/PackParam"
      requestBody:
        $ref: "#/components/requestBodies/PackUserPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Unlink a user from pack"
      operationId: "DeletePackFromUser"
      tags:
        - "pack"
      parameters:
        - $ref: "#/components/parameters/PackParam"
      requestBody:
        $ref: "#/components/requestBodies/PackUserDropBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /packs/{pack_id}/groups:
    get:
      summary: "Fetch all groups attached to pack"
      operationId: "ListPackGroups"
      tags:
        - "pack"
      parameters:
        - $ref: "#/components/parameters/PackParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/PackGroupsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Attach a group to pack"
      operationId: "AttachPackToGroup"
      tags:
        - "pack"
      parameters:
        - $ref: "#/components/parameters/PackParam"
      requestBody:
        $ref: "#/components/requestBodies/PackGroupPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/AlreadyAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update group perms for pack"
      operationId: "PermitPackGroup"
      tags:
        - "pack"
      parameters:
        - $ref: "#/components/parameters/PackParam"
      requestBody:
        $ref: "#/components/requestBodies/PackGroupPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Unlink a group from pack"
      operationId: "DeletePackFromGroup"
      tags:
        - "pack"
      parameters:
        - $ref: "#/components/parameters/PackParam"
      requestBody:
        $ref: "#/components/requestBodies/PackGroupDropBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /packs/{pack_id}/builds:
    get:
      summary: "Fetch all available builds for a pack"
      operationId: "ListBuilds"
      tags:
        - "pack"
      parameters:
        - $ref: "#/components/parameters/PackParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/BuildsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Create a new build for a pack"
      operationId: "CreateBuild"
      tags:
        - "pack"
      parameters:
        - $ref: "#/components/parameters/PackParam"
      requestBody:
        $ref: "#/components/requestBodies/CreateBuildBody"
      responses:
        "200":
          $ref: "#/components/responses/BuildResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /packs/{pack_id}/builds/{build_id}:
    get:
      summary: "Fetch a specific build for a pack"
      operationId: "ShowBuild"
      tags:
        - "pack"
      parameters:
        - $ref: "#/components/parameters/PackParam"
        - $ref: "#/components/parameters/BuildParam"
      responses:
        "200":
          $ref: "#/components/responses/BuildResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update a specific build for a pack"
      operationId: "UpdateBuild"
      tags:
        - "pack"
      parameters:
        - $ref: "#/components/parameters/PackParam"
        - $ref: "#/components/parameters/BuildParam"
      requestBody:
        $ref: "#/components/requestBodies/UpdateBuildBody"
      responses:
        "200":
          $ref: "#/components/responses/BuildResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Delete a specific build for a pack"
      operationId: "DeleteBuild"
      tags:
        - "pack"
      parameters:
        - $ref: "#/components/parameters/PackParam"
        - $ref: "#/components/parameters/BuildParam"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "400":
          $ref: "#/components/responses/ActionFailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /packs/{pack_id}/builds/{build_id}/versions:
    get:
      summary: "Fetch all versions attached to build"
      operationId: "ListBuildVersions"
      tags:
        - "pack"
      parameters:
        - $ref: "#/components/parameters/PackParam"
        - $ref: "#/components/parameters/BuildParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/BuildVersionsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Attach a version to a build"
      operationId: "AttachBuildToVersion"
      tags:
        - "pack"
      parameters:
        - $ref: "#/components/parameters/PackParam"
        - $ref: "#/components/parameters/BuildParam"
      requestBody:
        $ref: "#/components/requestBodies/BuildVersionBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/AlreadyAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Unlink a version from a build"
      operationId: "DeleteBuildFromVersion"
      tags:
        - "pack"
      parameters:
        - $ref: "#/components/parameters/PackParam"
        - $ref: "#/components/parameters/BuildParam"
      requestBody:
        $ref: "#/components/requestBodies/BuildVersionBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /mods:
    get:
      summary: "Fetch all available mods"
      operationId: "ListMods"
      tags:
        - "mod"
      parameters:
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/ModsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Create a new mod"
      operationId: "CreateMod"
      tags:
        - "mod"
      requestBody:
        $ref: "#/components/requestBodies/CreateModBody"
      responses:
        "200":
          $ref: "#/components/responses/ModResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /mods/{mod_id}:
    get:
      summary: "Fetch a specific mod"
      operationId: "ShowMod"
      tags:
        - "mod"
      parameters:
        - $ref: "#/components/parameters/ModParam"
      responses:
        "200":
          $ref: "#/components/responses/ModResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update a specific mod"
      operationId: "UpdateMod"
      tags:
        - "mod"
      parameters:
        - $ref: "#/components/parameters/ModParam"
      requestBody:
        $ref: "#/components/requestBodies/UpdateModBody"
      responses:
        "200":
          $ref: "#/components/responses/ModResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Delete a specific mod"
      operationId: "DeleteMod"
      tags:
        - "mod"
      parameters:
        - $ref: "#/components/parameters/ModParam"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "400":
          $ref: "#/components/responses/ActionFailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"


  /mods/{mod_id}/avatar:
    post:
      summary: "Upload an avatar for the defined mod"
      operationId: "CreateModAvatar"
      tags:
        - "mod"
      parameters:
        - $ref: "#/components/parameters/ModParam"
      requestBody:
        $ref: "#/components/requestBodies/ModAvatarBody"
      responses:
        "200":
          $ref: "#/components/responses/ModAvatarResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Delete the avatar for the defined mod"
      operationId: "DeleteModAvatar"
      tags:
        - "mod"
      parameters:
        - $ref: "#/components/parameters/ModParam"
      responses:
        "200":
          $ref: "#/components/responses/ModAvatarResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "400":
          $ref: "#/components/responses/ActionFailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /mods/{mod_id}/users:
    get:
      summary: "Fetch all users attached to mod"
      operationId: "ListModUsers"
      tags:
        - "mod"
      parameters:
        - $ref: "#/components/parameters/ModParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/ModUsersResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Attach a user to mod"
      operationId: "AttachModToUser"
      tags:
        - "mod"
      parameters:
        - $ref: "#/components/parameters/ModParam"
      requestBody:
        $ref: "#/components/requestBodies/ModUserPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/AlreadyAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update user perms for mod"
      operationId: "PermitModUser"
      tags:
        - "mod"
      parameters:
        - $ref: "#/components/parameters/ModParam"
      requestBody:
        $ref: "#/components/requestBodies/ModUserPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Unlink a user from mod"
      operationId: "DeleteModFromUser"
      tags:
        - "mod"
      parameters:
        - $ref: "#/components/parameters/ModParam"
      requestBody:
        $ref: "#/components/requestBodies/ModUserDropBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /mods/{mod_id}/groups:
    get:
      summary: "Fetch all groups attached to mod"
      operationId: "ListModGroups"
      tags:
        - "mod"
      parameters:
        - $ref: "#/components/parameters/ModParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/ModGroupsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Attach a group to mod"
      operationId: "AttachModToGroup"
      tags:
        - "mod"
      parameters:
        - $ref: "#/components/parameters/ModParam"
      requestBody:
        $ref: "#/components/requestBodies/ModGroupPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/AlreadyAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update group perms for mod"
      operationId: "PermitModGroup"
      tags:
        - "mod"
      parameters:
        - $ref: "#/components/parameters/ModParam"
      requestBody:
        $ref: "#/components/requestBodies/ModGroupPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Unlink a group from mod"
      operationId: "DeleteModFromGroup"
      tags:
        - "mod"
      parameters:
        - $ref: "#/components/parameters/ModParam"
      requestBody:
        $ref: "#/components/requestBodies/ModGroupDropBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /mods/{mod_id}/versions:
    get:
      summary: "Fetch all available versions for a mod"
      operationId: "ListVersions"
      tags:
        - "mod"
      parameters:
        - $ref: "#/components/parameters/ModParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/VersionsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Create a new version for a mod"
      operationId: "CreateVersion"
      tags:
        - "mod"
      parameters:
        - $ref: "#/components/parameters/ModParam"
      requestBody:
        $ref: "#/components/requestBodies/CreateVersionBody"
      responses:
        "200":
          $ref: "#/components/responses/VersionResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /mods/{mod_id}/versions/{version_id}:
    get:
      summary: "Fetch a specific version for a mod"
      operationId: "ShowVersion"
      tags:
        - "mod"
      parameters:
        - $ref: "#/components/parameters/ModParam"
        - $ref: "#/components/parameters/VersionParam"
      responses:
        "200":
          $ref: "#/components/responses/VersionResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update a specific version for a mod"
      operationId: "UpdateVersion"
      tags:
        - "mod"
      parameters:
        - $ref: "#/components/parameters/ModParam"
        - $ref: "#/components/parameters/VersionParam"
      requestBody:
        $ref: "#/components/requestBodies/UpdateVersionBody"
      responses:
        "200":
          $ref: "#/components/responses/VersionResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Delete a specific version for a mod"
      operationId: "DeleteVersion"
      tags:
        - "mod"
      parameters:
        - $ref: "#/components/parameters/ModParam"
        - $ref: "#/components/parameters/VersionParam"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "400":
          $ref: "#/components/responses/ActionFailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /mods/{mod_id}/versions/{version_id}/builds:
    get:
      summary: "Fetch all builds attached to version"
      operationId: "ListVersionBuilds"
      tags:
        - "mod"
      parameters:
        - $ref: "#/components/parameters/ModParam"
        - $ref: "#/components/parameters/VersionParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/VersionBuildsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Attach a build to a version"
      operationId: "AttachVersionToBuild"
      tags:
        - "mod"
      parameters:
        - $ref: "#/components/parameters/ModParam"
        - $ref: "#/components/parameters/VersionParam"
      requestBody:
        $ref: "#/components/requestBodies/VersionBuildBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/AlreadyAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Unlink a build from a version"
      operationId: "DeleteVersionFromBuild"
      tags:
        - "mod"
      parameters:
        - $ref: "#/components/parameters/ModParam"
        - $ref: "#/components/parameters/VersionParam"
      requestBody:
        $ref: "#/components/requestBodies/VersionBuildBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /groups:
    get:
      summary: "Fetch all available groups"
      operationId: "ListGroups"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/GroupsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Create a new group"
      operationId: "CreateGroup"
      tags:
        - "group"
      requestBody:
        $ref: "#/components/requestBodies/CreateGroupBody"
      responses:
        "200":
          $ref: "#/components/responses/GroupResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /groups/{group_id}:
    get:
      summary: "Fetch a specific group"
      operationId: "ShowGroup"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
      responses:
        "200":
          $ref: "#/components/responses/GroupResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update a specific group"
      operationId: "UpdateGroup"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
      requestBody:
        $ref: "#/components/requestBodies/UpdateGroupBody"
      responses:
        "200":
          $ref: "#/components/responses/GroupResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Delete a specific group"
      operationId: "DeleteGroup"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "400":
          $ref: "#/components/responses/ActionFailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /groups/{group_id}/users:
    get:
      summary: "Fetch all users attached to group"
      operationId: "ListGroupUsers"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/GroupUsersResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Attach a user to group"
      operationId: "AttachGroupToUser"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
      requestBody:
        $ref: "#/components/requestBodies/GroupUserPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/AlreadyAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update user perms for group"
      operationId: "PermitGroupUser"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
      requestBody:
        $ref: "#/components/requestBodies/GroupUserPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Unlink a user from group"
      operationId: "DeleteGroupFromUser"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
      requestBody:
        $ref: "#/components/requestBodies/GroupUserDropBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /groups/{group_id}/mods:
    get:
      summary: "Fetch all mods attached to group"
      operationId: "ListGroupMods"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/GroupModsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Attach a mod to group"
      operationId: "AttachGroupToMod"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
      requestBody:
        $ref: "#/components/requestBodies/GroupModPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/AlreadyAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update mod perms for group"
      operationId: "PermitGroupMod"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
      requestBody:
        $ref: "#/components/requestBodies/GroupModPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Unlink a mod from group"
      operationId: "DeleteGroupFromMod"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
      requestBody:
        $ref: "#/components/requestBodies/GroupModDropBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /groups/{group_id}/packs:
    get:
      summary: "Fetch all packs attached to group"
      operationId: "ListGroupPacks"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/GroupPacksResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Attach a pack to group"
      operationId: "AttachGroupToPack"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
      requestBody:
        $ref: "#/components/requestBodies/GroupPackPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/AlreadyAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update pack perms for group"
      operationId: "PermitGroupPack"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
      requestBody:
        $ref: "#/components/requestBodies/GroupPackPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Unlink a pack from group"
      operationId: "DeleteGroupFromPack"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
      requestBody:
        $ref: "#/components/requestBodies/GroupPackDropBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /users:
    get:
      summary: "Fetch all available users"
      operationId: "ListUsers"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/UsersResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Create a new user"
      operationId: "CreateUser"
      tags:
        - "user"
      requestBody:
        $ref: "#/components/requestBodies/CreateUserBody"
      responses:
        "200":
          $ref: "#/components/responses/UserResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{user_id}:
    get:
      summary: "Fetch a specific user"
      operationId: "ShowUser"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
      responses:
        "200":
          $ref: "#/components/responses/UserResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update a specific user"
      operationId: "UpdateUser"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
      requestBody:
        $ref: "#/components/requestBodies/UpdateUserBody"
      responses:
        "200":
          $ref: "#/components/responses/UserResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Delete a specific user"
      operationId: "DeleteUser"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "400":
          $ref: "#/components/responses/ActionFailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{user_id}/groups:
    get:
      summary: "Fetch all groups attached to user"
      operationId: "ListUserGroups"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/UserGroupsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Attach a group to user"
      operationId: "AttachUserToGroup"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
      requestBody:
        $ref: "#/components/requestBodies/UserGroupPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/AlreadyAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update group perms for user"
      operationId: "PermitUserGroup"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
      requestBody:
        $ref: "#/components/requestBodies/UserGroupPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Unlink a group from user"
      operationId: "DeleteUserFromGroup"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
      requestBody:
        $ref: "#/components/requestBodies/UserGroupDropBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{user_id}/mods:
    get:
      summary: "Fetch all mods attached to user"
      operationId: "ListUserMods"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/UserModsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Attach a mod to user"
      operationId: "AttachUserToMod"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
      requestBody:
        $ref: "#/components/requestBodies/UserModPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/AlreadyAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update mod perms for user"
      operationId: "PermitUserMod"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
      requestBody:
        $ref: "#/components/requestBodies/UserModPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Unlink a mod from user"
      operationId: "DeleteUserFromMod"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
      requestBody:
        $ref: "#/components/requestBodies/UserModDropBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{user_id}/packs:
    get:
      summary: "Fetch all packs attached to user"
      operationId: "ListUserPacks"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/UserPacksResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Attach a pack to user"
      operationId: "AttachUserToPack"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
      requestBody:
        $ref: "#/components/requestBodies/UserPackPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/AlreadyAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update pack perms for user"
      operationId: "PermitUserPack"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
      requestBody:
        $ref: "#/components/requestBodies/UserPackPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Unlink a pack from user"
      operationId: "DeleteUserFromPack"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
      requestBody:
        $ref: "#/components/requestBodies/UserPackDropBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  securitySchemes:
    Header:
      type: apiKey
      in: header
      name: X-API-Key
    Bearer:
      type: http
      scheme: bearer
    Basic:
      type: http
      scheme: basic

  parameters:
    SearchQueryParam:
      name: "search"
      in: "query"
      required: false
      schema:
        type: "string"
      description: "Search query"

    PagingLimitParam:
      name: "limit"
      in: "query"
      required: false
      schema:
        type: "integer"
        default: 100
      description: "Paging limit"
      x-example: 100
    PagingOffsetParam:
      name: "offset"
      in: "query"
      required: false
      schema:
        type: "integer"
        default: 0
      description: "Paging offset"
      x-example: 0

    SortColumnParam:
      name: "sort"
      in: "query"
      required: false
      schema:
        type: "string"
      description: "Sorting column"
    SortOrderParam:
      name: "order"
      in: "query"
      required: false
      schema:
        type: "string"
        default: "asc"
        enum:
          - "asc"
          - "desc"
      description: "Sorting order"
      x-example: "desc"

    AuthProviderParam:
      in: "path"
      name: "provider"
      description: "An identifier for the auth provider"
      schema:
        type: "string"
      required: true
      x-example: "github"
    AuthStateParam:
      name: "state"
      in: "query"
      required: false
      schema:
        type: "string"
      description: "Auth state"
    AuthCodeParam:
      name: "code"
      in: "query"
      required: false
      schema:
        type: "string"
      description: "Auth code"

    MinecraftParam:
      in: "path"
      name: "minecraft_id"
      description: "A minecraft identifier or slug"
      schema:
        type: "string"
      required: true
      x-example: "minecraft-1"
      x-go-name: "MinecraftID"
    ForgeParam:
      in: "path"
      name: "forge_id"
      description: "A forge identifier or slug"
      schema:
        type: "string"
      required: true
      x-example: "forge-1"
      x-go-name: "ForgeID"
    NeoforgeParam:
      in: "path"
      name: "neoforge_id"
      description: "A neoforge identifier or slug"
      schema:
        type: "string"
      required: true
      x-example: "neoforge-1"
      x-go-name: "NeoforgeID"
    QuiltParam:
      in: "path"
      name: "quilt_id"
      description: "A quilt identifier or slug"
      schema:
        type: "string"
      required: true
      x-example: "quilt-1"
      x-go-name: "QuiltID"
    FabricParam:
      in: "path"
      name: "fabric_id"
      description: "A fabric identifier or slug"
      schema:
        type: "string"
      required: true
      x-example: "fabric-1"
      x-go-name: "FabricID"

    ModParam:
      in: "path"
      name: "mod_id"
      description: "A mod identifier or slug"
      schema:
        type: "string"
      required: true
      x-example: "mod-1"
      x-go-name: "ModID"
    VersionParam:
      in: "path"
      name: "version_id"
      description: "A version identifier or slug"
      schema:
        type: "string"
      required: true
      x-example: "version-1"
      x-go-name: "VersionID"

    PackParam:
      in: "path"
      name: "pack_id"
      description: "A pack identifier or slug"
      schema:
        type: "string"
      required: true
      x-example: "pack-1"
      x-go-name: "PackID"
    BuildParam:
      in: "path"
      name: "build_id"
      description: "A build identifier or slug"
      schema:
        type: "string"
      required: true
      x-example: "build-1"
      x-go-name: "BuildID"

    GroupParam:
      in: "path"
      name: "group_id"
      description: "A group identifier or slug"
      schema:
        type: "string"
      required: true
      x-example: "group-1"
      x-go-name: "GroupID"
    UserParam:
      in: "path"
      name: "user_id"
      description: "A user identifier or slug"
      schema:
        type: "string"
      required: true
      x-example: "jdoe"
      x-go-name: "UserID"

  requestBodies:
    RedirectAuthBody:
      description: "The redirect token to authenticate"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "token"
            properties:
              token:
                type: "string"

    LoginAuthBody:
      description: "The credentials to authenticate"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "username"
              - "password"
            properties:
              username:
                type: "string"
              password:
                type: "string"
                format: "password"

    UpdateProfileBody:
      description: "The profile data to update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              username:
                type: "string"
                x-omitempty: true
                x-nullable: true
              password:
                type: "string"
                format: "password"
                x-omitempty: true
                x-nullable: true
              email:
                type: "string"
                x-omitempty: true
                x-nullable: true
              fullname:
                type: "string"
                x-omitempty: true
                x-nullable: true

    MinecraftBuildBody:
      description: "The minecraft build data to create or update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "pack"
              - "build"
            properties:
              pack:
                type: "string"
                x-omitempty: true
                x-nullable: true
              build:
                type: "string"
                x-omitempty: true
                x-nullable: true
    ForgeBuildBody:
      description: "The forge build data to create or update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "pack"
              - "build"
            properties:
              pack:
                type: "string"
                x-omitempty: true
                x-nullable: true
              build:
                type: "string"
                x-omitempty: true
                x-nullable: true
    NeoforgeBuildBody:
      description: "The neoforge build data to create or update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "pack"
              - "build"
            properties:
              pack:
                type: "string"
                x-omitempty: true
                x-nullable: true
              build:
                type: "string"
                x-omitempty: true
                x-nullable: true
    QuiltBuildBody:
      description: "The quilt build data to create or update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "pack"
              - "build"
            properties:
              pack:
                type: "string"
                x-omitempty: true
                x-nullable: true
              build:
                type: "string"
                x-omitempty: true
                x-nullable: true
    FabricBuildBody:
      description: "The fabric build data to create or update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "pack"
              - "build"
            properties:
              pack:
                type: "string"
                x-omitempty: true
                x-nullable: true
              build:
                type: "string"
                x-omitempty: true
                x-nullable: true

    CreateModBody:
      description: "The mod data to create"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              slug:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              side:
                type: "string"
                x-omitempty: true
                x-nullable: true
              description:
                type: "string"
                x-omitempty: true
                x-nullable: true
              author:
                type: "string"
                x-omitempty: true
                x-nullable: true
              website:
                type: "string"
                x-omitempty: true
                x-nullable: true
              donate:
                type: "string"
                x-omitempty: true
                x-nullable: true
              public:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
    UpdateModBody:
      description: "The mod data to update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              slug:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              side:
                type: "string"
                x-omitempty: true
                x-nullable: true
              description:
                type: "string"
                x-omitempty: true
                x-nullable: true
              author:
                type: "string"
                x-omitempty: true
                x-nullable: true
              website:
                type: "string"
                x-omitempty: true
                x-nullable: true
              donate:
                type: "string"
                x-omitempty: true
                x-nullable: true
              public:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
    ModAvatarBody:
      description: "The mod avatar to upload"
      required: true
      content:
        multipart/form-data:
          schema:
            type: "object"
            properties:
              file:
                type: "string"
                format: "binary"
          encoding:
            file:
              contentType: "image/*"
              headers:
                content-disposition:
                  schema:
                    type: "string"
    ModUserPermBody:
      description: "The mod user data to permit"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "user"
              - "perm"
            properties:
              user:
                type: "string"
              perm:
                type: "string"
    ModUserDropBody:
      description: "The mod user data to unlink"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "user"
            properties:
              user:
                type: "string"
    ModGroupPermBody:
      description: "The mod group data to permit"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "group"
              - "perm"
            properties:
              group:
                type: "string"
              perm:
                type: "string"
    ModGroupDropBody:
      description: "The mod group data to unlink"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "group"
            properties:
              group:
                type: "string"

    CreateVersionBody:
      description: "The version data to create"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              public:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
              upload:
                type: "string"
                format: "data-url"
                x-omitempty: true
                x-nullable: true
    UpdateVersionBody:
      description: "The version data to update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              public:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
              upload:
                type: "string"
                format: "data-url"
                x-omitempty: true
                x-nullable: true
    VersionBuildBody:
      description: "The version build data to create or delete"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "pack"
              - "build"
            properties:
              pack:
                type: "string"
                x-omitempty: true
                x-nullable: true
              build:
                type: "string"
                x-omitempty: true
                x-nullable: true

    CreatePackBody:
      description: "The pack data to create"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              slug:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              website:
                type: "string"
                x-omitempty: true
                x-nullable: true
              public:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
    UpdatePackBody:
      description: "The pack data to update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              slug:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              website:
                type: "string"
                x-omitempty: true
                x-nullable: true
              public:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
    PackAvatarBody:
      description: "The pack avatar to upload"
      required: true
      content:
        multipart/form-data:
          schema:
            type: "object"
            properties:
              file:
                type: "string"
                format: "binary"
          encoding:
            file:
              contentType: "image/*"
              headers:
                content-disposition:
                  schema:
                    type: "string"
    PackUserPermBody:
      description: "The pack user data to permit"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "user"
              - "perm"
            properties:
              user:
                type: "string"
              perm:
                type: "string"
    PackUserDropBody:
      description: "The pack user data to unlink"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "user"
            properties:
              user:
                type: "string"
    PackGroupPermBody:
      description: "The pack group data to permit"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "group"
              - "perm"
            properties:
              group:
                type: "string"
              perm:
                type: "string"
    PackGroupDropBody:
      description: "The pack group data to unlink"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "group"
            properties:
              group:
                type: "string"

    CreateBuildBody:
      description: "The build data to create"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              minecraft_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "MinecraftID"
              forge_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "ForgeID"
              neoforge_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "NeoforgeID"
              quilt_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "QuiltID"
              fabric_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "FabricID"
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              java:
                type: "string"
                x-omitempty: true
                x-nullable: true
              memory:
                type: "string"
                x-omitempty: true
                x-nullable: true
              latest:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
              recommended:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
              public:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
    UpdateBuildBody:
      description: "The build data to update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              minecraft_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "MinecraftID"
              forge_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "ForgeID"
              neoforge_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "NeoforgeID"
              quilt_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "QuiltID"
              fabric_id:
                type: "string"
                x-omitempty: true
                x-nullable: true
                x-go-name: "FabricID"
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
              java:
                type: "string"
                x-omitempty: true
                x-nullable: true
              memory:
                type: "string"
                x-omitempty: true
                x-nullable: true
              latest:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
              recommended:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
              public:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
    BuildVersionBody:
      description: "The build version data to create or delete"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "mod"
              - "version"
            properties:
              mod:
                type: "string"
                x-omitempty: true
                x-nullable: true
              version:
                type: "string"
                x-omitempty: true
                x-nullable: true

    CreateGroupBody:
      description: "The group data to create"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              slug:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
    UpdateGroupBody:
      description: "The group data to update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              slug:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
    GroupUserPermBody:
      description: "The group user data to permit"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "user"
              - "perm"
            properties:
              user:
                type: "string"
              perm:
                type: "string"
    GroupUserDropBody:
      description: "The group user data to unlink"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "user"
            properties:
              user:
                type: "string"
    GroupModPermBody:
      description: "The group mod data to permit"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "mod"
              - "perm"
            properties:
              mod:
                type: "string"
              perm:
                type: "string"
    GroupModDropBody:
      description: "The group mod data to unlink"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "mod"
            properties:
              mod:
                type: "string"
    GroupPackPermBody:
      description: "The group pack data to permit"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "pack"
              - "perm"
            properties:
              pack:
                type: "string"
              perm:
                type: "string"
    GroupPackDropBody:
      description: "The group pack data to unlink"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "pack"
            properties:
              pack:
                type: "string"

    CreateUserBody:
      description: "The user data to create"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              username:
                type: "string"
                x-omitempty: true
                x-nullable: true
              password:
                type: "string"
                format: "password"
                x-omitempty: true
                x-nullable: true
              email:
                type: "string"
                x-omitempty: true
                x-nullable: true
              fullname:
                type: "string"
                x-omitempty: true
                x-nullable: true
              admin:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
                default: false
              active:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
                default: true
    UpdateUserBody:
      description: "The user data to update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              username:
                type: "string"
                x-omitempty: true
                x-nullable: true
              password:
                type: "string"
                format: "password"
                x-omitempty: true
                x-nullable: true
              email:
                type: "string"
                x-omitempty: true
                x-nullable: true
              fullname:
                type: "string"
                x-omitempty: true
                x-nullable: true
              admin:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
              active:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
    UserGroupPermBody:
      description: "The user group data to permit"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "group"
              - "perm"
            properties:
              group:
                type: "string"
              perm:
                type: "string"
    UserGroupDropBody:
      description: "The user group data to unlink"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "group"
            properties:
              group:
                type: "string"
    UserModPermBody:
      description: "The user mod data to permit"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "mod"
              - "perm"
            properties:
              mod:
                type: "string"
              perm:
                type: "string"
    UserModDropBody:
      description: "The user mod data to unlink"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "mod"
            properties:
              mod:
                type: "string"
    UserPackPermBody:
      description: "The user pack data to permit"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "pack"
              - "perm"
            properties:
              pack:
                type: "string"
              perm:
                type: "string"
    UserPackDropBody:
      description: "The user pack data to unlink"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "pack"
            properties:
              pack:
                type: "string"

  responses:
    BadRequestError:
      description: "Failed to parse request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"
    NotFoundError:
      description: "Resource not found"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"
    InternalServerError:
      description: "Some internal server error"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"

    SuccessMessage:
      description: "Plain success message"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"
    ValidationError:
      description: "Failed to validate request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"
    NotAuthorizedError:
      description: "User is not authorized"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"
    AlreadyAttachedError:
      description: "Resource is already attached"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"
    NotAttachedError:
      description: "Resource is not attached"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"

    ActionFailedError:
      description: "Failed to execute action for resource"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"

    InvalidTokenError:
      description: "Failed to generate or validate token"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"

    BadCredentialsError:
      description: "Unauthorized with wrong credentials"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"

    RemoteUnavailableError:
      description: "Remote source is nit available"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"

    GeneralError:
      description: "Some error unrelated to the handler"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"

    ProvidersResponse:
      description: "A collection of auth providers"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "providers"
            properties:
              total:
                type: integer
                format: int64
              providers:
                type: "array"
                items:
                  $ref: "#/components/schemas/Provider"

    VerifyResponse:
      description: "Metadata of the auth token"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthVerify"
    LoginResponse:
      description: "Generated token with expire date"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthToken"
    RefreshResponse:
      description: "Refreshed token with expire date"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthToken"
    TokenResponse:
      description: "Generated token never expiring"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthToken"
    ProfileResponse:
      description: "The current profile details"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Profile"

    MinecraftsResponse:
      description: "A collection of minecrafts"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "versions"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              versions:
                type: "array"
                items:
                  $ref: "#/components/schemas/Minecraft"
    MinecraftResponse:
      description: "The details for a minecraft"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Minecraft"
    MinecraftBuildsResponse:
      description: "A collection of minecraft builds"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "builds"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              minecraft:
                readOnly: true
                $ref: "#/components/schemas/Minecraft"
              builds:
                type: "array"
                items:
                  $ref: "#/components/schemas/Build"

    ForgesResponse:
      description: "A collection of forges"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "versions"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              versions:
                type: "array"
                items:
                  $ref: "#/components/schemas/Forge"
    ForgeResponse:
      description: "The details for a forge"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Forge"
    ForgeBuildsResponse:
      description: "A collection of forge builds"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "builds"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              forge:
                readOnly: true
                $ref: "#/components/schemas/Forge"
              builds:
                type: "array"
                items:
                  $ref: "#/components/schemas/Build"

    NeoforgesResponse:
      description: "A collection of neoforges"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "versions"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              versions:
                type: "array"
                items:
                  $ref: "#/components/schemas/Neoforge"
    NeoforgeResponse:
      description: "The details for a neoforge"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Neoforge"
    NeoforgeBuildsResponse:
      description: "A collection of neoforge builds"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "builds"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              neoforge:
                readOnly: true
                $ref: "#/components/schemas/Neoforge"
              builds:
                type: "array"
                items:
                  $ref: "#/components/schemas/Build"

    QuiltsResponse:
      description: "A collection of quilts"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "versions"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              versions:
                type: "array"
                items:
                  $ref: "#/components/schemas/Quilt"
    QuiltResponse:
      description: "The details for a quilt"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Quilt"
    QuiltBuildsResponse:
      description: "A collection of quilt builds"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "builds"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              quilt:
                readOnly: true
                $ref: "#/components/schemas/Quilt"
              builds:
                type: "array"
                items:
                  $ref: "#/components/schemas/Build"

    FabricsResponse:
      description: "A collection of fabrics"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "versions"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              versions:
                type: "array"
                items:
                  $ref: "#/components/schemas/Fabric"
    FabricResponse:
      description: "The details for a fabric"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Fabric"
    FabricBuildsResponse:
      description: "A collection of fabric builds"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "builds"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              fabric:
                readOnly: true
                $ref: "#/components/schemas/Fabric"
              builds:
                type: "array"
                items:
                  $ref: "#/components/schemas/Build"

    ModsResponse:
      description: "A collection of mods"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "mods"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              mods:
                type: "array"
                items:
                  $ref: "#/components/schemas/Mod"
    ModResponse:
      description: "The details for a mod"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Mod"
    ModAvatarResponse:
      description: "The details for a mod avatar"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ModAvatar"
    ModUsersResponse:
      description: "A collection of mod users"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "users"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              mod:
                $ref: "#/components/schemas/Mod"
                readOnly: true
              users:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserMod"
    ModGroupsResponse:
      description: "A collection of mod groups"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "groups"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              mod:
                $ref: "#/components/schemas/Mod"
                readOnly: true
              groups:
                type: "array"
                items:
                  $ref: "#/components/schemas/GroupMod"

    VersionsResponse:
      description: "A collection of version"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "versions"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              mod:
                $ref: "#/components/schemas/Mod"
                readOnly: true
              versions:
                type: "array"
                items:
                  $ref: "#/components/schemas/Version"
    VersionResponse:
      description: "The details for a version"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Version"
    VersionBuildsResponse:
      description: "A collection of version builds"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "builds"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              mod:
                $ref: "#/components/schemas/Mod"
                readOnly: true
              version:
                $ref: "#/components/schemas/Version"
                readOnly: true
              builds:
                type: "array"
                items:
                  $ref: "#/components/schemas/BuildVersion"

    PacksResponse:
      description: "A collection of packs"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "packs"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              packs:
                type: "array"
                items:
                  $ref: "#/components/schemas/Pack"
    PackResponse:
      description: "The details for a pack"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Pack"
    PackAvatarResponse:
      description: "The details for a pack avatar"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PackAvatar"
    PackUsersResponse:
      description: "A collection of pack users"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "users"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              pack:
                $ref: "#/components/schemas/Pack"
                readOnly: true
              users:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserPack"
    PackGroupsResponse:
      description: "A collection of pack groups"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "groups"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              pack:
                $ref: "#/components/schemas/Pack"
                readOnly: true
              groups:
                type: "array"
                items:
                  $ref: "#/components/schemas/GroupPack"

    BuildsResponse:
      description: "A collection of build"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "builds"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              pack:
                $ref: "#/components/schemas/Pack"
                readOnly: true
              builds:
                type: "array"
                items:
                  $ref: "#/components/schemas/Build"
    BuildResponse:
      description: "The details for a build"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Build"
    BuildVersionsResponse:
      description: "A collection of version builds"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "versions"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              pack:
                $ref: "#/components/schemas/Pack"
                readOnly: true
              build:
                $ref: "#/components/schemas/Build"
                readOnly: true
              versions:
                type: "array"
                items:
                  $ref: "#/components/schemas/BuildVersion"

    GroupsResponse:
      description: "A collection of groups"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "groups"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              groups:
                type: "array"
                items:
                  $ref: "#/components/schemas/Group"
    GroupResponse:
      description: "The details for a group"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Group"
    GroupUsersResponse:
      description: "A collection of group users"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "users"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              group:
                $ref: "#/components/schemas/Group"
                readOnly: true
              users:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserGroup"
    GroupModsResponse:
      description: "A collection of group mods"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "mods"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              group:
                $ref: "#/components/schemas/Group"
                readOnly: true
              mods:
                type: "array"
                items:
                  $ref: "#/components/schemas/GroupMod"
    GroupPacksResponse:
      description: "A collection of group packs"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "packs"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              group:
                $ref: "#/components/schemas/Group"
                readOnly: true
              packs:
                type: "array"
                items:
                  $ref: "#/components/schemas/GroupPack"

    UsersResponse:
      description: "A collection of users"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "users"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              users:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
    UserResponse:
      description: "The details for an user"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
    UserGroupsResponse:
      description: "A collection of user groups"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "groups"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              user:
                $ref: "#/components/schemas/User"
                readOnly: true
              groups:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserGroup"
    UserModsResponse:
      description: "A collection of user mods"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "mods"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              user:
                $ref: "#/components/schemas/User"
                readOnly: true
              mods:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserMod"
    UserPacksResponse:
      description: "A collection of user packs"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "packs"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              user:
                $ref: "#/components/schemas/User"
                readOnly: true
              packs:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserPack"

  schemas:
    AuthToken:
      type: "object"
      required:
        - "token"
      properties:
        token:
          type: "string"
          readOnly: true
        expires_at:
          type: "string"
          format: "date-time"
          x-omitempty: true
          x-nullable: true
          readOnly: true

    AuthVerify:
      type: "object"
      required:
        - "username"
      properties:
        username:
          type: "string"
          readOnly: true
        created_at:
          type: "string"
          format: "date-time"
          x-omitempty: true
          x-nullable: true
          readOnly: true

    Profile:
      title: "Profile"
      description: "Model to represent profile"
      type: "object"
      properties:
        id:
          type: "string"
          x-go-name: "ID"
        username:
          type: "string"
          x-omitempty: true
          x-nullable: true
        password:
          type: "string"
          format: "password"
          x-omitempty: true
          x-nullable: true
        email:
          type: "string"
          x-omitempty: true
          x-nullable: true
        fullname:
          type: "string"
          x-omitempty: true
          x-nullable: true
        profile:
          type: "string"
          x-omitempty: true
          x-nullable: true
        admin:
          type: "boolean"
          readOnly: true
        active:
          type: "boolean"
          readOnly: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true
        auths:
          type: "array"
          x-omitempty: true
          x-nullable: true
          readOnly: true
          items:
            $ref: "#/components/schemas/UserAuth"
        groups:
          type: "array"
          x-omitempty: true
          x-nullable: true
          readOnly: true
          items:
            $ref: "#/components/schemas/UserGroup"
        mods:
          type: "array"
          x-omitempty: true
          x-nullable: true
          readOnly: true
          items:
            $ref: "#/components/schemas/UserMod"
        packs:
          type: "array"
          x-omitempty: true
          x-nullable: true
          readOnly: true
          items:
            $ref: "#/components/schemas/UserPack"

    Minecraft:
      title: "Minecraft"
      description: "Model to represent minecraft"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
          x-go-name: "ID"
        name:
          type: "string"
          x-omitempty: true
          x-nullable: true
        type:
          type: "string"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    Forge:
      title: "Forge"
      description: "Model to represent forge"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
          x-go-name: "ID"
        name:
          type: "string"
          x-omitempty: true
          x-nullable: true
        minecraft:
          type: "string"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    Neoforge:
      title: "Neoforge"
      description: "Model to represent neoforge"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
          x-go-name: "ID"
        name:
          type: "string"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    Quilt:
      title: "Quilt"
      description: "Model to represent quilt"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
          x-go-name: "ID"
        name:
          type: "string"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    Fabric:
      title: "Fabric"
      description: "Model to represent fabric"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
          x-go-name: "ID"
        name:
          type: "string"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    Mod:
      title: "Mod"
      description: "Model to represent mod"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
          x-go-name: "ID"
        avatar:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/ModAvatar"
        slug:
          type: "string"
          x-omitempty: true
          x-nullable: true
        name:
          type: "string"
          x-omitempty: true
          x-nullable: true
        side:
          type: "string"
          x-omitempty: true
          x-nullable: true
        description:
          type: "string"
          x-omitempty: true
          x-nullable: true
        author:
          type: "string"
          x-omitempty: true
          x-nullable: true
        website:
          type: "string"
          x-omitempty: true
          x-nullable: true
        donate:
          type: "string"
          x-omitempty: true
          x-nullable: true
        public:
          type: "boolean"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    ModAvatar:
      title: "Mod Avatar"
      description: "Model to represent mod avatar"
      type: "object"
      properties:
        slug:
          type: "string"
          x-omitempty: true
          x-nullable: true
        url:
          type: "string"
          x-omitempty: true
          x-nullable: true
          x-go-name: "URL"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    Version:
      title: "Version"
      description: "Model to represent version"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
          x-go-name: "ID"
        file:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/VersionFile"
        mod:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Mod"
        name:
          type: "string"
          x-omitempty: true
          x-nullable: true
        public:
          type: "boolean"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    VersionFile:
      title: "Version File"
      description: "Model to represent version file"
      type: "object"
      properties:
        slug:
          type: "string"
          x-omitempty: true
          x-nullable: true
        content_type:
          type: "string"
          x-omitempty: true
          x-nullable: true
        md5:
          type: "string"
          x-omitempty: true
          x-nullable: true
          x-go-name: "MD5"
        path:
          type: "string"
          x-omitempty: true
          x-nullable: true
        url:
          type: "string"
          x-omitempty: true
          x-nullable: true
          x-go-name: "URL"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    Pack:
      title: "Pack"
      description: "Model to represent pack"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
          x-go-name: "ID"
        avatar:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/PackAvatar"
        slug:
          type: "string"
          x-omitempty: true
          x-nullable: true
        name:
          type: "string"
          x-omitempty: true
          x-nullable: true
        website:
          type: "string"
          x-omitempty: true
          x-nullable: true
        public:
          type: "boolean"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    PackAvatar:
      title: "Pack Avatar"
      description: "Model to represent pack avatar"
      type: "object"
      properties:
        slug:
          type: "string"
          x-omitempty: true
          x-nullable: true
        url:
          type: "string"
          x-omitempty: true
          x-nullable: true
          x-go-name: "URL"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    Build:
      title: "Build"
      description: "Model to represent build"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
          x-go-name: "ID"
        pack:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Pack"
        minecraft_id:
          type: "string"
          x-omitempty: true
          x-nullable: true
          x-go-name: "MinecraftID"
        minecraft:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Minecraft"
        forge_id:
          type: "string"
          x-omitempty: true
          x-nullable: true
          x-go-name: "ForgeID"
        forge:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Forge"
        neoforge_id:
          type: "string"
          x-omitempty: true
          x-nullable: true
          x-go-name: "NeoforgeID"
        neoforge:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Neoforge"
        quilt_id:
          type: "string"
          x-omitempty: true
          x-nullable: true
          x-go-name: "QuiltID"
        quilt:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Quilt"
        fabric_id:
          type: "string"
          x-omitempty: true
          x-nullable: true
          x-go-name: "FabricID"
        fabric:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Fabric"
        name:
          type: "string"
          x-omitempty: true
          x-nullable: true
        java:
          type: "string"
          x-omitempty: true
          x-nullable: true
        memory:
          type: "string"
          x-omitempty: true
          x-nullable: true
        latest:
          type: "boolean"
          x-omitempty: true
          x-nullable: true
        recommended:
          type: "boolean"
          x-omitempty: true
          x-nullable: true
        public:
          type: "boolean"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    BuildVersion:
      title: "Build Version"
      description: "Model to represent build version"
      type: "object"
      required:
        - "build_id"
        - "version_id"
      properties:
        build_id:
          type: "string"
          x-go-name: "BuildID"
        build:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Build"
        version_id:
          type: "string"
          x-go-name: "VersionID"
        version:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Version"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    Group:
      title: "Group"
      description: "Model to represent group"
      type: "object"
      properties:
        id:
          type: "string"
          x-go-name: "ID"
        slug:
          type: "string"
          x-omitempty: true
          x-nullable: true
        name:
          type: "string"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    GroupPack:
      title: "Group Pack"
      description: "Model to represent group pack"
      type: "object"
      required:
        - "group_id"
        - "pack_id"
      properties:
        group_id:
          type: "string"
          x-go-name: "GroupID"
        group:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Group"
        pack_id:
          type: "string"
          x-go-name: "PackID"
        pack:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Pack"
        perm:
          type: "string"
          default: "user"
          enum:
            - "user"
            - "admin"
            - "owner"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    GroupMod:
      title: "Group Mod"
      description: "Model to represent group mod"
      type: "object"
      required:
        - "group_id"
        - "mod_id"
      properties:
        group_id:
          type: "string"
          x-go-name: "GroupID"
        group:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Group"
        mod_id:
          type: "string"
          x-go-name: "ModID"
        mod:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Mod"
        perm:
          type: "string"
          default: "user"
          enum:
            - "user"
            - "admin"
            - "owner"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    User:
      title: "User"
      description: "Model to represent user"
      type: "object"
      properties:
        id:
          type: "string"
          x-go-name: "ID"
        username:
          type: "string"
          x-omitempty: true
          x-nullable: true
        password:
          type: "string"
          format: "password"
          x-omitempty: true
          x-nullable: true
        email:
          type: "string"
          x-omitempty: true
          x-nullable: true
        fullname:
          type: "string"
          x-omitempty: true
          x-nullable: true
        profile:
          type: "string"
          x-omitempty: true
          x-nullable: true
        admin:
          type: "boolean"
          x-omitempty: true
          x-nullable: true
        active:
          type: "boolean"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true
        auths:
          type: "array"
          x-omitempty: true
          x-nullable: true
          readOnly: true
          items:
            $ref: "#/components/schemas/UserAuth"

    UserAuth:
      title: "User Auth"
      description: "Model to represent user auth"
      type: "object"
      properties:
        provider:
          type: "string"
        ref:
          type: "string"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    UserGroup:
      title: "User Group"
      description: "Model to represent user group"
      type: "object"
      required:
        - "user_id"
        - "group_id"
      properties:
        user_id:
          type: "string"
          x-go-name: "UserID"
        user:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/User"
        group_id:
          type: "string"
          x-go-name: "GroupID"
        group:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Group"
        perm:
          type: "string"
          default: "user"
          enum:
            - "owner"
            - "user"
            - "admin"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    UserPack:
      title: "User Pack"
      description: "Model to represent user pack"
      type: "object"
      required:
        - "user_id"
        - "pack_id"
      properties:
        user_id:
          type: "string"
          x-go-name: "UserID"
        user:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/User"
        pack_id:
          type: "string"
          x-go-name: "PackID"
        pack:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Pack"
        perm:
          type: "string"
          default: "user"
          enum:
            - "user"
            - "admin"
            - "owner"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    UserMod:
      title: "User Mod"
      description: "Model to represent user mod"
      type: "object"
      required:
        - "user_id"
        - "mod_id"
      properties:
        user_id:
          type: "string"
          x-go-name: "UserID"
        user:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/User"
        mod_id:
          type: "string"
          x-go-name: "ModID"
        mod:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Mod"
        perm:
          type: "string"
          default: "user"
          enum:
            - "user"
            - "admin"
            - "owner"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    Provider:
      title: "Provider"
      description: "Model to represent auth provider"
      type: "object"
      properties:
        name:
          type: "string"
          readOnly: true
        driver:
          type: "string"
          readOnly: true
        display:
          type: "string"
          readOnly: true
        icon:
          type: "string"
          readOnly: true

    Notification:
      title: "Notification"
      description: "Generic response for errors and validations"
      type: "object"
      properties:
        status:
          type: "integer"
          x-omitempty: true
        message:
          type: "string"
          x-omitempty: true
        errors:
          type: "array"
          items:
            $ref: "#/components/schemas/Validation"

    Validation:
      title: "Validation"
      description: "General structure to show validation errors"
      type: "object"
      properties:
        field:
          type: "string"
        message:
          type: "string"

...

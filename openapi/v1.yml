---
openapi: "3.0.0"

info:
  version: "1.0.0-alpha1"
  description: "API definition for Kleister, manage mod packs for Minecraft"
  title: "Kleister OpenAPI"
  contact:
    name: "Kleister"
    email: "kleister@webhippie.de"
    url: "https://kleister.eu"
  license:
    name: "Apache-2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

servers:
  - url: "https://try.kleister.eu/api/v1"

security:
  - Header: []
  - Bearer: []
  - Basic: []
  - Cookie: []

paths:
  /auth/{provider}/initialize:
    get:
      summary: "Initialize the external authentication"
      operationId: "ExternalInitialize"
      tags:
        - "auth"
      parameters:
        - in: "path"
          name: "provider"
          description: "An identifier for the auth provider"
          schema:
            type: "string"
          required: true
          x-example: "github"
        - name: "state"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Auth state"
      security: []
      responses:
        "307":
          description: "Redirect to external auth provider"
        "404":
          description: "Provider identifier is unknown"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Failed to initialze the provider"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /auth/{provider}/callback:
    get:
      summary: "Callback for external authentication"
      operationId: "ExternalCallback"
      tags:
        - "auth"
      parameters:
        - in: "path"
          name: "provider"
          description: "An identifier for the auth provider"
          schema:
            type: "string"
          required: true
          x-example: "github"
        - name: "state"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Auth state"
        - name: "code"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Auth code"
      security: []
      responses:
        "307":
          description: "Redirect to root of the application"
        "404":
          description: "Provider identifier is unknown"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Failed to initialize provider"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /auth/providers:
    get:
      summary: "Fetch the available auth providers"
      operationId: "ExternalProviders"
      tags:
        - "auth"
      security: []
      responses:
        "200":
          description: "A collection of auth providers"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/providers"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /auth/login:
    post:
      summary: "Authenticate an user by credentials"
      operationId: "LoginAuth"
      tags:
        - "auth"
      requestBody:
        description: "The credentials to authenticate"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/auth_login"
      security: []
      responses:
        "200":
          description: "Generated token with expire date"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/auth_token"
        "401":
          description: "Unauthorized with wrong credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /auth/refresh:
    get:
      summary: "Refresh an auth token before it expires"
      operationId: "RefreshAuth"
      tags:
        - "auth"
      responses:
        "200":
          description: "Refreshed token with expire date"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/auth_token"
        "401":
          description: "Failed to generate valid token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /auth/verify:
    get:
      summary: "Verify validity for an authentication token"
      operationId: "VerifyAuth"
      tags:
        - "auth"
      responses:
        "200":
          description: "Metadata of the auth token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/auth_verify"
        "401":
          description: "Unauthorized invalid token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /profile/token:
    get:
      summary: "Retrieve an unlimited auth token"
      operationId: "TokenProfile"
      tags:
        - "profile"
      responses:
        "200":
          description: "Generated token never expiring"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/auth_token"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /profile/self:
    get:
      summary: "Fetch profile details of the personal account"
      operationId: "ShowProfile"
      tags:
        - "profile"
      responses:
        "200":
          description: "The current profile details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/profile"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    put:
      summary: "Update your own profile information"
      operationId: "UpdateProfile"
      tags:
        - "profile"
      requestBody:
        description: "The profile data to update"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/profile"
      responses:
        "200":
          description: "The updated profile details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/profile"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /minecraft:
    get:
      summary: "Fetch the available Minecraft versions"
      operationId: "ListMinecrafts"
      tags:
        - "minecraft"
      parameters:
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search query"
          x-example: "John Doe"
      responses:
        "200":
          description: "A collection of minecraft versions"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/minecrafts"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    put:
      summary: "Update the available Minecraft versions"
      operationId: "UpdateMinecraft"
      tags:
        - "minecraft"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "503":
          description: "If remote source is not available"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /minecraft/{minecraft_id}/builds:
    get:
      summary: "Fetch the builds attached to a Minecraft version"
      operationId: "ListMinecraftBuilds"
      tags:
        - "minecraft"
      parameters:
        - in: "path"
          name: "minecraft_id"
          description: "A minecraft identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "afcxm2owajfthby9bq1p"
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search query"
          x-example: "John Doe"
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "build_name"
            enum:
              - "build_name"
              - "build_public"
              - "pack_slug"
              - "pack_name"
          description: "Sorting column"
          x-example: "name"
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
            enum:
              - "asc"
              - "desc"
          description: "Sorting order"
          x-example: "desc"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 100
          description: "Paging limit"
          x-example: 100
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 0
          description: "Paging offset"
          x-example: 0
      responses:
        "200":
          description: "A collection of attached builds"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/minecraft_builds"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Minecraft or build not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    post:
      summary: "Attach a build to a Minecraft version"
      operationId: "AttachMinecraftToBuild"
      tags:
        - "minecraft"
      parameters:
        - in: "path"
          name: "minecraft_id"
          description: "A minecraft identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "afcxm2owajfthby9bq1p"
      requestBody:
        description: "The build data to attach"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/minecraft_build_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Minecraft or build not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Build is already attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    delete:
      summary: "Unlink a build from a Minecraft version"
      operationId: "DeleteMinecraftFromBuild"
      tags:
        - "minecraft"
      parameters:
        - in: "path"
          name: "minecraft_id"
          description: "A minecraft identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "afcxm2owajfthby9bq1p"
      requestBody:
        description: "The build data to unlink"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/minecraft_build_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Minecraft or build not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Build is not attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /forge:
    get:
      summary: "Fetch the available Forge versions"
      operationId: "ListForges"
      tags:
        - "forge"
      parameters:
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search query"
          x-example: "John Doe"
      responses:
        "200":
          description: "A collection of forge versions"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/forges"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    put:
      summary: "Update the available Forge versions"
      operationId: "UpdateForge"
      tags:
        - "forge"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "503":
          description: "If remote source is not available"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /forge/{forge_id}/builds:
    get:
      summary: "Fetch the builds attached to a Forge version"
      operationId: "ListForgeBuilds"
      tags:
        - "forge"
      parameters:
        - in: "path"
          name: "forge_id"
          description: "A forge identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "jilyazxqb9cvmvgrjg5p"
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search query"
          x-example: "John Doe"
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "build_name"
            enum:
              - "build_name"
              - "build_public"
              - "pack_slug"
              - "pack_name"
          description: "Sorting column"
          x-example: "name"
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
            enum:
              - "asc"
              - "desc"
          description: "Sorting order"
          x-example: "desc"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 100
          description: "Paging limit"
          x-example: 100
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 0
          description: "Paging offset"
          x-example: 0
      responses:
        "200":
          description: "A collection of attached builds"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/forge_builds"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Forge or build not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    post:
      summary: "Attach a build to a Forge version"
      operationId: "AttachForgeToBuild"
      tags:
        - "forge"
      parameters:
        - in: "path"
          name: "forge_id"
          description: "A forge identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "jilyazxqb9cvmvgrjg5p"
      requestBody:
        description: "The build data to attach"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/forge_build_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Forge or build not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Build is already attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    delete:
      summary: "Unlink a build from a Forge version"
      operationId: "DeleteForgeFromBuild"
      tags:
        - "forge"
      parameters:
        - in: "path"
          name: "forge_id"
          description: "A forge identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "jilyazxqb9cvmvgrjg5p"
      requestBody:
        description: "The build data to unlink"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/forge_build_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Forge or build not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Build is not attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /neoforge:
    get:
      summary: "Fetch the available Neoforge versions"
      operationId: "ListNeoforges"
      tags:
        - "neoforge"
      parameters:
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search query"
          x-example: "John Doe"
      responses:
        "200":
          description: "A collection of neoforge versions"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/neoforges"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    put:
      summary: "Update the available Neoforge versions"
      operationId: "UpdateNeoforge"
      tags:
        - "neoforge"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "503":
          description: "If remote source is not available"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /neoforge/{neoforge_id}/builds:
    get:
      summary: "Fetch the builds attached to a Neoforge version"
      operationId: "ListNeoforgeBuilds"
      tags:
        - "neoforge"
      parameters:
        - in: "path"
          name: "neoforge_id"
          description: "A neoforge identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "ohkdlojd2s2hpbudm7dz"
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search query"
          x-example: "John Doe"
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "build_name"
            enum:
              - "build_name"
              - "build_public"
              - "pack_slug"
              - "pack_name"
          description: "Sorting column"
          x-example: "name"
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
            enum:
              - "asc"
              - "desc"
          description: "Sorting order"
          x-example: "desc"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 100
          description: "Paging limit"
          x-example: 100
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 0
          description: "Paging offset"
          x-example: 0
      responses:
        "200":
          description: "A collection of attached builds"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/neoforge_builds"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Neoforge or build not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    post:
      summary: "Attach a build to a Neoforge version"
      operationId: "AttachNeoforgeToBuild"
      tags:
        - "neoforge"
      parameters:
        - in: "path"
          name: "neoforge_id"
          description: "A neoforge identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "ohkdlojd2s2hpbudm7dz"
      requestBody:
        description: "The build data to attach"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/neoforge_build_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Neoforge or build not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Build is already attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    delete:
      summary: "Unlink a build from a Neoforge version"
      operationId: "DeleteNeoforgeFromBuild"
      tags:
        - "neoforge"
      parameters:
        - in: "path"
          name: "neoforge_id"
          description: "A neoforge identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "ohkdlojd2s2hpbudm7dz"
      requestBody:
        description: "The build data to unlink"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/neoforge_build_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Neoforge or build not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Build is not attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /quilt:
    get:
      summary: "Fetch the available Quilt versions"
      operationId: "ListQuilts"
      tags:
        - "quilt"
      parameters:
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search query"
          x-example: "John Doe"
      responses:
        "200":
          description: "A collection of quilt versions"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/quilts"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    put:
      summary: "Update the available Quilt versions"
      operationId: "UpdateQuilt"
      tags:
        - "quilt"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "503":
          description: "If remote source is not available"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /quilt/{quilt_id}/builds:
    get:
      summary: "Fetch the builds attached to a Quilt version"
      operationId: "ListQuiltBuilds"
      tags:
        - "quilt"
      parameters:
        - in: "path"
          name: "quilt_id"
          description: "A quilt identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "tuzn3jaclqp1wvsnuk3b"
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search query"
          x-example: "John Doe"
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "build_name"
            enum:
              - "build_name"
              - "build_public"
              - "pack_slug"
              - "pack_name"
          description: "Sorting column"
          x-example: "name"
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
            enum:
              - "asc"
              - "desc"
          description: "Sorting order"
          x-example: "desc"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 100
          description: "Paging limit"
          x-example: 100
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 0
          description: "Paging offset"
          x-example: 0
      responses:
        "200":
          description: "A collection of attached builds"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/quilt_builds"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Quilt or build not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    post:
      summary: "Attach a build to a Quilt version"
      operationId: "AttachQuiltToBuild"
      tags:
        - "quilt"
      parameters:
        - in: "path"
          name: "quilt_id"
          description: "A quilt identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "tuzn3jaclqp1wvsnuk3b"
      requestBody:
        description: "The build data to attach"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quilt_build_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Quilt or build not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Build is already attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    delete:
      summary: "Unlink a build from a Quilt version"
      operationId: "DeleteQuiltFromBuild"
      tags:
        - "quilt"
      parameters:
        - in: "path"
          name: "quilt_id"
          description: "A quilt identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "tuzn3jaclqp1wvsnuk3b"
      requestBody:
        description: "The build data to unlink"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quilt_build_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Quilt or build not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Build is not attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /fabric:
    get:
      summary: "Fetch the available Fabric versions"
      operationId: "ListFabrics"
      tags:
        - "fabric"
      parameters:
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search query"
          x-example: "John Doe"
      responses:
        "200":
          description: "A collection of fabric versions"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fabrics"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    put:
      summary: "Update the available Fabric versions"
      operationId: "UpdateFabric"
      tags:
        - "fabric"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "503":
          description: "If remote source is not available"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /fabric/{fabric_id}/builds:
    get:
      summary: "Fetch the builds attached to a Fabric version"
      operationId: "ListFabricBuilds"
      tags:
        - "fabric"
      parameters:
        - in: "path"
          name: "fabric_id"
          description: "A fabric identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "2oexcyrows1j0bo0itju"
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search query"
          x-example: "John Doe"
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "build_name"
            enum:
              - "build_name"
              - "build_public"
              - "pack_slug"
              - "pack_name"
          description: "Sorting column"
          x-example: "name"
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
            enum:
              - "asc"
              - "desc"
          description: "Sorting order"
          x-example: "desc"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 100
          description: "Paging limit"
          x-example: 100
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 0
          description: "Paging offset"
          x-example: 0
      responses:
        "200":
          description: "A collection of attached builds"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fabric_builds"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Fabric or build not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    post:
      summary: "Attach a build to a Fabric version"
      operationId: "AttachFabricToBuild"
      tags:
        - "fabric"
      parameters:
        - in: "path"
          name: "fabric_id"
          description: "A fabric identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "2oexcyrows1j0bo0itju"
      requestBody:
        description: "The build data to attach"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/fabric_build_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Fabric or build not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Build is already attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    delete:
      summary: "Unlink a build from a Fabric version"
      operationId: "DeleteFabricFromBuild"
      tags:
        - "fabric"
      parameters:
        - in: "path"
          name: "fabric_id"
          description: "A fabric identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "2oexcyrows1j0bo0itju"
      requestBody:
        description: "The build data to unlink"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/fabric_build_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Fabric or build not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Build is not attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /packs:
    get:
      summary: "Fetch all available packs"
      operationId: "ListPacks"
      tags:
        - "pack"
      parameters:
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search query"
          x-example: "John Doe"
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "name"
            enum:
              - "slug"
              - "name"
              - "public"
          description: "Sorting column"
          x-example: "name"
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
            enum:
              - "asc"
              - "desc"
          description: "Sorting order"
          x-example: "desc"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 100
          description: "Paging limit"
          x-example: 100
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 0
          description: "Paging offset"
          x-example: 0
      responses:
        "200":
          description: "A collection of packs"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/packs"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    post:
      summary: "Create a new pack"
      operationId: "CreatePack"
      tags:
        - "pack"
      requestBody:
        description: "The pack data to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/pack"
      responses:
        "200":
          description: "The created pack data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pack"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /packs/{pack_id}:
    get:
      summary: "Fetch a specific pack"
      operationId: "ShowPack"
      tags:
        - "pack"
      parameters:
        - in: "path"
          name: "pack_id"
          description: "A pack identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "edtmbzwztudkdhhfemhd"
      responses:
        "200":
          description: "The fetched pack details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pack"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Pack not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    put:
      summary: "Update a specific pack"
      operationId: "UpdatePack"
      tags:
        - "pack"
      parameters:
        - in: "path"
          name: "pack_id"
          description: "A pack identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "edtmbzwztudkdhhfemhd"
      requestBody:
        description: "The pack data to update"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/pack"
      responses:
        "200":
          description: "The updated pack details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pack"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Pack not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    delete:
      summary: "Delete a specific pack"
      operationId: "DeletePack"
      tags:
        - "pack"
      parameters:
        - in: "path"
          name: "pack_id"
          description: "A pack identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "edtmbzwztudkdhhfemhd"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Pack not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "400":
          description: "Failed to delete the pack"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /packs/{pack_id}/users:
    get:
      summary: "Fetch all users attached to pack"
      operationId: "ListPackUsers"
      tags:
        - "pack"
      parameters:
        - in: "path"
          name: "pack_id"
          description: "A pack identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "edtmbzwztudkdhhfemhd"
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search query"
          x-example: "John Doe"
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "username"
            enum:
              - "username"
              - "email"
              - "fullname"
              - "admin"
              - "active"
          description: "Sorting column"
          x-example: "name"
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
            enum:
              - "asc"
              - "desc"
          description: "Sorting order"
          x-example: "desc"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 100
          description: "Paging limit"
          x-example: 100
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 0
          description: "Paging offset"
          x-example: 0
      responses:
        "200":
          description: "A collection of pack users"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pack_users"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Pack not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    post:
      summary: "Attach a user to pack"
      operationId: "AttachPackToUser"
      tags:
        - "pack"
      parameters:
        - in: "path"
          name: "pack_id"
          description: "A pack identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "edtmbzwztudkdhhfemhd"
      requestBody:
        description: "The user data to attach"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/pack_user_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Pack or user not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "User is already attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    put:
      summary: "Update user perms for pack"
      operationId: "PermitPackUser"
      tags:
        - "pack"
      parameters:
        - in: "path"
          name: "pack_id"
          description: "A pack identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "edtmbzwztudkdhhfemhd"
      requestBody:
        description: "The user data to update"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/pack_user_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Pack or user not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "User is not attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    delete:
      summary: "Unlink a user from pack"
      operationId: "DeletePackFromUser"
      tags:
        - "pack"
      parameters:
        - in: "path"
          name: "pack_id"
          description: "A pack identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "edtmbzwztudkdhhfemhd"
      requestBody:
        description: "The pack user data to unlink"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/pack_user_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Pack or user not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "User is not attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /packs/{pack_id}/teams:
    get:
      summary: "Fetch all teams attached to pack"
      operationId: "ListPackTeams"
      tags:
        - "pack"
      parameters:
        - in: "path"
          name: "pack_id"
          description: "A pack identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "edtmbzwztudkdhhfemhd"
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search query"
          x-example: "John Doe"
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "name"
            enum:
              - "slug"
              - "name"
          description: "Sorting column"
          x-example: "name"
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
            enum:
              - "asc"
              - "desc"
          description: "Sorting order"
          x-example: "desc"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 100
          description: "Paging limit"
          x-example: 100
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 0
          description: "Paging offset"
          x-example: 0
      responses:
        "200":
          description: "A collection of pack teams"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pack_teams"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Pack not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    post:
      summary: "Attach a team to pack"
      operationId: "AttachPackToTeam"
      tags:
        - "pack"
      parameters:
        - in: "path"
          name: "pack_id"
          description: "A pack identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "edtmbzwztudkdhhfemhd"
      requestBody:
        description: "The team data to attach"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/pack_team_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Pack or team not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Team is already attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    put:
      summary: "Update team perms for pack"
      operationId: "PermitPackTeam"
      tags:
        - "pack"
      parameters:
        - in: "path"
          name: "pack_id"
          description: "A pack identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "edtmbzwztudkdhhfemhd"
      requestBody:
        description: "The team data to update"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/pack_team_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Pack or team not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Team is not attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    delete:
      summary: "Unlink a team from pack"
      operationId: "DeletePackFromTeam"
      tags:
        - "pack"
      parameters:
        - in: "path"
          name: "pack_id"
          description: "A pack identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "edtmbzwztudkdhhfemhd"
      requestBody:
        description: "The pack team data to unlink"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/pack_team_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Pack or team not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Team is not attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /packs/{pack_id}/builds:
    get:
      summary: "Fetch all available builds for a pack"
      operationId: "ListBuilds"
      tags:
        - "pack"
      parameters:
        - in: "path"
          name: "pack_id"
          description: "A pack identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "edtmbzwztudkdhhfemhd"
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search query"
          x-example: "John Doe"
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "name"
            enum:
              - "name"
              - "public"
          description: "Sorting column"
          x-example: "name"
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
            enum:
              - "asc"
              - "desc"
          description: "Sorting order"
          x-example: "desc"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
          description: "Paging limit"
          x-example: 100
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
          description: "Paging offset"
          x-example: 0
      responses:
        "200":
          description: "A collection of builds"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/builds"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Pack not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    post:
      summary: "Create a new build for a pack"
      operationId: "CreateBuild"
      tags:
        - "pack"
      parameters:
        - in: "path"
          name: "pack_id"
          description: "A pack identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "edtmbzwztudkdhhfemhd"
      requestBody:
        description: "The build data to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/build"
      responses:
        "200":
          description: "The created build build"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/build"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Pack not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /packs/{pack_id}/builds/{build_id}:
    get:
      summary: "Fetch a specific build for a pack"
      operationId: "ShowBuild"
      tags:
        - "pack"
      parameters:
        - in: "path"
          name: "pack_id"
          description: "A pack identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "edtmbzwztudkdhhfemhd"
        - in: "path"
          name: "build_id"
          description: "A build identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "n3eked21ybxvfw2zi25u"
      responses:
        "200":
          description: "The fetched build details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/build"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Build or pack not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    put:
      summary: "Update a specific build for a pack"
      operationId: "UpdateBuild"
      tags:
        - "pack"
      parameters:
        - in: "path"
          name: "pack_id"
          description: "A pack identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "edtmbzwztudkdhhfemhd"
        - in: "path"
          name: "build_id"
          description: "A build identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "n3eked21ybxvfw2zi25u"
      requestBody:
        description: "The build data to update"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/build"
      responses:
        "200":
          description: "The updated build details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/build"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Build or pack not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    delete:
      summary: "Delete a specific build for a pack"
      operationId: "DeleteBuild"
      tags:
        - "pack"
      parameters:
        - in: "path"
          name: "pack_id"
          description: "A pack identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "edtmbzwztudkdhhfemhd"
        - in: "path"
          name: "build_id"
          description: "A build identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "n3eked21ybxvfw2zi25u"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Build or pack not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "400":
          description: "Failed to delete the build"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /packs/{pack_id}/builds/{build_id}/versions:
    get:
      summary: "Fetch all versions attached to build"
      operationId: "ListBuildVersions"
      tags:
        - "pack"
      parameters:
        - in: "path"
          name: "pack_id"
          description: "A pack identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "edtmbzwztudkdhhfemhd"
        - in: "path"
          name: "build_id"
          description: "A build identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "n3eked21ybxvfw2zi25u"
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search query"
          x-example: "John Doe"
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "name"
            enum:
              - "name"
              - "public"
          description: "Sorting column"
          x-example: "name"
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
            enum:
              - "asc"
              - "desc"
          description: "Sorting order"
          x-example: "desc"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
          description: "Paging limit"
          x-example: 100
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
          description: "Paging offset"
          x-example: 0
      responses:
        "200":
          description: "A collection of build versions"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/build_versions"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Build or pack not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    post:
      summary: "Attach a version to a build"
      operationId: "AttachBuildToVersion"
      tags:
        - "pack"
      parameters:
        - in: "path"
          name: "pack_id"
          description: "A pack identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "edtmbzwztudkdhhfemhd"
        - in: "path"
          name: "build_id"
          description: "A build identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "n3eked21ybxvfw2zi25u"
      requestBody:
        description: "The build version data to attach"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/build_version_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Version, build or pack not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Version is already attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    delete:
      summary: "Unlink a version from a build"
      operationId: "DeleteBuildFromVersion"
      tags:
        - "pack"
      parameters:
        - in: "path"
          name: "pack_id"
          description: "A pack identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "edtmbzwztudkdhhfemhd"
        - in: "path"
          name: "build_id"
          description: "A build identifier or slug"
          schema:
            type: "string"
          required: true
          x-eample: "n3eked21ybxvfw2zi25u"
      requestBody:
        description: "The build version data to unlink"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/build_version_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Version, build or pack not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Version is not attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /mods:
    get:
      summary: "Fetch all available mods"
      operationId: "ListMods"
      tags:
        - "mod"
      parameters:
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search query"
          x-example: "John Doe"
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "name"
            enum:
              - "slug"
              - "name"
              - "public"
          description: "Sorting column"
          x-example: "name"
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
            enum:
              - "asc"
              - "desc"
          description: "Sorting order"
          x-example: "desc"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 100
          description: "Paging limit"
          x-example: 100
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 0
          description: "Paging offset"
          x-example: 0
      responses:
        "200":
          description: "A collection of mods"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/mods"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    post:
      summary: "Create a new mod"
      operationId: "CreateMod"
      tags:
        - "mod"
      requestBody:
        description: "The mod data to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/mod"
      responses:
        "200":
          description: "The created user data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/mod"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /mods/{mod_id}:
    get:
      summary: "Fetch a specific mod"
      operationId: "ShowMod"
      tags:
        - "mod"
      parameters:
        - in: "path"
          name: "mod_id"
          description: "A mod identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "9hkaizdrwypr4ewjp4tu"
      responses:
        "200":
          description: "The fetched mod details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/mod"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Mod not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    put:
      summary: "Update a specific mod"
      operationId: "UpdateMod"
      tags:
        - "mod"
      parameters:
        - in: "path"
          name: "mod_id"
          description: "A mod identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "9hkaizdrwypr4ewjp4tu"
      requestBody:
        description: "The mod data to update"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/mod"
      responses:
        "200":
          description: "The updated mod details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/mod"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Mod not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    delete:
      summary: "Delete a specific mod"
      operationId: "DeleteMod"
      tags:
        - "mod"
      parameters:
        - in: "path"
          name: "mod_id"
          description: "A mod identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "9hkaizdrwypr4ewjp4tu"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Mod not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "400":
          description: "Failed to delete the mod"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /mods/{mod_id}/users:
    get:
      summary: "Fetch all users attached to mod"
      operationId: "ListModUsers"
      tags:
        - "mod"
      parameters:
        - in: "path"
          name: "mod_id"
          description: "A mod identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "9hkaizdrwypr4ewjp4tu"
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search query"
          x-example: "John Doe"
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "username"
            enum:
              - "username"
              - "email"
              - "fullname"
              - "admin"
              - "active"
          description: "Sorting column"
          x-example: "name"
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
            enum:
              - "asc"
              - "desc"
          description: "Sorting order"
          x-example: "desc"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 100
          description: "Paging limit"
          x-example: 100
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 0
          description: "Paging offset"
          x-example: 0
      responses:
        "200":
          description: "A collection of mod users"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/mod_users"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Mod not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    post:
      summary: "Attach a user to mod"
      operationId: "AttachModToUser"
      tags:
        - "mod"
      parameters:
        - in: "path"
          name: "mod_id"
          description: "A mod identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "9hkaizdrwypr4ewjp4tu"
      requestBody:
        description: "The user data to attach"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/mod_user_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Mod or user not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "User is already attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    put:
      summary: "Update user perms for mod"
      operationId: "PermitModUser"
      tags:
        - "mod"
      parameters:
        - in: "path"
          name: "mod_id"
          description: "A mod identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "9hkaizdrwypr4ewjp4tu"
      requestBody:
        description: "The user data to update"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/mod_user_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Mod or user not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "User is not attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    delete:
      summary: "Unlink a user from mod"
      operationId: "DeleteModFromUser"
      tags:
        - "mod"
      parameters:
        - in: "path"
          name: "mod_id"
          description: "A mod identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "9hkaizdrwypr4ewjp4tu"
      requestBody:
        description: "The mod user data to unlink"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/mod_user_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Mod or user not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "User is not attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /mods/{mod_id}/teams:
    get:
      summary: "Fetch all teams attached to mod"
      operationId: "ListModTeams"
      tags:
        - "mod"
      parameters:
        - in: "path"
          name: "mod_id"
          description: "A mod identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "9hkaizdrwypr4ewjp4tu"
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search query"
          x-example: "John Doe"
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "name"
            enum:
              - "slug"
              - "name"
          description: "Sorting column"
          x-example: "name"
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
            enum:
              - "asc"
              - "desc"
          description: "Sorting order"
          x-example: "desc"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 100
          description: "Paging limit"
          x-example: 100
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 0
          description: "Paging offset"
          x-example: 0
      responses:
        "200":
          description: "A collection of mod teams"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/mod_teams"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Mod not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    post:
      summary: "Attach a team to mod"
      operationId: "AttachModToTeam"
      tags:
        - "mod"
      parameters:
        - in: "path"
          name: "mod_id"
          description: "A mod identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "9hkaizdrwypr4ewjp4tu"
      requestBody:
        description: "The team data to attach"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/mod_team_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Mod or team not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Team is already attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    put:
      summary: "Update team perms for mod"
      operationId: "PermitModTeam"
      tags:
        - "mod"
      parameters:
        - in: "path"
          name: "mod_id"
          description: "A mod identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "9hkaizdrwypr4ewjp4tu"
      requestBody:
        description: "The team data to update"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/mod_team_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Mod or team not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Team is not attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    delete:
      summary: "Unlink a team from mod"
      operationId: "DeleteModFromTeam"
      tags:
        - "mod"
      parameters:
        - in: "path"
          name: "mod_id"
          description: "A mod identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "9hkaizdrwypr4ewjp4tu"
      requestBody:
        description: "The mod team data to unlink"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/mod_team_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Mod or team not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Team is not attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /mods/{mod_id}/versions:
    get:
      summary: "Fetch all available versions for a mod"
      operationId: "ListVersions"
      tags:
        - "mod"
      parameters:
        - in: "path"
          name: "mod_id"
          description: "A mod identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "9hkaizdrwypr4ewjp4tu"
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search query"
          x-example: "John Doe"
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "name"
            enum:
              - "name"
              - "public"
          description: "Sorting column"
          x-example: "name"
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
            enum:
              - "asc"
              - "desc"
          description: "Sorting order"
          x-example: "desc"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 100
          description: "Paging limit"
          x-example: 100
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 0
          description: "Paging offset"
          x-example: 0
      responses:
        "200":
          description: "A collection of versions"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/versions"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Mod not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    post:
      summary: "Create a new version for a mod"
      operationId: "CreateVersion"
      tags:
        - "mod"
      parameters:
        - in: "path"
          name: "mod_id"
          description: "A mod identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "9hkaizdrwypr4ewjp4tu"
      requestBody:
        description: "The version data to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/version"
      responses:
        "200":
          description: "The created version data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/version"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Mod not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /mods/{mod_id}/versions/{version_id}:
    get:
      summary: "Fetch a specific version for a mod"
      operationId: "ShowVersion"
      tags:
        - "mod"
      parameters:
        - in: "path"
          name: "mod_id"
          description: "A mod identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "9hkaizdrwypr4ewjp4tu"
        - in: "path"
          name: "version_id"
          description: "A version identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "rh5bogtvofnmoxglyjrm"
      responses:
        "200":
          description: "The fetched version details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/version"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Version or mod not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    put:
      summary: "Update a specific version for a mod"
      operationId: "UpdateVersion"
      tags:
        - "mod"
      parameters:
        - in: "path"
          name: "mod_id"
          description: "A mod identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "9hkaizdrwypr4ewjp4tu"
        - in: "path"
          name: "version_id"
          description: "A version identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "rh5bogtvofnmoxglyjrm"
      requestBody:
        description: "The version data to update"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/version"
      responses:
        "200":
          description: "The updated version details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/version"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Version or mod not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    delete:
      summary: "Delete a specific version for a mod"
      operationId: "DeleteVersion"
      tags:
        - "mod"
      parameters:
        - in: "path"
          name: "mod_id"
          description: "A mod identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "9hkaizdrwypr4ewjp4tu"
        - in: "path"
          name: "version_id"
          description: "A version identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "rh5bogtvofnmoxglyjrm"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Version or mod not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "400":
          description: "Failed to delete the version"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /mods/{mod_id}/versions/{version_id}/builds:
    get:
      summary: "Fetch all builds attached to version"
      operationId: "ListVersionBuilds"
      tags:
        - "mod"
      parameters:
        - in: "path"
          name: "mod_id"
          description: "A mod identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "9hkaizdrwypr4ewjp4tu"
        - in: "path"
          name: "version_id"
          description: "A version identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "rh5bogtvofnmoxglyjrm"
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search query"
          x-example: "John Doe"
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "name"
            enum:
              - "name"
              - "public"
          description: "Sorting column"
          x-example: "name"
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
            enum:
              - "asc"
              - "desc"
          description: "Sorting order"
          x-example: "desc"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 100
          description: "Paging limit"
          x-example: 100
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 0
          description: "Paging offset"
          x-example: 0
      responses:
        "200":
          description: "A collection of version builds"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/version_builds"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Version or mod not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    post:
      summary: "Attach a build to a version"
      operationId: "AttachVersionToBuild"
      tags:
        - "mod"
      parameters:
        - in: "path"
          name: "mod_id"
          description: "A mod identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "9hkaizdrwypr4ewjp4tu"
        - in: "path"
          name: "version_id"
          description: "A version identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "rh5bogtvofnmoxglyjrm"
      requestBody:
        description: "The version build data to attach"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/version_build_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Build, version or mod not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Build is already attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    delete:
      summary: "Unlink a build from a version"
      operationId: "DeleteVersionFromBuild"
      tags:
        - "mod"
      parameters:
        - in: "path"
          name: "mod_id"
          description: "A mod identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "9hkaizdrwypr4ewjp4tu"
        - in: "path"
          name: "version_id"
          description: "A version identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "rh5bogtvofnmoxglyjrm"
      requestBody:
        description: "The version build data to unlink"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/version_build_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Build, version or mod not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Build is not attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /teams:
    get:
      summary: "Fetch all available teams"
      operationId: "ListTeams"
      tags:
        - "team"
      parameters:
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search query"
          x-example: "John Doe"
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "name"
            enum:
              - "slug"
              - "name"
          description: "Sorting column"
          x-example: "name"
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
            enum:
              - "asc"
              - "desc"
          description: "Sorting order"
          x-example: "desc"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 100
          description: "Paging limit"
          x-example: 100
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 0
          description: "Paging offset"
          x-example: 0
      responses:
        "200":
          description: "A collection of teams"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/teams"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    post:
      summary: "Create a new team"
      operationId: "CreateTeam"
      tags:
        - "team"
      requestBody:
        description: "The team data to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/team"
      responses:
        "200":
          description: "The created team data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/team"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /teams/{team_id}:
    get:
      summary: "Fetch a specific team"
      operationId: "ShowTeam"
      tags:
        - "team"
      parameters:
        - in: "path"
          name: "team_id"
          description: "A team identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "team-1"
      responses:
        "200":
          description: "The fetched team details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/team"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Team not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    put:
      summary: "Update a specific team"
      operationId: "UpdateTeam"
      tags:
        - "team"
      parameters:
        - in: "path"
          name: "team_id"
          description: "A team identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "team-1"
      requestBody:
        description: "The team data to update"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/team"
      responses:
        "200":
          description: "The updated team details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/team"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Team not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    delete:
      summary: "Delete a specific team"
      operationId: "DeleteTeam"
      tags:
        - "team"
      parameters:
        - in: "path"
          name: "team_id"
          description: "A team identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "team-1"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Team not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "400":
          description: "Failed to delete the team"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /teams/{team_id}/users:
    get:
      summary: "Fetch all users attached to team"
      operationId: "ListTeamUsers"
      tags:
        - "team"
      parameters:
        - in: "path"
          name: "team_id"
          description: "A team identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "team-1"
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search query"
          x-example: "John Doe"
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "username"
            enum:
              - "username"
              - "email"
              - "fullname"
              - "admin"
              - "active"
          description: "Sorting column"
          x-example: "name"
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
            enum:
              - "asc"
              - "desc"
          description: "Sorting order"
          x-example: "desc"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 100
          description: "Paging limit"
          x-example: 100
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 0
          description: "Paging offset"
          x-example: 0
      responses:
        "200":
          description: "A collection of team users"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/team_users"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Team not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    post:
      summary: "Attach a user to team"
      operationId: "AttachTeamToUser"
      tags:
        - "team"
      parameters:
        - in: "path"
          name: "team_id"
          description: "A team identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "team-1"
      requestBody:
        description: "The team user data to attach"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/team_user_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Team or user not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "User is already attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    put:
      summary: "Update user perms for team"
      operationId: "PermitTeamUser"
      tags:
        - "team"
      parameters:
        - in: "path"
          name: "team_id"
          description: "A team identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "team-1"
      requestBody:
        description: "The team user data to update"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/team_user_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Team or user not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "User is not attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    delete:
      summary: "Unlink a user from team"
      operationId: "DeleteTeamFromUser"
      tags:
        - "team"
      parameters:
        - in: "path"
          name: "team_id"
          description: "A team identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "team-1"
      requestBody:
        description: "The team user data to unlink"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/team_user_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Team or user not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "User is not attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /teams/{team_id}/mods:
    get:
      summary: "Fetch all mods attached to team"
      operationId: "ListTeamMods"
      tags:
        - "team"
      parameters:
        - in: "path"
          name: "team_id"
          description: "A team identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "team-1"
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search query"
          x-example: "John Doe"
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "name"
            enum:
              - "slug"
              - "name"
              - "public"
          description: "Sorting column"
          x-example: "name"
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
            enum:
              - "asc"
              - "desc"
          description: "Sorting order"
          x-example: "desc"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 100
          description: "Paging limit"
          x-example: 100
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 0
          description: "Paging offset"
          x-example: 0
      responses:
        "200":
          description: "A collection of team mods"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/team_mods"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Team not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    post:
      summary: "Attach a mod to team"
      operationId: "AttachTeamToMod"
      tags:
        - "team"
      parameters:
        - in: "path"
          name: "team_id"
          description: "A team identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "team-1"
      requestBody:
        description: "The team mod data to attach"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/team_mod_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Team or mod not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Mod is already attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    put:
      summary: "Update mod perms for team"
      operationId: "PermitTeamMod"
      tags:
        - "team"
      parameters:
        - in: "path"
          name: "team_id"
          description: "A team identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "team-1"
      requestBody:
        description: "The team mod data to update"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/team_mod_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Team or mod not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Mod is not attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    delete:
      summary: "Unlink a mod from team"
      operationId: "DeleteTeamFromMod"
      tags:
        - "team"
      parameters:
        - in: "path"
          name: "team_id"
          description: "A team identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "team-1"
      requestBody:
        description: "The team mod data to unlink"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/team_mod_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Team or mod not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Mod is not attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /teams/{team_id}/packs:
    get:
      summary: "Fetch all packs attached to team"
      operationId: "ListTeamPacks"
      tags:
        - "team"
      parameters:
        - in: "path"
          name: "team_id"
          description: "A team identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "team-1"
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search query"
          x-example: "John Doe"
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "name"
            enum:
              - "slug"
              - "name"
              - "public"
          description: "Sorting column"
          x-example: "name"
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
            enum:
              - "asc"
              - "desc"
          description: "Sorting order"
          x-example: "desc"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 100
          description: "Paging limit"
          x-example: 100
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 0
          description: "Paging offset"
          x-example: 0
      responses:
        "200":
          description: "A collection of team packs"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/team_packs"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Team not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    post:
      summary: "Attach a pack to team"
      operationId: "AttachTeamToPack"
      tags:
        - "team"
      parameters:
        - in: "path"
          name: "team_id"
          description: "A team identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "team-1"
      requestBody:
        description: "The team pack data to attach"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/team_pack_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Team or pack not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Pack is already attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    put:
      summary: "Update pack perms for team"
      operationId: "PermitTeamPack"
      tags:
        - "team"
      parameters:
        - in: "path"
          name: "team_id"
          description: "A team identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "team-1"
      requestBody:
        description: "The team pack data to update"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/team_pack_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Team or pack not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Pack is not attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    delete:
      summary: "Unlink a pack from team"
      operationId: "DeleteTeamFromPack"
      tags:
        - "team"
      parameters:
        - in: "path"
          name: "team_id"
          description: "A team identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "team-1"
      requestBody:
        description: "The team pack data to unlink"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/team_pack_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "Team or pack not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Pack is not attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /users:
    get:
      summary: "Fetch all available users"
      operationId: "ListUsers"
      tags:
        - "user"
      parameters:
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search query"
          x-example: "John Doe"
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "username"
            enum:
              - "username"
              - "email"
              - "fullname"
              - "admin"
              - "active"
          description: "Sorting column"
          x-example: "username"
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
            enum:
              - "asc"
              - "desc"
          description: "Sorting order"
          x-example: "desc"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 100
          description: "Paging limit"
          x-example: 100
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 0
          description: "Paging offset"
          x-example: 0
      responses:
        "200":
          description: "A collection of users"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/users"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    post:
      summary: "Create a new user"
      operationId: "CreateUser"
      tags:
        - "user"
      requestBody:
        description: "The user data to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
      responses:
        "200":
          description: "The created user data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /users/{user_id}:
    get:
      summary: "Fetch a specific user"
      operationId: "ShowUser"
      tags:
        - "user"
      parameters:
        - in: "path"
          name: "user_id"
          description: "A user identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "jdoe"
      responses:
        "200":
          description: "The fetched user details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    put:
      summary: "Update a specific user"
      operationId: "UpdateUser"
      tags:
        - "user"
      parameters:
        - in: "path"
          name: "user_id"
          description: "A user identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "jdoe"
      requestBody:
        description: "The user data to update"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
      responses:
        "200":
          description: "The updated user details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    delete:
      summary: "Delete a specific user"
      operationId: "DeleteUser"
      tags:
        - "user"
      parameters:
        - in: "path"
          name: "user_id"
          description: "A user identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "jdoe"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "400":
          description: "Failed to delete the user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /users/{user_id}/teams:
    get:
      summary: "Fetch all teams attached to user"
      operationId: "ListUserTeams"
      tags:
        - "user"
      parameters:
        - in: "path"
          name: "user_id"
          description: "A user identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "jdoe"
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search query"
          x-example: "John Doe"
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "name"
            enum:
              - "slug"
              - "name"
          description: "Sorting column"
          x-example: "name"
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
            enum:
              - "asc"
              - "desc"
          description: "Sorting order"
          x-example: "desc"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
          description: "Paging limit"
          x-example: 100
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
          description: "Paging offset"
          x-example: 0
      responses:
        "200":
          description: "A collection of user teams"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user_teams"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    post:
      summary: "Attach a team to user"
      operationId: "AttachUserToTeam"
      tags:
        - "user"
      parameters:
        - in: "path"
          name: "user_id"
          description: "A user identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "jdoe"
      requestBody:
        description: "The user team data to attach"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_team_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "User or team not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Team is already attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    put:
      summary: "Update team perms for user"
      operationId: "PermitUserTeam"
      tags:
        - "user"
      parameters:
        - in: "path"
          name: "user_id"
          description: "A user identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "jdoe"
      requestBody:
        description: "The user team data to update"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_team_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "User or team not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Team is not attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    delete:
      summary: "Unlink a team from user"
      operationId: "DeleteUserFromTeam"
      tags:
        - "user"
      parameters:
        - in: "path"
          name: "user_id"
          description: "A user identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "jdoe"
      requestBody:
        description: "The user team data to unlink"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_team_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "User or team not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Team is not attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /users/{user_id}/mods:
    get:
      summary: "Fetch all mods attached to user"
      operationId: "ListUserMods"
      tags:
        - "user"
      parameters:
        - in: "path"
          name: "user_id"
          description: "A user identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "jdoe"
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search query"
          x-example: "John Doe"
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "name"
            enum:
              - "slug"
              - "name"
              - "public"
          description: "Sorting column"
          x-example: "name"
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
            enum:
              - "asc"
              - "desc"
          description: "Sorting order"
          x-example: "desc"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
          description: "Paging limit"
          x-example: 100
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
          description: "Paging offset"
          x-example: 0
      responses:
        "200":
          description: "A collection of user mods"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user_mods"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    post:
      summary: "Attach a mod to user"
      operationId: "AttachUserToMod"
      tags:
        - "user"
      parameters:
        - in: "path"
          name: "user_id"
          description: "A user identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "jdoe"
      requestBody:
        description: "The user mod data to attach"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_mod_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "User or mod not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Mod is already attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    put:
      summary: "Update mod perms for user"
      operationId: "PermitUserMod"
      tags:
        - "user"
      parameters:
        - in: "path"
          name: "user_id"
          description: "A user identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "jdoe"
      requestBody:
        description: "The user mod data to update"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_mod_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "User or mod not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Mod is not attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    delete:
      summary: "Unlink a mod from user"
      operationId: "DeleteUserFromMod"
      tags:
        - "user"
      parameters:
        - in: "path"
          name: "user_id"
          description: "A user identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "jdoe"
      requestBody:
        description: "The user mod data to unlink"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_mod_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "User or mod not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Mod is not attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

  /users/{user_id}/packs:
    get:
      summary: "Fetch all packs attached to user"
      operationId: "ListUserPacks"
      tags:
        - "user"
      parameters:
        - in: "path"
          name: "user_id"
          description: "A user identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "jdoe"
        - name: "search"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search query"
          x-example: "John Doe"
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "name"
            enum:
              - "slug"
              - "name"
              - "public"
          description: "Sorting column"
          x-example: "name"
        - name: "order"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
            enum:
              - "asc"
              - "desc"
          description: "Sorting order"
          x-example: "desc"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
          description: "Paging limit"
          x-example: 100
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
          description: "Paging offset"
          x-example: 0
      responses:
        "200":
          description: "A collection of user packs"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user_packs"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    post:
      summary: "Attach a pack to user"
      operationId: "AttachUserToPack"
      tags:
        - "user"
      parameters:
        - in: "path"
          name: "user_id"
          description: "A user identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "jdoe"
      requestBody:
        description: "The user pack data to attach"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_pack_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "User or pack not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Pack is already attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    put:
      summary: "Update pack perms for user"
      operationId: "PermitUserPack"
      tags:
        - "user"
      parameters:
        - in: "path"
          name: "user_id"
          description: "A user identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "jdoe"
      requestBody:
        description: "The user pack data to update"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_pack_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "User or pack not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Pack is not attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "422":
          description: "Failed to validate request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

    delete:
      summary: "Unlink a pack from user"
      operationId: "DeleteUserFromPack"
      tags:
        - "user"
      parameters:
        - in: "path"
          name: "user_id"
          description: "A user identifier or slug"
          schema:
            type: "string"
          required: true
          x-example: "jdoe"
      requestBody:
        description: "The user pack data to unlink"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_pack_params"
      responses:
        "200":
          description: "Plain success message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "403":
          description: "User is not authorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "404":
          description: "User or pack not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "412":
          description: "Pack is not attached"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        "500":
          description: "Some internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"
        default:
          description: "Some error unrelated to the handler"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notification"

components:
  securitySchemes:
    Header:
      type: apiKey
      in: header
      name: X-API-Key
    Bearer:
      type: http
      scheme: bearer
    Basic:
      type: http
      scheme: basic
    Cookie:
      type: apiKey
      in: header
      name: Cookie

  schemas:
    auth_login:
      type: "object"
      required:
        - "username"
        - "password"
      properties:
        username:
          type: "string"
        password:
          type: "string"
          format: "password"

    auth_verify:
      type: "object"
      required:
        - "username"
      properties:
        username:
          type: "string"
          readOnly: true
        created_at:
          type: "string"
          format: "date-time"
          x-omitempty: true
          x-nullable: true
          readOnly: true

    auth_token:
      type: "object"
      required:
        - "token"
      properties:
        token:
          type: "string"
          readOnly: true
        expires_at:
          type: "string"
          format: "date-time"
          x-omitempty: true
          x-nullable: true
          readOnly: true

    profile:
      title: "Profile"
      description: "Model to represent profile"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
        username:
          type: "string"
          x-omitempty: true
          x-nullable: true
        password:
          type: "string"
          format: "password"
          x-omitempty: true
          x-nullable: true
        email:
          type: "string"
          x-omitempty: true
          x-nullable: true
        fullname:
          type: "string"
          x-omitempty: true
          x-nullable: true
        profile:
          type: "string"
          x-omitempty: true
          x-nullable: true
        admin:
          type: "boolean"
          readOnly: true
        active:
          type: "boolean"
          readOnly: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true
        auths:
          type: "array"
          x-omitempty: true
          x-nullable: true
          readOnly: true
          items:
            $ref: "#/components/schemas/user_auth"
        teams:
          type: "array"
          x-omitempty: true
          x-nullable: true
          readOnly: true
          items:
            $ref: "#/components/schemas/user_team"
        packs:
          type: "array"
          x-omitempty: true
          x-nullable: true
          readOnly: true
          items:
            $ref: "#/components/schemas/user_pack"
        mods:
          type: "array"
          x-omitempty: true
          x-nullable: true
          readOnly: true
          items:
            $ref: "#/components/schemas/user_mod"

    minecrafts:
      title: "Minecrafts"
      description: "Model to represent list of minecrafts"
      type: "object"
      properties:
        total:
          type: integer
          format: int64
        versions:
          type: "array"
          items:
            $ref: "#/components/schemas/minecraft"

    minecraft:
      title: "Minecraft"
      description: "Model to represent minecraft"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
        name:
          type: "string"
          x-omitempty: true
          x-nullable: true
        type:
          type: "string"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    minecraft_builds:
      title: "Minecraft Builds"
      description: "Model to represent minecraft builds"
      type: "object"
      properties:
        minecraft:
          $ref: "#/components/schemas/minecraft"
          readOnly: true
        total:
          type: integer
          format: int64
        builds:
          type: "array"
          items:
            $ref: "#/components/schemas/build"

    minecraft_build_params:
      title: "Minecraft Build Params"
      description: "Model to represent params for minecraft builds"
      type: "object"
      required:
        - "pack"
        - "build"
      properties:
        pack:
          type: "string"
        build:
          type: "string"

    forges:
      title: "Forges"
      description: "Model to represent list of forges"
      type: "object"
      properties:
        total:
          type: integer
          format: int64
        versions:
          type: "array"
          items:
            $ref: "#/components/schemas/forge"

    forge:
      title: "Forge"
      description: "Model to represent forge"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
        name:
          type: "string"
          x-omitempty: true
          x-nullable: true
        minecraft:
          type: "string"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    forge_builds:
      title: "Forge Builds"
      description: "Model to represent forge builds"
      type: "object"
      properties:
        forge:
          $ref: "#/components/schemas/forge"
          readOnly: true
        total:
          type: integer
          format: int64
        builds:
          type: "array"
          items:
            $ref: "#/components/schemas/build"

    forge_build_params:
      title: "Forge Build Params"
      description: "Model to represent params for forge builds"
      type: "object"
      required:
        - "pack"
        - "build"
      properties:
        pack:
          type: "string"
        build:
          type: "string"

    neoforges:
      title: "Neoforges"
      description: "Model to represent list of neoforges"
      type: "object"
      properties:
        total:
          type: integer
          format: int64
        versions:
          type: "array"
          items:
            $ref: "#/components/schemas/neoforge"

    neoforge:
      title: "Neoforge"
      description: "Model to represent neoforge"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
        name:
          type: "string"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    neoforge_builds:
      title: "Neoforge Builds"
      description: "Model to represent neoforge builds"
      type: "object"
      properties:
        neoforge:
          $ref: "#/components/schemas/neoforge"
          readOnly: true
        total:
          type: integer
          format: int64
        builds:
          type: "array"
          items:
            $ref: "#/components/schemas/build"

    neoforge_build_params:
      title: "Neoforge Build Params"
      description: "Model to represent params for neoforge builds"
      type: "object"
      required:
        - "pack"
        - "build"
      properties:
        pack:
          type: "string"
        build:
          type: "string"

    quilts:
      title: "Quilts"
      description: "Model to represent list of quilts"
      type: "object"
      properties:
        total:
          type: integer
          format: int64
        versions:
          type: "array"
          items:
            $ref: "#/components/schemas/quilt"

    quilt:
      title: "Quilt"
      description: "Model to represent quilt"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
        name:
          type: "string"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    quilt_builds:
      title: "Quilt Builds"
      description: "Model to represent quilt builds"
      type: "object"
      properties:
        quilt:
          $ref: "#/components/schemas/quilt"
          readOnly: true
        total:
          type: integer
          format: int64
        builds:
          type: "array"
          items:
            $ref: "#/components/schemas/build"

    quilt_build_params:
      title: "Quilt Build Params"
      description: "Model to represent params for quilt builds"
      type: "object"
      required:
        - "pack"
        - "build"
      properties:
        pack:
          type: "string"
        build:
          type: "string"

    fabrics:
      title: "Fabrics"
      description: "Model to represent list of fabrics"
      type: "object"
      properties:
        total:
          type: integer
          format: int64
        versions:
          type: "array"
          items:
            $ref: "#/components/schemas/fabric"

    fabric:
      title: "Fabric"
      description: "Model to represent fabric"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
        name:
          type: "string"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    fabric_builds:
      title: "Fabric Builds"
      description: "Model to represent fabric builds"
      type: "object"
      properties:
        fabric:
          $ref: "#/components/schemas/fabric"
          readOnly: true
        total:
          type: integer
          format: int64
        builds:
          type: "array"
          items:
            $ref: "#/components/schemas/build"

    fabric_build_params:
      title: "Fabric Build Params"
      description: "Model to represent params for fabric builds"
      type: "object"
      required:
        - "pack"
        - "build"
      properties:
        pack:
          type: "string"
        build:
          type: "string"

    mods:
      title: "Mods"
      description: "Model to represent list of mods"
      type: "object"
      properties:
        total:
          type: integer
          format: int64
        mods:
          type: "array"
          items:
            $ref: "#/components/schemas/mod"

    mod:
      title: "Mod"
      description: "Model to represent mod"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
        slug:
          type: "string"
          x-omitempty: true
          x-nullable: true
        name:
          type: "string"
          x-omitempty: true
          x-nullable: true
        side:
          type: "string"
          x-omitempty: true
          x-nullable: true
        description:
          type: "string"
          x-omitempty: true
          x-nullable: true
        author:
          type: "string"
          x-omitempty: true
          x-nullable: true
        website:
          type: "string"
          x-omitempty: true
          x-nullable: true
        donate:
          type: "string"
          x-omitempty: true
          x-nullable: true
        public:
          type: "boolean"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    versions:
      title: "Versions"
      description: "Model to represent list of versions"
      type: "object"
      properties:
        total:
          type: integer
          format: int64
        mod:
          readOnly: true
          $ref: "#/components/schemas/mod"
        versions:
          type: "array"
          items:
            $ref: "#/components/schemas/version"

    version:
      title: "Version"
      description: "Model to represent version"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
        file:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/version_file"
        mod:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/mod"
        slug:
          type: "string"
          x-omitempty: true
          x-nullable: true
        name:
          type: "string"
          x-omitempty: true
          x-nullable: true
        public:
          type: "boolean"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    version_file:
      title: "Version File"
      description: "Model to represent version file"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
        slug:
          type: "string"
          x-omitempty: true
          x-nullable: true
        content_type:
          type: "string"
          x-omitempty: true
          x-nullable: true
        md5:
          type: "string"
          x-omitempty: true
          x-nullable: true
        path:
          type: "string"
          x-omitempty: true
          x-nullable: true
        url:
          type: "string"
          x-omitempty: true
          x-nullable: true
        upload:
          type: "string"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    packs:
      title: "Packs"
      description: "Model to represent list of packs"
      type: "object"
      properties:
        total:
          type: integer
          format: int64
        packs:
          type: "array"
          items:
            $ref: "#/components/schemas/pack"

    pack:
      title: "Pack"
      description: "Model to represent pack"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
        icon:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/pack_icon"
        logo:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/pack_logo"
        back:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/pack_back"
        slug:
          type: "string"
          x-omitempty: true
          x-nullable: true
        name:
          type: "string"
          x-omitempty: true
          x-nullable: true
        website:
          type: "string"
          x-omitempty: true
          x-nullable: true
        public:
          type: "boolean"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    pack_icon:
      title: "Pack Icon"
      description: "Model to represent pack icon"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
        slug:
          type: "string"
          x-omitempty: true
          x-nullable: true
        content_type:
          type: "string"
          x-omitempty: true
          x-nullable: true
        md5:
          type: "string"
          x-omitempty: true
          x-nullable: true
        path:
          type: "string"
          x-omitempty: true
          x-nullable: true
        url:
          type: "string"
          x-omitempty: true
          x-nullable: true
        upload:
          type: "string"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    pack_logo:
      title: "Pack Logo"
      description: "Model to represent pack logo"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
        slug:
          type: "string"
          x-omitempty: true
          x-nullable: true
        content_type:
          type: "string"
          x-omitempty: true
          x-nullable: true
        md5:
          type: "string"
          x-omitempty: true
          x-nullable: true
        path:
          type: "string"
          x-omitempty: true
          x-nullable: true
        url:
          type: "string"
          x-omitempty: true
          x-nullable: true
        upload:
          type: "string"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    pack_back:
      title: "Pack Background"
      description: "Model to represent pack background"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
        slug:
          type: "string"
          x-omitempty: true
          x-nullable: true
        content_type:
          type: "string"
          x-omitempty: true
          x-nullable: true
        md5:
          type: "string"
          x-omitempty: true
          x-nullable: true
        path:
          type: "string"
          x-omitempty: true
          x-nullable: true
        url:
          type: "string"
          x-omitempty: true
          x-nullable: true
        upload:
          type: "string"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    builds:
      title: "Builds"
      description: "Model to represent list of builds"
      type: "object"
      properties:
        total:
          type: integer
          format: int64
        pack:
          readOnly: true
          $ref: "#/components/schemas/pack"
        builds:
          type: "array"
          items:
            $ref: "#/components/schemas/build"

    build:
      title: "Build"
      description: "Model to represent build"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
        pack:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/pack"
        minecraft_id:
          type: "string"
          x-omitempty: true
          x-nullable: true
        minecraft:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/minecraft"
        forge_id:
          type: "string"
          x-omitempty: true
          x-nullable: true
        forge:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/forge"
        neoforge_id:
          type: "string"
          x-omitempty: true
          x-nullable: true
        neoforge:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/neoforge"
        quilt_id:
          type: "string"
          x-omitempty: true
          x-nullable: true
        quilt:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/quilt"
        fabric_id:
          type: "string"
          x-omitempty: true
          x-nullable: true
        fabric:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/fabric"
        slug:
          type: "string"
          x-omitempty: true
          x-nullable: true
        name:
          type: "string"
          x-omitempty: true
          x-nullable: true
        java:
          type: "string"
          x-omitempty: true
          x-nullable: true
        memory:
          type: "string"
          x-omitempty: true
          x-nullable: true
        latest:
          type: "boolean"
          x-omitempty: true
          x-nullable: true
        recommended:
          type: "boolean"
          x-omitempty: true
          x-nullable: true
        public:
          type: "boolean"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    teams:
      title: "Teams"
      description: "Model to represent list of teams"
      type: "object"
      properties:
        total:
          type: integer
          format: int64
        teams:
          type: "array"
          items:
            $ref: "#/components/schemas/team"

    team:
      title: "Team"
      description: "Model to represent team"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
        slug:
          type: "string"
          x-omitempty: true
          x-nullable: true
        name:
          type: "string"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    team_packs:
      title: "Team Packs"
      description: "Model to represent team packs"
      type: "object"
      properties:
        team:
          $ref: "#/components/schemas/team"
          readOnly: true
        total:
          type: integer
          format: int64
        packs:
          type: "array"
          items:
            $ref: "#/components/schemas/team_pack"

    team_pack_params:
      title: "Team Pack Params"
      description: "Parameters to attach or unlink team pack"
      type: "object"
      required:
        - "pack"
      properties:
        pack:
          type: "string"
        perm:
          type: "string"
          default: "user"
          enum:
            - "user"
            - "admin"
            - "owner"

    pack_teams:
      title: "Pack Teams"
      description: "Model to represent pack teams"
      type: "object"
      properties:
        pack:
          $ref: "#/components/schemas/pack"
          readOnly: true
        total:
          type: integer
          format: int64
        teams:
          type: "array"
          items:
            $ref: "#/components/schemas/team_pack"

    pack_team_params:
      title: "Pack Team Params"
      description: "Parameters to attach or unlink pack team"
      type: "object"
      required:
        - "team"
      properties:
        team:
          type: "string"
        perm:
          type: "string"
          default: "user"
          enum:
            - "user"
            - "admin"
            - "owner"

    team_pack:
      title: "Team Pack"
      description: "Model to represent team pack"
      type: "object"
      required:
        - "team_id"
        - "pack_id"
      properties:
        team_id:
          type: "string"
        team:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/team"
        pack_id:
          type: "string"
        pack:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/pack"
        perm:
          type: "string"
          default: "user"
          enum:
            - "user"
            - "admin"
            - "owner"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    team_mods:
      title: "Team Mods"
      description: "Model to represent team mods"
      type: "object"
      properties:
        team:
          $ref: "#/components/schemas/team"
          readOnly: true
        total:
          type: integer
          format: int64
        mods:
          type: "array"
          items:
            $ref: "#/components/schemas/team_mod"

    team_mod_params:
      title: "Team Mod Params"
      description: "Parameters to attach or unlink team mod"
      type: "object"
      required:
        - "mod"
      properties:
        mod:
          type: "string"
        perm:
          type: "string"
          default: "user"
          enum:
            - "user"
            - "admin"
            - "owner"

    mod_teams:
      title: "Mod Teams"
      description: "Model to represent mod teams"
      type: "object"
      properties:
        mod:
          $ref: "#/components/schemas/mod"
          readOnly: true
        total:
          type: integer
          format: int64
        teams:
          type: "array"
          items:
            $ref: "#/components/schemas/team_mod"

    mod_team_params:
      title: "Mod Team Params"
      description: "Parameters to attach or unlink mod team"
      type: "object"
      required:
        - "team"
      properties:
        team:
          type: "string"
        perm:
          type: "string"
          default: "user"
          enum:
            - "user"
            - "admin"
            - "owner"

    team_mod:
      title: "Team Mod"
      description: "Model to represent team mod"
      type: "object"
      required:
        - "team_id"
        - "mod_id"
      properties:
        team_id:
          type: "string"
        team:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/team"
        mod_id:
          type: "string"
        mod:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/mod"
        perm:
          type: "string"
          default: "user"
          enum:
            - "user"
            - "admin"
            - "owner"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    users:
      title: "Users"
      description: "Model to represent list of users"
      type: "object"
      properties:
        total:
          type: integer
          format: int64
        users:
          type: "array"
          items:
            $ref: "#/components/schemas/user"

    user:
      title: "User"
      description: "Model to represent user"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
        username:
          type: "string"
          x-omitempty: true
          x-nullable: true
        password:
          type: "string"
          format: "password"
          x-omitempty: true
          x-nullable: true
        email:
          type: "string"
          x-omitempty: true
          x-nullable: true
        fullname:
          type: "string"
          x-omitempty: true
          x-nullable: true
        profile:
          type: "string"
          x-omitempty: true
          x-nullable: true
        admin:
          type: "boolean"
          x-omitempty: true
          x-nullable: true
        active:
          type: "boolean"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true
        auths:
          type: "array"
          x-omitempty: true
          x-nullable: true
          readOnly: true
          items:
            $ref: "#/components/schemas/user_auth"

    user_auth:
      title: "User Auth"
      description: "Model to represent user auth"
      type: "object"
      properties:
        provider:
          type: "string"
        ref:
          type: "string"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    user_teams:
      title: "User Teams"
      description: "Model to represent user teams"
      type: "object"
      properties:
        user:
          $ref: "#/components/schemas/user"
          readOnly: true
        total:
          type: integer
          format: int64
        teams:
          type: "array"
          items:
            $ref: "#/components/schemas/user_team"

    user_team_params:
      title: "User Team Params"
      description: "Parameters to attach or unlink user team"
      type: "object"
      required:
        - "team"
      properties:
        team:
          type: "string"
        perm:
          type: "string"
          default: "user"
          enum:
            - "user"
            - "admin"
            - "owner"

    team_users:
      title: "Team Users"
      description: "Model to represent team users"
      type: "object"
      properties:
        team:
          $ref: "#/components/schemas/team"
          readOnly: true
        total:
          type: integer
          format: int64
        users:
          type: "array"
          items:
            $ref: "#/components/schemas/user_team"

    team_user_params:
      title: "Team User Params"
      description: "Parameters to attach or unlink team user"
      type: "object"
      required:
        - "user"
      properties:
        user:
          type: "string"
        perm:
          type: "string"
          default: "user"
          enum:
            - "user"
            - "admin"
            - "owner"

    user_team:
      title: "User Team"
      description: "Model to represent user team"
      type: "object"
      required:
        - "user_id"
        - "team_id"
      properties:
        user_id:
          type: "string"
        user:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/user"
        team_id:
          type: "string"
        team:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/team"
        perm:
          type: "string"
          default: "user"
          enum:
            - "user"
            - "admin"
            - "owner"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    user_packs:
      title: "User Packs"
      description: "Model to represent user packs"
      type: "object"
      properties:
        user:
          $ref: "#/components/schemas/user"
          readOnly: true
        total:
          type: integer
          format: int64
        packs:
          type: "array"
          items:
            $ref: "#/components/schemas/user_pack"

    user_pack_params:
      title: "User Pack Params"
      description: "Parameters to attach or unlink user pack"
      type: "object"
      required:
        - "pack"
      properties:
        pack:
          type: "string"
        perm:
          type: "string"
          default: "user"
          enum:
            - "user"
            - "admin"
            - "owner"

    pack_users:
      title: "Pack Users"
      description: "Model to represent pack users"
      type: "object"
      properties:
        pack:
          $ref: "#/components/schemas/pack"
          readOnly: true
        total:
          type: integer
          format: int64
        users:
          type: "array"
          items:
            $ref: "#/components/schemas/user_pack"

    pack_user_params:
      title: "Pack User Params"
      description: "Parameters to attach or unlink pack user"
      type: "object"
      required:
        - "user"
      properties:
        user:
          type: "string"
        perm:
          type: "string"
          default: "user"
          enum:
            - "user"
            - "admin"
            - "owner"

    user_pack:
      title: "User Pack"
      description: "Model to represent user pack"
      type: "object"
      required:
        - "user_id"
        - "pack_id"
      properties:
        user_id:
          type: "string"
        user:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/user"
        pack_id:
          type: "string"
        pack:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/pack"
        perm:
          type: "string"
          default: "user"
          enum:
            - "user"
            - "admin"
            - "owner"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    user_mods:
      title: "User Mods"
      description: "Model to represent user mods"
      type: "object"
      properties:
        user:
          $ref: "#/components/schemas/user"
          readOnly: true
        total:
          type: integer
          format: int64
        mods:
          type: "array"
          items:
            $ref: "#/components/schemas/user_mod"

    user_mod_params:
      title: "User Mod Params"
      description: "Parameters to attach or unlink user mod"
      type: "object"
      required:
        - "mod"
      properties:
        mod:
          type: "string"
        perm:
          type: "string"
          default: "user"
          enum:
            - "user"
            - "admin"
            - "owner"

    mod_users:
      title: "Mod Users"
      description: "Model to represent mod users"
      type: "object"
      properties:
        mod:
          $ref: "#/components/schemas/mod"
          readOnly: true
        total:
          type: integer
          format: int64
        users:
          type: "array"
          items:
            $ref: "#/components/schemas/user_mod"

    mod_user_params:
      title: "Mod User Params"
      description: "Parameters to attach or unlink mod user"
      type: "object"
      required:
        - "user"
      properties:
        user:
          type: "string"
        perm:
          type: "string"
          default: "user"
          enum:
            - "user"
            - "admin"
            - "owner"

    user_mod:
      title: "User Mod"
      description: "Model to represent user mod"
      type: "object"
      required:
        - "user_id"
        - "mod_id"
      properties:
        user_id:
          type: "string"
        user:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/user"
        mod_id:
          type: "string"
        mod:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/mod"
        perm:
          type: "string"
          default: "user"
          enum:
            - "user"
            - "admin"
            - "owner"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    build_versions:
      title: "Build Versions"
      description: "Model to represent build versions"
      type: "object"
      properties:
        pack:
          readOnly: true
          $ref: "#/components/schemas/pack"
        build:
          readOnly: true
          $ref: "#/components/schemas/build"
        total:
          type: integer
          format: int64
        versions:
          type: "array"
          items:
            $ref: "#/components/schemas/build_version"

    build_version_params:
      title: "Build Version Params"
      description: "Parameters to attach or unlink build version"
      type: "object"
      required:
        - "mod"
        - "version"
      properties:
        mod:
          type: "string"
        version:
          type: "string"

    version_builds:
      title: "Version Builds"
      description: "Model to represent version builds"
      type: "object"
      properties:
        mod:
          readOnly: true
          $ref: "#/components/schemas/mod"
        version:
          readOnly: true
          $ref: "#/components/schemas/version"
        total:
          type: integer
          format: int64
        builds:
          type: "array"
          items:
            $ref: "#/components/schemas/build_version"

    version_build_params:
      title: "Version Build Params"
      description: "Parameters to attach or unlink version build"
      type: "object"
      required:
        - "pack"
        - "build"
      properties:
        pack:
          type: "string"
        build:
          type: "string"

    build_version:
      title: "Build Version"
      description: "Model to represent build version"
      type: "object"
      required:
        - "build_id"
        - "version_id"
      properties:
        build_id:
          type: "string"
        build:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/build"
        version_id:
          type: "string"
        version:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/version"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    providers:
      title: "Providers"
      description: "Model to represent list of auth providers"
      type: "object"
      properties:
        total:
          type: integer
          format: int64
        versions:
          type: "array"
          items:
            $ref: "#/components/schemas/provider"

    provider:
      title: "Provider"
      description: "Model to represent auth provider"
      type: "object"
      properties:
        name:
          type: "string"
          readOnly: true
        driver:
          type: "string"
          readOnly: true
        display:
          type: "string"
          readOnly: true
        icon:
          type: "string"
          readOnly: true

    notification:
      title: "Notification"
      description: "Generic response for errors and validations"
      type: "object"
      properties:
        status:
          type: "integer"
          x-omitempty: true
        message:
          type: "string"
          x-omitempty: true
        errors:
          type: "array"
          items:
            $ref: "#/components/schemas/validation"

    validation:
      title: "Validation"
      description: "General structure to show validation errors"
      type: "object"
      properties:
        field:
          type: "string"
        message:
          type: "string"

...

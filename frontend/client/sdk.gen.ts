// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { RequestProviderData, RequestProviderErrors, CallbackProviderData, CallbackProviderErrors, ListProvidersData, ListProvidersResponses, RedirectAuthData, RedirectAuthResponses, RedirectAuthErrors, LoginAuthData, LoginAuthResponses, LoginAuthErrors, RefreshAuthData, RefreshAuthResponses, RefreshAuthErrors, VerifyAuthData, VerifyAuthResponses, VerifyAuthErrors, TokenProfileData, TokenProfileResponses, TokenProfileErrors, ShowProfileData, ShowProfileResponses, ShowProfileErrors, UpdateProfileData, UpdateProfileResponses, UpdateProfileErrors, ListMinecraftsData, ListMinecraftsResponses, ListMinecraftsErrors, UpdateMinecraftData, UpdateMinecraftResponses, UpdateMinecraftErrors, DeleteMinecraftFromBuildData, DeleteMinecraftFromBuildResponses, DeleteMinecraftFromBuildErrors, ListMinecraftBuildsData, ListMinecraftBuildsResponses, ListMinecraftBuildsErrors, AttachMinecraftToBuildData, AttachMinecraftToBuildResponses, AttachMinecraftToBuildErrors, ListForgesData, ListForgesResponses, ListForgesErrors, UpdateForgeData, UpdateForgeResponses, UpdateForgeErrors, DeleteForgeFromBuildData, DeleteForgeFromBuildResponses, DeleteForgeFromBuildErrors, ListForgeBuildsData, ListForgeBuildsResponses, ListForgeBuildsErrors, AttachForgeToBuildData, AttachForgeToBuildResponses, AttachForgeToBuildErrors, ListNeoforgesData, ListNeoforgesResponses, ListNeoforgesErrors, UpdateNeoforgeData, UpdateNeoforgeResponses, UpdateNeoforgeErrors, DeleteNeoforgeFromBuildData, DeleteNeoforgeFromBuildResponses, DeleteNeoforgeFromBuildErrors, ListNeoforgeBuildsData, ListNeoforgeBuildsResponses, ListNeoforgeBuildsErrors, AttachNeoforgeToBuildData, AttachNeoforgeToBuildResponses, AttachNeoforgeToBuildErrors, ListQuiltsData, ListQuiltsResponses, ListQuiltsErrors, UpdateQuiltData, UpdateQuiltResponses, UpdateQuiltErrors, DeleteQuiltFromBuildData, DeleteQuiltFromBuildResponses, DeleteQuiltFromBuildErrors, ListQuiltBuildsData, ListQuiltBuildsResponses, ListQuiltBuildsErrors, AttachQuiltToBuildData, AttachQuiltToBuildResponses, AttachQuiltToBuildErrors, ListFabricsData, ListFabricsResponses, ListFabricsErrors, UpdateFabricData, UpdateFabricResponses, UpdateFabricErrors, DeleteFabricFromBuildData, DeleteFabricFromBuildResponses, DeleteFabricFromBuildErrors, ListFabricBuildsData, ListFabricBuildsResponses, ListFabricBuildsErrors, AttachFabricToBuildData, AttachFabricToBuildResponses, AttachFabricToBuildErrors, ListPacksData, ListPacksResponses, ListPacksErrors, CreatePackData, CreatePackResponses, CreatePackErrors, DeletePackData, DeletePackResponses, DeletePackErrors, ShowPackData, ShowPackResponses, ShowPackErrors, UpdatePackData, UpdatePackResponses, UpdatePackErrors, DeletePackAvatarData, DeletePackAvatarResponses, DeletePackAvatarErrors, CreatePackAvatarData, CreatePackAvatarResponses, CreatePackAvatarErrors, DeletePackFromUserData, DeletePackFromUserResponses, DeletePackFromUserErrors, ListPackUsersData, ListPackUsersResponses, ListPackUsersErrors, AttachPackToUserData, AttachPackToUserResponses, AttachPackToUserErrors, PermitPackUserData, PermitPackUserResponses, PermitPackUserErrors, DeletePackFromGroupData, DeletePackFromGroupResponses, DeletePackFromGroupErrors, ListPackGroupsData, ListPackGroupsResponses, ListPackGroupsErrors, AttachPackToGroupData, AttachPackToGroupResponses, AttachPackToGroupErrors, PermitPackGroupData, PermitPackGroupResponses, PermitPackGroupErrors, ListBuildsData, ListBuildsResponses, ListBuildsErrors, CreateBuildData, CreateBuildResponses, CreateBuildErrors, DeleteBuildData, DeleteBuildResponses, DeleteBuildErrors, ShowBuildData, ShowBuildResponses, ShowBuildErrors, UpdateBuildData, UpdateBuildResponses, UpdateBuildErrors, DeleteBuildFromVersionData, DeleteBuildFromVersionResponses, DeleteBuildFromVersionErrors, ListBuildVersionsData, ListBuildVersionsResponses, ListBuildVersionsErrors, AttachBuildToVersionData, AttachBuildToVersionResponses, AttachBuildToVersionErrors, ListModsData, ListModsResponses, ListModsErrors, CreateModData, CreateModResponses, CreateModErrors, DeleteModData, DeleteModResponses, DeleteModErrors, ShowModData, ShowModResponses, ShowModErrors, UpdateModData, UpdateModResponses, UpdateModErrors, DeleteModAvatarData, DeleteModAvatarResponses, DeleteModAvatarErrors, CreateModAvatarData, CreateModAvatarResponses, CreateModAvatarErrors, DeleteModFromUserData, DeleteModFromUserResponses, DeleteModFromUserErrors, ListModUsersData, ListModUsersResponses, ListModUsersErrors, AttachModToUserData, AttachModToUserResponses, AttachModToUserErrors, PermitModUserData, PermitModUserResponses, PermitModUserErrors, DeleteModFromGroupData, DeleteModFromGroupResponses, DeleteModFromGroupErrors, ListModGroupsData, ListModGroupsResponses, ListModGroupsErrors, AttachModToGroupData, AttachModToGroupResponses, AttachModToGroupErrors, PermitModGroupData, PermitModGroupResponses, PermitModGroupErrors, ListVersionsData, ListVersionsResponses, ListVersionsErrors, CreateVersionData, CreateVersionResponses, CreateVersionErrors, DeleteVersionData, DeleteVersionResponses, DeleteVersionErrors, ShowVersionData, ShowVersionResponses, ShowVersionErrors, UpdateVersionData, UpdateVersionResponses, UpdateVersionErrors, DeleteVersionFromBuildData, DeleteVersionFromBuildResponses, DeleteVersionFromBuildErrors, ListVersionBuildsData, ListVersionBuildsResponses, ListVersionBuildsErrors, AttachVersionToBuildData, AttachVersionToBuildResponses, AttachVersionToBuildErrors, ListGroupsData, ListGroupsResponses, ListGroupsErrors, CreateGroupData, CreateGroupResponses, CreateGroupErrors, DeleteGroupData, DeleteGroupResponses, DeleteGroupErrors, ShowGroupData, ShowGroupResponses, ShowGroupErrors, UpdateGroupData, UpdateGroupResponses, UpdateGroupErrors, DeleteGroupFromUserData, DeleteGroupFromUserResponses, DeleteGroupFromUserErrors, ListGroupUsersData, ListGroupUsersResponses, ListGroupUsersErrors, AttachGroupToUserData, AttachGroupToUserResponses, AttachGroupToUserErrors, PermitGroupUserData, PermitGroupUserResponses, PermitGroupUserErrors, DeleteGroupFromModData, DeleteGroupFromModResponses, DeleteGroupFromModErrors, ListGroupModsData, ListGroupModsResponses, ListGroupModsErrors, AttachGroupToModData, AttachGroupToModResponses, AttachGroupToModErrors, PermitGroupModData, PermitGroupModResponses, PermitGroupModErrors, DeleteGroupFromPackData, DeleteGroupFromPackResponses, DeleteGroupFromPackErrors, ListGroupPacksData, ListGroupPacksResponses, ListGroupPacksErrors, AttachGroupToPackData, AttachGroupToPackResponses, AttachGroupToPackErrors, PermitGroupPackData, PermitGroupPackResponses, PermitGroupPackErrors, ListUsersData, ListUsersResponses, ListUsersErrors, CreateUserData, CreateUserResponses, CreateUserErrors, DeleteUserData, DeleteUserResponses, DeleteUserErrors, ShowUserData, ShowUserResponses, ShowUserErrors, UpdateUserData, UpdateUserResponses, UpdateUserErrors, DeleteUserFromGroupData, DeleteUserFromGroupResponses, DeleteUserFromGroupErrors, ListUserGroupsData, ListUserGroupsResponses, ListUserGroupsErrors, AttachUserToGroupData, AttachUserToGroupResponses, AttachUserToGroupErrors, PermitUserGroupData, PermitUserGroupResponses, PermitUserGroupErrors, DeleteUserFromModData, DeleteUserFromModResponses, DeleteUserFromModErrors, ListUserModsData, ListUserModsResponses, ListUserModsErrors, AttachUserToModData, AttachUserToModResponses, AttachUserToModErrors, PermitUserModData, PermitUserModResponses, PermitUserModErrors, DeleteUserFromPackData, DeleteUserFromPackResponses, DeleteUserFromPackErrors, ListUserPacksData, ListUserPacksResponses, ListUserPacksErrors, AttachUserToPackData, AttachUserToPackResponses, AttachUserToPackErrors, PermitUserPackData, PermitUserPackResponses, PermitUserPackErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Request the redirect to defined provider
 */
export const requestProvider = <ThrowOnError extends boolean = false>(options: Options<RequestProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, RequestProviderErrors, ThrowOnError>({
        url: '/auth/{provider}/request',
        ...options
    });
};

/**
 * Callback to parse the defined provider
 */
export const callbackProvider = <ThrowOnError extends boolean = false>(options: Options<CallbackProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, CallbackProviderErrors, ThrowOnError>({
        url: '/auth/{provider}/callback',
        ...options
    });
};

/**
 * Fetch the available auth providers
 */
export const listProviders = <ThrowOnError extends boolean = false>(options?: Options<ListProvidersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListProvidersResponses, unknown, ThrowOnError>({
        url: '/auth/providers',
        ...options
    });
};

/**
 * Retrieve real token after redirect
 */
export const redirectAuth = <ThrowOnError extends boolean = false>(options: Options<RedirectAuthData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RedirectAuthResponses, RedirectAuthErrors, ThrowOnError>({
        url: '/auth/redirect',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Authenticate an user by credentials
 */
export const loginAuth = <ThrowOnError extends boolean = false>(options: Options<LoginAuthData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginAuthResponses, LoginAuthErrors, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Refresh an auth token before it expires
 */
export const refreshAuth = <ThrowOnError extends boolean = false>(options?: Options<RefreshAuthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RefreshAuthResponses, RefreshAuthErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/auth/refresh',
        ...options
    });
};

/**
 * Verify validity for an authentication token
 */
export const verifyAuth = <ThrowOnError extends boolean = false>(options?: Options<VerifyAuthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<VerifyAuthResponses, VerifyAuthErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/auth/verify',
        ...options
    });
};

/**
 * Retrieve an unlimited auth token
 */
export const tokenProfile = <ThrowOnError extends boolean = false>(options?: Options<TokenProfileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TokenProfileResponses, TokenProfileErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/profile/token',
        ...options
    });
};

/**
 * Fetch profile details of the personal account
 */
export const showProfile = <ThrowOnError extends boolean = false>(options?: Options<ShowProfileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ShowProfileResponses, ShowProfileErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/profile/self',
        ...options
    });
};

/**
 * Update your own profile information
 */
export const updateProfile = <ThrowOnError extends boolean = false>(options: Options<UpdateProfileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateProfileResponses, UpdateProfileErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/profile/self',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch the available Minecraft versions
 */
export const listMinecrafts = <ThrowOnError extends boolean = false>(options?: Options<ListMinecraftsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListMinecraftsResponses, ListMinecraftsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/minecraft',
        ...options
    });
};

/**
 * Update the available Minecraft versions
 */
export const updateMinecraft = <ThrowOnError extends boolean = false>(options?: Options<UpdateMinecraftData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<UpdateMinecraftResponses, UpdateMinecraftErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/minecraft',
        ...options
    });
};

/**
 * Unlink a build from a Minecraft version
 */
export const deleteMinecraftFromBuild = <ThrowOnError extends boolean = false>(options: Options<DeleteMinecraftFromBuildData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMinecraftFromBuildResponses, DeleteMinecraftFromBuildErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/minecraft/{minecraft_id}/builds',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch the builds attached to a Minecraft version
 */
export const listMinecraftBuilds = <ThrowOnError extends boolean = false>(options: Options<ListMinecraftBuildsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListMinecraftBuildsResponses, ListMinecraftBuildsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/minecraft/{minecraft_id}/builds',
        ...options
    });
};

/**
 * Attach a build to a Minecraft version
 */
export const attachMinecraftToBuild = <ThrowOnError extends boolean = false>(options: Options<AttachMinecraftToBuildData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttachMinecraftToBuildResponses, AttachMinecraftToBuildErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/minecraft/{minecraft_id}/builds',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch the available Forge versions
 */
export const listForges = <ThrowOnError extends boolean = false>(options?: Options<ListForgesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListForgesResponses, ListForgesErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/forge',
        ...options
    });
};

/**
 * Update the available Forge versions
 */
export const updateForge = <ThrowOnError extends boolean = false>(options?: Options<UpdateForgeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<UpdateForgeResponses, UpdateForgeErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/forge',
        ...options
    });
};

/**
 * Unlink a build from a Forge version
 */
export const deleteForgeFromBuild = <ThrowOnError extends boolean = false>(options: Options<DeleteForgeFromBuildData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteForgeFromBuildResponses, DeleteForgeFromBuildErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/forge/{forge_id}/builds',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch the builds attached to a Forge version
 */
export const listForgeBuilds = <ThrowOnError extends boolean = false>(options: Options<ListForgeBuildsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListForgeBuildsResponses, ListForgeBuildsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/forge/{forge_id}/builds',
        ...options
    });
};

/**
 * Attach a build to a Forge version
 */
export const attachForgeToBuild = <ThrowOnError extends boolean = false>(options: Options<AttachForgeToBuildData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttachForgeToBuildResponses, AttachForgeToBuildErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/forge/{forge_id}/builds',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch the available Neoforge versions
 */
export const listNeoforges = <ThrowOnError extends boolean = false>(options?: Options<ListNeoforgesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListNeoforgesResponses, ListNeoforgesErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/neoforge',
        ...options
    });
};

/**
 * Update the available Neoforge versions
 */
export const updateNeoforge = <ThrowOnError extends boolean = false>(options?: Options<UpdateNeoforgeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<UpdateNeoforgeResponses, UpdateNeoforgeErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/neoforge',
        ...options
    });
};

/**
 * Unlink a build from a Neoforge version
 */
export const deleteNeoforgeFromBuild = <ThrowOnError extends boolean = false>(options: Options<DeleteNeoforgeFromBuildData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteNeoforgeFromBuildResponses, DeleteNeoforgeFromBuildErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/neoforge/{neoforge_id}/builds',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch the builds attached to a Neoforge version
 */
export const listNeoforgeBuilds = <ThrowOnError extends boolean = false>(options: Options<ListNeoforgeBuildsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListNeoforgeBuildsResponses, ListNeoforgeBuildsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/neoforge/{neoforge_id}/builds',
        ...options
    });
};

/**
 * Attach a build to a Neoforge version
 */
export const attachNeoforgeToBuild = <ThrowOnError extends boolean = false>(options: Options<AttachNeoforgeToBuildData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttachNeoforgeToBuildResponses, AttachNeoforgeToBuildErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/neoforge/{neoforge_id}/builds',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch the available Quilt versions
 */
export const listQuilts = <ThrowOnError extends boolean = false>(options?: Options<ListQuiltsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListQuiltsResponses, ListQuiltsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/quilt',
        ...options
    });
};

/**
 * Update the available Quilt versions
 */
export const updateQuilt = <ThrowOnError extends boolean = false>(options?: Options<UpdateQuiltData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<UpdateQuiltResponses, UpdateQuiltErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/quilt',
        ...options
    });
};

/**
 * Unlink a build from a Quilt version
 */
export const deleteQuiltFromBuild = <ThrowOnError extends boolean = false>(options: Options<DeleteQuiltFromBuildData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteQuiltFromBuildResponses, DeleteQuiltFromBuildErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/quilt/{quilt_id}/builds',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch the builds attached to a Quilt version
 */
export const listQuiltBuilds = <ThrowOnError extends boolean = false>(options: Options<ListQuiltBuildsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListQuiltBuildsResponses, ListQuiltBuildsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/quilt/{quilt_id}/builds',
        ...options
    });
};

/**
 * Attach a build to a Quilt version
 */
export const attachQuiltToBuild = <ThrowOnError extends boolean = false>(options: Options<AttachQuiltToBuildData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttachQuiltToBuildResponses, AttachQuiltToBuildErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/quilt/{quilt_id}/builds',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch the available Fabric versions
 */
export const listFabrics = <ThrowOnError extends boolean = false>(options?: Options<ListFabricsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListFabricsResponses, ListFabricsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/fabric',
        ...options
    });
};

/**
 * Update the available Fabric versions
 */
export const updateFabric = <ThrowOnError extends boolean = false>(options?: Options<UpdateFabricData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<UpdateFabricResponses, UpdateFabricErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/fabric',
        ...options
    });
};

/**
 * Unlink a build from a Fabric version
 */
export const deleteFabricFromBuild = <ThrowOnError extends boolean = false>(options: Options<DeleteFabricFromBuildData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteFabricFromBuildResponses, DeleteFabricFromBuildErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/fabric/{fabric_id}/builds',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch the builds attached to a Fabric version
 */
export const listFabricBuilds = <ThrowOnError extends boolean = false>(options: Options<ListFabricBuildsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListFabricBuildsResponses, ListFabricBuildsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/fabric/{fabric_id}/builds',
        ...options
    });
};

/**
 * Attach a build to a Fabric version
 */
export const attachFabricToBuild = <ThrowOnError extends boolean = false>(options: Options<AttachFabricToBuildData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttachFabricToBuildResponses, AttachFabricToBuildErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/fabric/{fabric_id}/builds',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all available packs
 */
export const listPacks = <ThrowOnError extends boolean = false>(options?: Options<ListPacksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListPacksResponses, ListPacksErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/packs',
        ...options
    });
};

/**
 * Create a new pack
 */
export const createPack = <ThrowOnError extends boolean = false>(options: Options<CreatePackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePackResponses, CreatePackErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/packs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a specific pack
 */
export const deletePack = <ThrowOnError extends boolean = false>(options: Options<DeletePackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePackResponses, DeletePackErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/packs/{pack_id}',
        ...options
    });
};

/**
 * Fetch a specific pack
 */
export const showPack = <ThrowOnError extends boolean = false>(options: Options<ShowPackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowPackResponses, ShowPackErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/packs/{pack_id}',
        ...options
    });
};

/**
 * Update a specific pack
 */
export const updatePack = <ThrowOnError extends boolean = false>(options: Options<UpdatePackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdatePackResponses, UpdatePackErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/packs/{pack_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete the avatar for the defined pack
 */
export const deletePackAvatar = <ThrowOnError extends boolean = false>(options: Options<DeletePackAvatarData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePackAvatarResponses, DeletePackAvatarErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/packs/{pack_id}/avatar',
        ...options
    });
};

/**
 * Upload an avatar for the defined pack
 */
export const createPackAvatar = <ThrowOnError extends boolean = false>(options: Options<CreatePackAvatarData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePackAvatarResponses, CreatePackAvatarErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/packs/{pack_id}/avatar',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Unlink a user from pack
 */
export const deletePackFromUser = <ThrowOnError extends boolean = false>(options: Options<DeletePackFromUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePackFromUserResponses, DeletePackFromUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/packs/{pack_id}/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all users attached to pack
 */
export const listPackUsers = <ThrowOnError extends boolean = false>(options: Options<ListPackUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListPackUsersResponses, ListPackUsersErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/packs/{pack_id}/users',
        ...options
    });
};

/**
 * Attach a user to pack
 */
export const attachPackToUser = <ThrowOnError extends boolean = false>(options: Options<AttachPackToUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttachPackToUserResponses, AttachPackToUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/packs/{pack_id}/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update user perms for pack
 */
export const permitPackUser = <ThrowOnError extends boolean = false>(options: Options<PermitPackUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PermitPackUserResponses, PermitPackUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/packs/{pack_id}/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unlink a group from pack
 */
export const deletePackFromGroup = <ThrowOnError extends boolean = false>(options: Options<DeletePackFromGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePackFromGroupResponses, DeletePackFromGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/packs/{pack_id}/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all groups attached to pack
 */
export const listPackGroups = <ThrowOnError extends boolean = false>(options: Options<ListPackGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListPackGroupsResponses, ListPackGroupsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/packs/{pack_id}/groups',
        ...options
    });
};

/**
 * Attach a group to pack
 */
export const attachPackToGroup = <ThrowOnError extends boolean = false>(options: Options<AttachPackToGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttachPackToGroupResponses, AttachPackToGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/packs/{pack_id}/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update group perms for pack
 */
export const permitPackGroup = <ThrowOnError extends boolean = false>(options: Options<PermitPackGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PermitPackGroupResponses, PermitPackGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/packs/{pack_id}/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all available builds for a pack
 */
export const listBuilds = <ThrowOnError extends boolean = false>(options: Options<ListBuildsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListBuildsResponses, ListBuildsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/packs/{pack_id}/builds',
        ...options
    });
};

/**
 * Create a new build for a pack
 */
export const createBuild = <ThrowOnError extends boolean = false>(options: Options<CreateBuildData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateBuildResponses, CreateBuildErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/packs/{pack_id}/builds',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a specific build for a pack
 */
export const deleteBuild = <ThrowOnError extends boolean = false>(options: Options<DeleteBuildData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteBuildResponses, DeleteBuildErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/packs/{pack_id}/builds/{build_id}',
        ...options
    });
};

/**
 * Fetch a specific build for a pack
 */
export const showBuild = <ThrowOnError extends boolean = false>(options: Options<ShowBuildData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowBuildResponses, ShowBuildErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/packs/{pack_id}/builds/{build_id}',
        ...options
    });
};

/**
 * Update a specific build for a pack
 */
export const updateBuild = <ThrowOnError extends boolean = false>(options: Options<UpdateBuildData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateBuildResponses, UpdateBuildErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/packs/{pack_id}/builds/{build_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unlink a version from a build
 */
export const deleteBuildFromVersion = <ThrowOnError extends boolean = false>(options: Options<DeleteBuildFromVersionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteBuildFromVersionResponses, DeleteBuildFromVersionErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/packs/{pack_id}/builds/{build_id}/versions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all versions attached to build
 */
export const listBuildVersions = <ThrowOnError extends boolean = false>(options: Options<ListBuildVersionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListBuildVersionsResponses, ListBuildVersionsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/packs/{pack_id}/builds/{build_id}/versions',
        ...options
    });
};

/**
 * Attach a version to a build
 */
export const attachBuildToVersion = <ThrowOnError extends boolean = false>(options: Options<AttachBuildToVersionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttachBuildToVersionResponses, AttachBuildToVersionErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/packs/{pack_id}/builds/{build_id}/versions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all available mods
 */
export const listMods = <ThrowOnError extends boolean = false>(options?: Options<ListModsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListModsResponses, ListModsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/mods',
        ...options
    });
};

/**
 * Create a new mod
 */
export const createMod = <ThrowOnError extends boolean = false>(options: Options<CreateModData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateModResponses, CreateModErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/mods',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a specific mod
 */
export const deleteMod = <ThrowOnError extends boolean = false>(options: Options<DeleteModData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteModResponses, DeleteModErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/mods/{mod_id}',
        ...options
    });
};

/**
 * Fetch a specific mod
 */
export const showMod = <ThrowOnError extends boolean = false>(options: Options<ShowModData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowModResponses, ShowModErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/mods/{mod_id}',
        ...options
    });
};

/**
 * Update a specific mod
 */
export const updateMod = <ThrowOnError extends boolean = false>(options: Options<UpdateModData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateModResponses, UpdateModErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/mods/{mod_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete the avatar for the defined mod
 */
export const deleteModAvatar = <ThrowOnError extends boolean = false>(options: Options<DeleteModAvatarData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteModAvatarResponses, DeleteModAvatarErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/mods/{mod_id}/avatar',
        ...options
    });
};

/**
 * Upload an avatar for the defined mod
 */
export const createModAvatar = <ThrowOnError extends boolean = false>(options: Options<CreateModAvatarData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateModAvatarResponses, CreateModAvatarErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/mods/{mod_id}/avatar',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Unlink a user from mod
 */
export const deleteModFromUser = <ThrowOnError extends boolean = false>(options: Options<DeleteModFromUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteModFromUserResponses, DeleteModFromUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/mods/{mod_id}/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all users attached to mod
 */
export const listModUsers = <ThrowOnError extends boolean = false>(options: Options<ListModUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListModUsersResponses, ListModUsersErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/mods/{mod_id}/users',
        ...options
    });
};

/**
 * Attach a user to mod
 */
export const attachModToUser = <ThrowOnError extends boolean = false>(options: Options<AttachModToUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttachModToUserResponses, AttachModToUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/mods/{mod_id}/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update user perms for mod
 */
export const permitModUser = <ThrowOnError extends boolean = false>(options: Options<PermitModUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PermitModUserResponses, PermitModUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/mods/{mod_id}/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unlink a group from mod
 */
export const deleteModFromGroup = <ThrowOnError extends boolean = false>(options: Options<DeleteModFromGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteModFromGroupResponses, DeleteModFromGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/mods/{mod_id}/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all groups attached to mod
 */
export const listModGroups = <ThrowOnError extends boolean = false>(options: Options<ListModGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListModGroupsResponses, ListModGroupsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/mods/{mod_id}/groups',
        ...options
    });
};

/**
 * Attach a group to mod
 */
export const attachModToGroup = <ThrowOnError extends boolean = false>(options: Options<AttachModToGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttachModToGroupResponses, AttachModToGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/mods/{mod_id}/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update group perms for mod
 */
export const permitModGroup = <ThrowOnError extends boolean = false>(options: Options<PermitModGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PermitModGroupResponses, PermitModGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/mods/{mod_id}/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all available versions for a mod
 */
export const listVersions = <ThrowOnError extends boolean = false>(options: Options<ListVersionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListVersionsResponses, ListVersionsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/mods/{mod_id}/versions',
        ...options
    });
};

/**
 * Create a new version for a mod
 */
export const createVersion = <ThrowOnError extends boolean = false>(options: Options<CreateVersionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateVersionResponses, CreateVersionErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/mods/{mod_id}/versions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a specific version for a mod
 */
export const deleteVersion = <ThrowOnError extends boolean = false>(options: Options<DeleteVersionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteVersionResponses, DeleteVersionErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/mods/{mod_id}/versions/{version_id}',
        ...options
    });
};

/**
 * Fetch a specific version for a mod
 */
export const showVersion = <ThrowOnError extends boolean = false>(options: Options<ShowVersionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowVersionResponses, ShowVersionErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/mods/{mod_id}/versions/{version_id}',
        ...options
    });
};

/**
 * Update a specific version for a mod
 */
export const updateVersion = <ThrowOnError extends boolean = false>(options: Options<UpdateVersionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateVersionResponses, UpdateVersionErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/mods/{mod_id}/versions/{version_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unlink a build from a version
 */
export const deleteVersionFromBuild = <ThrowOnError extends boolean = false>(options: Options<DeleteVersionFromBuildData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteVersionFromBuildResponses, DeleteVersionFromBuildErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/mods/{mod_id}/versions/{version_id}/builds',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all builds attached to version
 */
export const listVersionBuilds = <ThrowOnError extends boolean = false>(options: Options<ListVersionBuildsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListVersionBuildsResponses, ListVersionBuildsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/mods/{mod_id}/versions/{version_id}/builds',
        ...options
    });
};

/**
 * Attach a build to a version
 */
export const attachVersionToBuild = <ThrowOnError extends boolean = false>(options: Options<AttachVersionToBuildData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttachVersionToBuildResponses, AttachVersionToBuildErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/mods/{mod_id}/versions/{version_id}/builds',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all available groups
 */
export const listGroups = <ThrowOnError extends boolean = false>(options?: Options<ListGroupsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListGroupsResponses, ListGroupsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups',
        ...options
    });
};

/**
 * Create a new group
 */
export const createGroup = <ThrowOnError extends boolean = false>(options: Options<CreateGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateGroupResponses, CreateGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a specific group
 */
export const deleteGroup = <ThrowOnError extends boolean = false>(options: Options<DeleteGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteGroupResponses, DeleteGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}',
        ...options
    });
};

/**
 * Fetch a specific group
 */
export const showGroup = <ThrowOnError extends boolean = false>(options: Options<ShowGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowGroupResponses, ShowGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}',
        ...options
    });
};

/**
 * Update a specific group
 */
export const updateGroup = <ThrowOnError extends boolean = false>(options: Options<UpdateGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateGroupResponses, UpdateGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unlink a user from group
 */
export const deleteGroupFromUser = <ThrowOnError extends boolean = false>(options: Options<DeleteGroupFromUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteGroupFromUserResponses, DeleteGroupFromUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all users attached to group
 */
export const listGroupUsers = <ThrowOnError extends boolean = false>(options: Options<ListGroupUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListGroupUsersResponses, ListGroupUsersErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}/users',
        ...options
    });
};

/**
 * Attach a user to group
 */
export const attachGroupToUser = <ThrowOnError extends boolean = false>(options: Options<AttachGroupToUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttachGroupToUserResponses, AttachGroupToUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update user perms for group
 */
export const permitGroupUser = <ThrowOnError extends boolean = false>(options: Options<PermitGroupUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PermitGroupUserResponses, PermitGroupUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unlink a mod from group
 */
export const deleteGroupFromMod = <ThrowOnError extends boolean = false>(options: Options<DeleteGroupFromModData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteGroupFromModResponses, DeleteGroupFromModErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}/mods',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all mods attached to group
 */
export const listGroupMods = <ThrowOnError extends boolean = false>(options: Options<ListGroupModsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListGroupModsResponses, ListGroupModsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}/mods',
        ...options
    });
};

/**
 * Attach a mod to group
 */
export const attachGroupToMod = <ThrowOnError extends boolean = false>(options: Options<AttachGroupToModData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttachGroupToModResponses, AttachGroupToModErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}/mods',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update mod perms for group
 */
export const permitGroupMod = <ThrowOnError extends boolean = false>(options: Options<PermitGroupModData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PermitGroupModResponses, PermitGroupModErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}/mods',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unlink a pack from group
 */
export const deleteGroupFromPack = <ThrowOnError extends boolean = false>(options: Options<DeleteGroupFromPackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteGroupFromPackResponses, DeleteGroupFromPackErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}/packs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all packs attached to group
 */
export const listGroupPacks = <ThrowOnError extends boolean = false>(options: Options<ListGroupPacksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListGroupPacksResponses, ListGroupPacksErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}/packs',
        ...options
    });
};

/**
 * Attach a pack to group
 */
export const attachGroupToPack = <ThrowOnError extends boolean = false>(options: Options<AttachGroupToPackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttachGroupToPackResponses, AttachGroupToPackErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}/packs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update pack perms for group
 */
export const permitGroupPack = <ThrowOnError extends boolean = false>(options: Options<PermitGroupPackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PermitGroupPackResponses, PermitGroupPackErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}/packs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all available users
 */
export const listUsers = <ThrowOnError extends boolean = false>(options?: Options<ListUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListUsersResponses, ListUsersErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users',
        ...options
    });
};

/**
 * Create a new user
 */
export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserResponses, CreateUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a specific user
 */
export const deleteUser = <ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserResponses, DeleteUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}',
        ...options
    });
};

/**
 * Fetch a specific user
 */
export const showUser = <ThrowOnError extends boolean = false>(options: Options<ShowUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowUserResponses, ShowUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}',
        ...options
    });
};

/**
 * Update a specific user
 */
export const updateUser = <ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserResponses, UpdateUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unlink a group from user
 */
export const deleteUserFromGroup = <ThrowOnError extends boolean = false>(options: Options<DeleteUserFromGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserFromGroupResponses, DeleteUserFromGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all groups attached to user
 */
export const listUserGroups = <ThrowOnError extends boolean = false>(options: Options<ListUserGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListUserGroupsResponses, ListUserGroupsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/groups',
        ...options
    });
};

/**
 * Attach a group to user
 */
export const attachUserToGroup = <ThrowOnError extends boolean = false>(options: Options<AttachUserToGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttachUserToGroupResponses, AttachUserToGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update group perms for user
 */
export const permitUserGroup = <ThrowOnError extends boolean = false>(options: Options<PermitUserGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PermitUserGroupResponses, PermitUserGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unlink a mod from user
 */
export const deleteUserFromMod = <ThrowOnError extends boolean = false>(options: Options<DeleteUserFromModData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserFromModResponses, DeleteUserFromModErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/mods',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all mods attached to user
 */
export const listUserMods = <ThrowOnError extends boolean = false>(options: Options<ListUserModsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListUserModsResponses, ListUserModsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/mods',
        ...options
    });
};

/**
 * Attach a mod to user
 */
export const attachUserToMod = <ThrowOnError extends boolean = false>(options: Options<AttachUserToModData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttachUserToModResponses, AttachUserToModErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/mods',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update mod perms for user
 */
export const permitUserMod = <ThrowOnError extends boolean = false>(options: Options<PermitUserModData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PermitUserModResponses, PermitUserModErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/mods',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unlink a pack from user
 */
export const deleteUserFromPack = <ThrowOnError extends boolean = false>(options: Options<DeleteUserFromPackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserFromPackResponses, DeleteUserFromPackErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/packs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all packs attached to user
 */
export const listUserPacks = <ThrowOnError extends boolean = false>(options: Options<ListUserPacksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListUserPacksResponses, ListUserPacksErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/packs',
        ...options
    });
};

/**
 * Attach a pack to user
 */
export const attachUserToPack = <ThrowOnError extends boolean = false>(options: Options<AttachUserToPackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttachUserToPackResponses, AttachUserToPackErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/packs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update pack perms for user
 */
export const permitUserPack = <ThrowOnError extends boolean = false>(options: Options<PermitUserPackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PermitUserPackResponses, PermitUserPackErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/packs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
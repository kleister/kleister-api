// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer,
} from '@hey-api/client-fetch'
import type {
  RequestProviderData,
  RequestProviderError,
  CallbackProviderData,
  CallbackProviderError,
  ListProvidersData,
  ListProvidersResponse,
  RedirectAuthData,
  RedirectAuthResponse,
  RedirectAuthError,
  LoginAuthData,
  LoginAuthResponse,
  LoginAuthError,
  RefreshAuthData,
  RefreshAuthResponse,
  RefreshAuthError,
  VerifyAuthData,
  VerifyAuthResponse,
  VerifyAuthError,
  TokenProfileData,
  TokenProfileResponse,
  TokenProfileError,
  ShowProfileData,
  ShowProfileResponse,
  ShowProfileError,
  UpdateProfileData,
  UpdateProfileResponse,
  UpdateProfileError,
  ListMinecraftsData,
  ListMinecraftsResponse,
  ListMinecraftsError,
  UpdateMinecraftData,
  UpdateMinecraftResponse,
  UpdateMinecraftError,
  DeleteMinecraftFromBuildData,
  DeleteMinecraftFromBuildResponse,
  DeleteMinecraftFromBuildError,
  ListMinecraftBuildsData,
  ListMinecraftBuildsResponse,
  ListMinecraftBuildsError,
  AttachMinecraftToBuildData,
  AttachMinecraftToBuildResponse,
  AttachMinecraftToBuildError,
  ListForgesData,
  ListForgesResponse,
  ListForgesError,
  UpdateForgeData,
  UpdateForgeResponse,
  UpdateForgeError,
  DeleteForgeFromBuildData,
  DeleteForgeFromBuildResponse,
  DeleteForgeFromBuildError,
  ListForgeBuildsData,
  ListForgeBuildsResponse,
  ListForgeBuildsError,
  AttachForgeToBuildData,
  AttachForgeToBuildResponse,
  AttachForgeToBuildError,
  ListNeoforgesData,
  ListNeoforgesResponse,
  ListNeoforgesError,
  UpdateNeoforgeData,
  UpdateNeoforgeResponse,
  UpdateNeoforgeError,
  DeleteNeoforgeFromBuildData,
  DeleteNeoforgeFromBuildResponse,
  DeleteNeoforgeFromBuildError,
  ListNeoforgeBuildsData,
  ListNeoforgeBuildsResponse,
  ListNeoforgeBuildsError,
  AttachNeoforgeToBuildData,
  AttachNeoforgeToBuildResponse,
  AttachNeoforgeToBuildError,
  ListQuiltsData,
  ListQuiltsResponse,
  ListQuiltsError,
  UpdateQuiltData,
  UpdateQuiltResponse,
  UpdateQuiltError,
  DeleteQuiltFromBuildData,
  DeleteQuiltFromBuildResponse,
  DeleteQuiltFromBuildError,
  ListQuiltBuildsData,
  ListQuiltBuildsResponse,
  ListQuiltBuildsError,
  AttachQuiltToBuildData,
  AttachQuiltToBuildResponse,
  AttachQuiltToBuildError,
  ListFabricsData,
  ListFabricsResponse,
  ListFabricsError,
  UpdateFabricData,
  UpdateFabricResponse,
  UpdateFabricError,
  DeleteFabricFromBuildData,
  DeleteFabricFromBuildResponse,
  DeleteFabricFromBuildError,
  ListFabricBuildsData,
  ListFabricBuildsResponse,
  ListFabricBuildsError,
  AttachFabricToBuildData,
  AttachFabricToBuildResponse,
  AttachFabricToBuildError,
  ListPacksData,
  ListPacksResponse,
  ListPacksError,
  CreatePackData,
  CreatePackResponse,
  CreatePackError,
  DeletePackData,
  DeletePackResponse,
  DeletePackError,
  ShowPackData,
  ShowPackResponse,
  ShowPackError,
  UpdatePackData,
  UpdatePackResponse,
  UpdatePackError,
  DeletePackAvatarData,
  DeletePackAvatarResponse,
  DeletePackAvatarError,
  CreatePackAvatarData,
  CreatePackAvatarResponse,
  CreatePackAvatarError,
  DeletePackFromUserData,
  DeletePackFromUserResponse,
  DeletePackFromUserError,
  ListPackUsersData,
  ListPackUsersResponse,
  ListPackUsersError,
  AttachPackToUserData,
  AttachPackToUserResponse,
  AttachPackToUserError,
  PermitPackUserData,
  PermitPackUserResponse,
  PermitPackUserError,
  DeletePackFromGroupData,
  DeletePackFromGroupResponse,
  DeletePackFromGroupError,
  ListPackGroupsData,
  ListPackGroupsResponse,
  ListPackGroupsError,
  AttachPackToGroupData,
  AttachPackToGroupResponse,
  AttachPackToGroupError,
  PermitPackGroupData,
  PermitPackGroupResponse,
  PermitPackGroupError,
  ListBuildsData,
  ListBuildsResponse,
  ListBuildsError,
  CreateBuildData,
  CreateBuildResponse,
  CreateBuildError,
  DeleteBuildData,
  DeleteBuildResponse,
  DeleteBuildError,
  ShowBuildData,
  ShowBuildResponse,
  ShowBuildError,
  UpdateBuildData,
  UpdateBuildResponse,
  UpdateBuildError,
  DeleteBuildFromVersionData,
  DeleteBuildFromVersionResponse,
  DeleteBuildFromVersionError,
  ListBuildVersionsData,
  ListBuildVersionsResponse,
  ListBuildVersionsError,
  AttachBuildToVersionData,
  AttachBuildToVersionResponse,
  AttachBuildToVersionError,
  ListModsData,
  ListModsResponse,
  ListModsError,
  CreateModData,
  CreateModResponse,
  CreateModError,
  DeleteModData,
  DeleteModResponse,
  DeleteModError,
  ShowModData,
  ShowModResponse,
  ShowModError,
  UpdateModData,
  UpdateModResponse,
  UpdateModError,
  DeleteModAvatarData,
  DeleteModAvatarResponse,
  DeleteModAvatarError,
  CreateModAvatarData,
  CreateModAvatarResponse,
  CreateModAvatarError,
  DeleteModFromUserData,
  DeleteModFromUserResponse,
  DeleteModFromUserError,
  ListModUsersData,
  ListModUsersResponse,
  ListModUsersError,
  AttachModToUserData,
  AttachModToUserResponse,
  AttachModToUserError,
  PermitModUserData,
  PermitModUserResponse,
  PermitModUserError,
  DeleteModFromGroupData,
  DeleteModFromGroupResponse,
  DeleteModFromGroupError,
  ListModGroupsData,
  ListModGroupsResponse,
  ListModGroupsError,
  AttachModToGroupData,
  AttachModToGroupResponse,
  AttachModToGroupError,
  PermitModGroupData,
  PermitModGroupResponse,
  PermitModGroupError,
  ListVersionsData,
  ListVersionsResponse,
  ListVersionsError,
  CreateVersionData,
  CreateVersionResponse,
  CreateVersionError,
  DeleteVersionData,
  DeleteVersionResponse,
  DeleteVersionError,
  ShowVersionData,
  ShowVersionResponse,
  ShowVersionError,
  UpdateVersionData,
  UpdateVersionResponse,
  UpdateVersionError,
  DeleteVersionFromBuildData,
  DeleteVersionFromBuildResponse,
  DeleteVersionFromBuildError,
  ListVersionBuildsData,
  ListVersionBuildsResponse,
  ListVersionBuildsError,
  AttachVersionToBuildData,
  AttachVersionToBuildResponse,
  AttachVersionToBuildError,
  ListGroupsData,
  ListGroupsResponse,
  ListGroupsError,
  CreateGroupData,
  CreateGroupResponse,
  CreateGroupError,
  DeleteGroupData,
  DeleteGroupResponse,
  DeleteGroupError,
  ShowGroupData,
  ShowGroupResponse,
  ShowGroupError,
  UpdateGroupData,
  UpdateGroupResponse,
  UpdateGroupError,
  DeleteGroupFromUserData,
  DeleteGroupFromUserResponse,
  DeleteGroupFromUserError,
  ListGroupUsersData,
  ListGroupUsersResponse,
  ListGroupUsersError,
  AttachGroupToUserData,
  AttachGroupToUserResponse,
  AttachGroupToUserError,
  PermitGroupUserData,
  PermitGroupUserResponse,
  PermitGroupUserError,
  DeleteGroupFromModData,
  DeleteGroupFromModResponse,
  DeleteGroupFromModError,
  ListGroupModsData,
  ListGroupModsResponse,
  ListGroupModsError,
  AttachGroupToModData,
  AttachGroupToModResponse,
  AttachGroupToModError,
  PermitGroupModData,
  PermitGroupModResponse,
  PermitGroupModError,
  DeleteGroupFromPackData,
  DeleteGroupFromPackResponse,
  DeleteGroupFromPackError,
  ListGroupPacksData,
  ListGroupPacksResponse,
  ListGroupPacksError,
  AttachGroupToPackData,
  AttachGroupToPackResponse,
  AttachGroupToPackError,
  PermitGroupPackData,
  PermitGroupPackResponse,
  PermitGroupPackError,
  ListUsersData,
  ListUsersResponse,
  ListUsersError,
  CreateUserData,
  CreateUserResponse,
  CreateUserError,
  DeleteUserData,
  DeleteUserResponse,
  DeleteUserError,
  ShowUserData,
  ShowUserResponse,
  ShowUserError,
  UpdateUserData,
  UpdateUserResponse,
  UpdateUserError,
  DeleteUserFromGroupData,
  DeleteUserFromGroupResponse,
  DeleteUserFromGroupError,
  ListUserGroupsData,
  ListUserGroupsResponse,
  ListUserGroupsError,
  AttachUserToGroupData,
  AttachUserToGroupResponse,
  AttachUserToGroupError,
  PermitUserGroupData,
  PermitUserGroupResponse,
  PermitUserGroupError,
  DeleteUserFromModData,
  DeleteUserFromModResponse,
  DeleteUserFromModError,
  ListUserModsData,
  ListUserModsResponse,
  ListUserModsError,
  AttachUserToModData,
  AttachUserToModResponse,
  AttachUserToModError,
  PermitUserModData,
  PermitUserModResponse,
  PermitUserModError,
  DeleteUserFromPackData,
  DeleteUserFromPackResponse,
  DeleteUserFromPackError,
  ListUserPacksData,
  ListUserPacksResponse,
  ListUserPacksError,
  AttachUserToPackData,
  AttachUserToPackResponse,
  AttachUserToPackError,
  PermitUserPackData,
  PermitUserPackResponse,
  PermitUserPackError,
} from './types.gen'
import { client as _heyApiClient } from './client.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * Request the redirect to defined provider
 */
export const requestProvider = <ThrowOnError extends boolean = false>(
  options: Options<RequestProviderData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    RequestProviderError,
    ThrowOnError
  >({
    url: '/auth/{provider}/request',
    ...options,
  })
}

/**
 * Callback to parse the defined provider
 */
export const callbackProvider = <ThrowOnError extends boolean = false>(
  options: Options<CallbackProviderData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    CallbackProviderError,
    ThrowOnError
  >({
    url: '/auth/{provider}/callback',
    ...options,
  })
}

/**
 * Fetch the available auth providers
 */
export const listProviders = <ThrowOnError extends boolean = false>(
  options?: Options<ListProvidersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListProvidersResponse,
    unknown,
    ThrowOnError
  >({
    url: '/auth/providers',
    ...options,
  })
}

/**
 * Retrieve real token after redirect
 */
export const redirectAuth = <ThrowOnError extends boolean = false>(
  options: Options<RedirectAuthData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    RedirectAuthResponse,
    RedirectAuthError,
    ThrowOnError
  >({
    url: '/auth/redirect',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Authenticate an user by credentials
 */
export const loginAuth = <ThrowOnError extends boolean = false>(
  options: Options<LoginAuthData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    LoginAuthResponse,
    LoginAuthError,
    ThrowOnError
  >({
    url: '/auth/login',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Refresh an auth token before it expires
 */
export const refreshAuth = <ThrowOnError extends boolean = false>(
  options?: Options<RefreshAuthData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    RefreshAuthResponse,
    RefreshAuthError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/auth/refresh',
    ...options,
  })
}

/**
 * Verify validity for an authentication token
 */
export const verifyAuth = <ThrowOnError extends boolean = false>(
  options?: Options<VerifyAuthData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    VerifyAuthResponse,
    VerifyAuthError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/auth/verify',
    ...options,
  })
}

/**
 * Retrieve an unlimited auth token
 */
export const tokenProfile = <ThrowOnError extends boolean = false>(
  options?: Options<TokenProfileData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    TokenProfileResponse,
    TokenProfileError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/profile/token',
    ...options,
  })
}

/**
 * Fetch profile details of the personal account
 */
export const showProfile = <ThrowOnError extends boolean = false>(
  options?: Options<ShowProfileData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ShowProfileResponse,
    ShowProfileError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/profile/self',
    ...options,
  })
}

/**
 * Update your own profile information
 */
export const updateProfile = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProfileData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateProfileResponse,
    UpdateProfileError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/profile/self',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch the available Minecraft versions
 */
export const listMinecrafts = <ThrowOnError extends boolean = false>(
  options?: Options<ListMinecraftsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListMinecraftsResponse,
    ListMinecraftsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/minecraft',
    ...options,
  })
}

/**
 * Update the available Minecraft versions
 */
export const updateMinecraft = <ThrowOnError extends boolean = false>(
  options?: Options<UpdateMinecraftData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).put<
    UpdateMinecraftResponse,
    UpdateMinecraftError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/minecraft',
    ...options,
  })
}

/**
 * Unlink a build from a Minecraft version
 */
export const deleteMinecraftFromBuild = <ThrowOnError extends boolean = false>(
  options: Options<DeleteMinecraftFromBuildData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteMinecraftFromBuildResponse,
    DeleteMinecraftFromBuildError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/minecraft/{minecraft_id}/builds',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch the builds attached to a Minecraft version
 */
export const listMinecraftBuilds = <ThrowOnError extends boolean = false>(
  options: Options<ListMinecraftBuildsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListMinecraftBuildsResponse,
    ListMinecraftBuildsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/minecraft/{minecraft_id}/builds',
    ...options,
  })
}

/**
 * Attach a build to a Minecraft version
 */
export const attachMinecraftToBuild = <ThrowOnError extends boolean = false>(
  options: Options<AttachMinecraftToBuildData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AttachMinecraftToBuildResponse,
    AttachMinecraftToBuildError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/minecraft/{minecraft_id}/builds',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch the available Forge versions
 */
export const listForges = <ThrowOnError extends boolean = false>(
  options?: Options<ListForgesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListForgesResponse,
    ListForgesError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/forge',
    ...options,
  })
}

/**
 * Update the available Forge versions
 */
export const updateForge = <ThrowOnError extends boolean = false>(
  options?: Options<UpdateForgeData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).put<
    UpdateForgeResponse,
    UpdateForgeError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/forge',
    ...options,
  })
}

/**
 * Unlink a build from a Forge version
 */
export const deleteForgeFromBuild = <ThrowOnError extends boolean = false>(
  options: Options<DeleteForgeFromBuildData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteForgeFromBuildResponse,
    DeleteForgeFromBuildError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/forge/{forge_id}/builds',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch the builds attached to a Forge version
 */
export const listForgeBuilds = <ThrowOnError extends boolean = false>(
  options: Options<ListForgeBuildsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListForgeBuildsResponse,
    ListForgeBuildsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/forge/{forge_id}/builds',
    ...options,
  })
}

/**
 * Attach a build to a Forge version
 */
export const attachForgeToBuild = <ThrowOnError extends boolean = false>(
  options: Options<AttachForgeToBuildData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AttachForgeToBuildResponse,
    AttachForgeToBuildError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/forge/{forge_id}/builds',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch the available Neoforge versions
 */
export const listNeoforges = <ThrowOnError extends boolean = false>(
  options?: Options<ListNeoforgesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListNeoforgesResponse,
    ListNeoforgesError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/neoforge',
    ...options,
  })
}

/**
 * Update the available Neoforge versions
 */
export const updateNeoforge = <ThrowOnError extends boolean = false>(
  options?: Options<UpdateNeoforgeData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).put<
    UpdateNeoforgeResponse,
    UpdateNeoforgeError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/neoforge',
    ...options,
  })
}

/**
 * Unlink a build from a Neoforge version
 */
export const deleteNeoforgeFromBuild = <ThrowOnError extends boolean = false>(
  options: Options<DeleteNeoforgeFromBuildData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteNeoforgeFromBuildResponse,
    DeleteNeoforgeFromBuildError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/neoforge/{neoforge_id}/builds',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch the builds attached to a Neoforge version
 */
export const listNeoforgeBuilds = <ThrowOnError extends boolean = false>(
  options: Options<ListNeoforgeBuildsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListNeoforgeBuildsResponse,
    ListNeoforgeBuildsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/neoforge/{neoforge_id}/builds',
    ...options,
  })
}

/**
 * Attach a build to a Neoforge version
 */
export const attachNeoforgeToBuild = <ThrowOnError extends boolean = false>(
  options: Options<AttachNeoforgeToBuildData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AttachNeoforgeToBuildResponse,
    AttachNeoforgeToBuildError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/neoforge/{neoforge_id}/builds',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch the available Quilt versions
 */
export const listQuilts = <ThrowOnError extends boolean = false>(
  options?: Options<ListQuiltsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListQuiltsResponse,
    ListQuiltsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/quilt',
    ...options,
  })
}

/**
 * Update the available Quilt versions
 */
export const updateQuilt = <ThrowOnError extends boolean = false>(
  options?: Options<UpdateQuiltData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).put<
    UpdateQuiltResponse,
    UpdateQuiltError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/quilt',
    ...options,
  })
}

/**
 * Unlink a build from a Quilt version
 */
export const deleteQuiltFromBuild = <ThrowOnError extends boolean = false>(
  options: Options<DeleteQuiltFromBuildData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteQuiltFromBuildResponse,
    DeleteQuiltFromBuildError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/quilt/{quilt_id}/builds',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch the builds attached to a Quilt version
 */
export const listQuiltBuilds = <ThrowOnError extends boolean = false>(
  options: Options<ListQuiltBuildsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListQuiltBuildsResponse,
    ListQuiltBuildsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/quilt/{quilt_id}/builds',
    ...options,
  })
}

/**
 * Attach a build to a Quilt version
 */
export const attachQuiltToBuild = <ThrowOnError extends boolean = false>(
  options: Options<AttachQuiltToBuildData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AttachQuiltToBuildResponse,
    AttachQuiltToBuildError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/quilt/{quilt_id}/builds',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch the available Fabric versions
 */
export const listFabrics = <ThrowOnError extends boolean = false>(
  options?: Options<ListFabricsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListFabricsResponse,
    ListFabricsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/fabric',
    ...options,
  })
}

/**
 * Update the available Fabric versions
 */
export const updateFabric = <ThrowOnError extends boolean = false>(
  options?: Options<UpdateFabricData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).put<
    UpdateFabricResponse,
    UpdateFabricError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/fabric',
    ...options,
  })
}

/**
 * Unlink a build from a Fabric version
 */
export const deleteFabricFromBuild = <ThrowOnError extends boolean = false>(
  options: Options<DeleteFabricFromBuildData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteFabricFromBuildResponse,
    DeleteFabricFromBuildError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/fabric/{fabric_id}/builds',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch the builds attached to a Fabric version
 */
export const listFabricBuilds = <ThrowOnError extends boolean = false>(
  options: Options<ListFabricBuildsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListFabricBuildsResponse,
    ListFabricBuildsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/fabric/{fabric_id}/builds',
    ...options,
  })
}

/**
 * Attach a build to a Fabric version
 */
export const attachFabricToBuild = <ThrowOnError extends boolean = false>(
  options: Options<AttachFabricToBuildData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AttachFabricToBuildResponse,
    AttachFabricToBuildError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/fabric/{fabric_id}/builds',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all available packs
 */
export const listPacks = <ThrowOnError extends boolean = false>(
  options?: Options<ListPacksData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListPacksResponse,
    ListPacksError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/packs',
    ...options,
  })
}

/**
 * Create a new pack
 */
export const createPack = <ThrowOnError extends boolean = false>(
  options: Options<CreatePackData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreatePackResponse,
    CreatePackError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/packs',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete a specific pack
 */
export const deletePack = <ThrowOnError extends boolean = false>(
  options: Options<DeletePackData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeletePackResponse,
    DeletePackError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/packs/{pack_id}',
    ...options,
  })
}

/**
 * Fetch a specific pack
 */
export const showPack = <ThrowOnError extends boolean = false>(
  options: Options<ShowPackData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ShowPackResponse,
    ShowPackError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/packs/{pack_id}',
    ...options,
  })
}

/**
 * Update a specific pack
 */
export const updatePack = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePackData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdatePackResponse,
    UpdatePackError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/packs/{pack_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete the avatar for the defined pack
 */
export const deletePackAvatar = <ThrowOnError extends boolean = false>(
  options: Options<DeletePackAvatarData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeletePackAvatarResponse,
    DeletePackAvatarError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/packs/{pack_id}/avatar',
    ...options,
  })
}

/**
 * Upload an avatar for the defined pack
 */
export const createPackAvatar = <ThrowOnError extends boolean = false>(
  options: Options<CreatePackAvatarData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreatePackAvatarResponse,
    CreatePackAvatarError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/packs/{pack_id}/avatar',
    ...options,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
  })
}

/**
 * Unlink a user from pack
 */
export const deletePackFromUser = <ThrowOnError extends boolean = false>(
  options: Options<DeletePackFromUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeletePackFromUserResponse,
    DeletePackFromUserError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/packs/{pack_id}/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all users attached to pack
 */
export const listPackUsers = <ThrowOnError extends boolean = false>(
  options: Options<ListPackUsersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListPackUsersResponse,
    ListPackUsersError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/packs/{pack_id}/users',
    ...options,
  })
}

/**
 * Attach a user to pack
 */
export const attachPackToUser = <ThrowOnError extends boolean = false>(
  options: Options<AttachPackToUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AttachPackToUserResponse,
    AttachPackToUserError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/packs/{pack_id}/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Update user perms for pack
 */
export const permitPackUser = <ThrowOnError extends boolean = false>(
  options: Options<PermitPackUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PermitPackUserResponse,
    PermitPackUserError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/packs/{pack_id}/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Unlink a group from pack
 */
export const deletePackFromGroup = <ThrowOnError extends boolean = false>(
  options: Options<DeletePackFromGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeletePackFromGroupResponse,
    DeletePackFromGroupError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/packs/{pack_id}/groups',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all groups attached to pack
 */
export const listPackGroups = <ThrowOnError extends boolean = false>(
  options: Options<ListPackGroupsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListPackGroupsResponse,
    ListPackGroupsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/packs/{pack_id}/groups',
    ...options,
  })
}

/**
 * Attach a group to pack
 */
export const attachPackToGroup = <ThrowOnError extends boolean = false>(
  options: Options<AttachPackToGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AttachPackToGroupResponse,
    AttachPackToGroupError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/packs/{pack_id}/groups',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Update group perms for pack
 */
export const permitPackGroup = <ThrowOnError extends boolean = false>(
  options: Options<PermitPackGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PermitPackGroupResponse,
    PermitPackGroupError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/packs/{pack_id}/groups',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all available builds for a pack
 */
export const listBuilds = <ThrowOnError extends boolean = false>(
  options: Options<ListBuildsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListBuildsResponse,
    ListBuildsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/packs/{pack_id}/builds',
    ...options,
  })
}

/**
 * Create a new build for a pack
 */
export const createBuild = <ThrowOnError extends boolean = false>(
  options: Options<CreateBuildData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateBuildResponse,
    CreateBuildError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/packs/{pack_id}/builds',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete a specific build for a pack
 */
export const deleteBuild = <ThrowOnError extends boolean = false>(
  options: Options<DeleteBuildData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteBuildResponse,
    DeleteBuildError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/packs/{pack_id}/builds/{build_id}',
    ...options,
  })
}

/**
 * Fetch a specific build for a pack
 */
export const showBuild = <ThrowOnError extends boolean = false>(
  options: Options<ShowBuildData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ShowBuildResponse,
    ShowBuildError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/packs/{pack_id}/builds/{build_id}',
    ...options,
  })
}

/**
 * Update a specific build for a pack
 */
export const updateBuild = <ThrowOnError extends boolean = false>(
  options: Options<UpdateBuildData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateBuildResponse,
    UpdateBuildError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/packs/{pack_id}/builds/{build_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Unlink a version from a build
 */
export const deleteBuildFromVersion = <ThrowOnError extends boolean = false>(
  options: Options<DeleteBuildFromVersionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteBuildFromVersionResponse,
    DeleteBuildFromVersionError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/packs/{pack_id}/builds/{build_id}/versions',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all versions attached to build
 */
export const listBuildVersions = <ThrowOnError extends boolean = false>(
  options: Options<ListBuildVersionsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListBuildVersionsResponse,
    ListBuildVersionsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/packs/{pack_id}/builds/{build_id}/versions',
    ...options,
  })
}

/**
 * Attach a version to a build
 */
export const attachBuildToVersion = <ThrowOnError extends boolean = false>(
  options: Options<AttachBuildToVersionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AttachBuildToVersionResponse,
    AttachBuildToVersionError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/packs/{pack_id}/builds/{build_id}/versions',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all available mods
 */
export const listMods = <ThrowOnError extends boolean = false>(
  options?: Options<ListModsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListModsResponse,
    ListModsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/mods',
    ...options,
  })
}

/**
 * Create a new mod
 */
export const createMod = <ThrowOnError extends boolean = false>(
  options: Options<CreateModData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateModResponse,
    CreateModError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/mods',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete a specific mod
 */
export const deleteMod = <ThrowOnError extends boolean = false>(
  options: Options<DeleteModData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteModResponse,
    DeleteModError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/mods/{mod_id}',
    ...options,
  })
}

/**
 * Fetch a specific mod
 */
export const showMod = <ThrowOnError extends boolean = false>(
  options: Options<ShowModData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ShowModResponse,
    ShowModError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/mods/{mod_id}',
    ...options,
  })
}

/**
 * Update a specific mod
 */
export const updateMod = <ThrowOnError extends boolean = false>(
  options: Options<UpdateModData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateModResponse,
    UpdateModError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/mods/{mod_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete the avatar for the defined mod
 */
export const deleteModAvatar = <ThrowOnError extends boolean = false>(
  options: Options<DeleteModAvatarData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteModAvatarResponse,
    DeleteModAvatarError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/mods/{mod_id}/avatar',
    ...options,
  })
}

/**
 * Upload an avatar for the defined mod
 */
export const createModAvatar = <ThrowOnError extends boolean = false>(
  options: Options<CreateModAvatarData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateModAvatarResponse,
    CreateModAvatarError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/mods/{mod_id}/avatar',
    ...options,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
  })
}

/**
 * Unlink a user from mod
 */
export const deleteModFromUser = <ThrowOnError extends boolean = false>(
  options: Options<DeleteModFromUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteModFromUserResponse,
    DeleteModFromUserError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/mods/{mod_id}/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all users attached to mod
 */
export const listModUsers = <ThrowOnError extends boolean = false>(
  options: Options<ListModUsersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListModUsersResponse,
    ListModUsersError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/mods/{mod_id}/users',
    ...options,
  })
}

/**
 * Attach a user to mod
 */
export const attachModToUser = <ThrowOnError extends boolean = false>(
  options: Options<AttachModToUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AttachModToUserResponse,
    AttachModToUserError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/mods/{mod_id}/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Update user perms for mod
 */
export const permitModUser = <ThrowOnError extends boolean = false>(
  options: Options<PermitModUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PermitModUserResponse,
    PermitModUserError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/mods/{mod_id}/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Unlink a group from mod
 */
export const deleteModFromGroup = <ThrowOnError extends boolean = false>(
  options: Options<DeleteModFromGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteModFromGroupResponse,
    DeleteModFromGroupError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/mods/{mod_id}/groups',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all groups attached to mod
 */
export const listModGroups = <ThrowOnError extends boolean = false>(
  options: Options<ListModGroupsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListModGroupsResponse,
    ListModGroupsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/mods/{mod_id}/groups',
    ...options,
  })
}

/**
 * Attach a group to mod
 */
export const attachModToGroup = <ThrowOnError extends boolean = false>(
  options: Options<AttachModToGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AttachModToGroupResponse,
    AttachModToGroupError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/mods/{mod_id}/groups',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Update group perms for mod
 */
export const permitModGroup = <ThrowOnError extends boolean = false>(
  options: Options<PermitModGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PermitModGroupResponse,
    PermitModGroupError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/mods/{mod_id}/groups',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all available versions for a mod
 */
export const listVersions = <ThrowOnError extends boolean = false>(
  options: Options<ListVersionsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListVersionsResponse,
    ListVersionsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/mods/{mod_id}/versions',
    ...options,
  })
}

/**
 * Create a new version for a mod
 */
export const createVersion = <ThrowOnError extends boolean = false>(
  options: Options<CreateVersionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateVersionResponse,
    CreateVersionError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/mods/{mod_id}/versions',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete a specific version for a mod
 */
export const deleteVersion = <ThrowOnError extends boolean = false>(
  options: Options<DeleteVersionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteVersionResponse,
    DeleteVersionError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/mods/{mod_id}/versions/{version_id}',
    ...options,
  })
}

/**
 * Fetch a specific version for a mod
 */
export const showVersion = <ThrowOnError extends boolean = false>(
  options: Options<ShowVersionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ShowVersionResponse,
    ShowVersionError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/mods/{mod_id}/versions/{version_id}',
    ...options,
  })
}

/**
 * Update a specific version for a mod
 */
export const updateVersion = <ThrowOnError extends boolean = false>(
  options: Options<UpdateVersionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateVersionResponse,
    UpdateVersionError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/mods/{mod_id}/versions/{version_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Unlink a build from a version
 */
export const deleteVersionFromBuild = <ThrowOnError extends boolean = false>(
  options: Options<DeleteVersionFromBuildData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteVersionFromBuildResponse,
    DeleteVersionFromBuildError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/mods/{mod_id}/versions/{version_id}/builds',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all builds attached to version
 */
export const listVersionBuilds = <ThrowOnError extends boolean = false>(
  options: Options<ListVersionBuildsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListVersionBuildsResponse,
    ListVersionBuildsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/mods/{mod_id}/versions/{version_id}/builds',
    ...options,
  })
}

/**
 * Attach a build to a version
 */
export const attachVersionToBuild = <ThrowOnError extends boolean = false>(
  options: Options<AttachVersionToBuildData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AttachVersionToBuildResponse,
    AttachVersionToBuildError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/mods/{mod_id}/versions/{version_id}/builds',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all available groups
 */
export const listGroups = <ThrowOnError extends boolean = false>(
  options?: Options<ListGroupsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListGroupsResponse,
    ListGroupsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups',
    ...options,
  })
}

/**
 * Create a new group
 */
export const createGroup = <ThrowOnError extends boolean = false>(
  options: Options<CreateGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateGroupResponse,
    CreateGroupError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete a specific group
 */
export const deleteGroup = <ThrowOnError extends boolean = false>(
  options: Options<DeleteGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteGroupResponse,
    DeleteGroupError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups/{group_id}',
    ...options,
  })
}

/**
 * Fetch a specific group
 */
export const showGroup = <ThrowOnError extends boolean = false>(
  options: Options<ShowGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ShowGroupResponse,
    ShowGroupError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups/{group_id}',
    ...options,
  })
}

/**
 * Update a specific group
 */
export const updateGroup = <ThrowOnError extends boolean = false>(
  options: Options<UpdateGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateGroupResponse,
    UpdateGroupError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups/{group_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Unlink a user from group
 */
export const deleteGroupFromUser = <ThrowOnError extends boolean = false>(
  options: Options<DeleteGroupFromUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteGroupFromUserResponse,
    DeleteGroupFromUserError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups/{group_id}/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all users attached to group
 */
export const listGroupUsers = <ThrowOnError extends boolean = false>(
  options: Options<ListGroupUsersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListGroupUsersResponse,
    ListGroupUsersError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups/{group_id}/users',
    ...options,
  })
}

/**
 * Attach a user to group
 */
export const attachGroupToUser = <ThrowOnError extends boolean = false>(
  options: Options<AttachGroupToUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AttachGroupToUserResponse,
    AttachGroupToUserError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups/{group_id}/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Update user perms for group
 */
export const permitGroupUser = <ThrowOnError extends boolean = false>(
  options: Options<PermitGroupUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PermitGroupUserResponse,
    PermitGroupUserError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups/{group_id}/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Unlink a mod from group
 */
export const deleteGroupFromMod = <ThrowOnError extends boolean = false>(
  options: Options<DeleteGroupFromModData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteGroupFromModResponse,
    DeleteGroupFromModError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups/{group_id}/mods',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all mods attached to group
 */
export const listGroupMods = <ThrowOnError extends boolean = false>(
  options: Options<ListGroupModsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListGroupModsResponse,
    ListGroupModsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups/{group_id}/mods',
    ...options,
  })
}

/**
 * Attach a mod to group
 */
export const attachGroupToMod = <ThrowOnError extends boolean = false>(
  options: Options<AttachGroupToModData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AttachGroupToModResponse,
    AttachGroupToModError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups/{group_id}/mods',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Update mod perms for group
 */
export const permitGroupMod = <ThrowOnError extends boolean = false>(
  options: Options<PermitGroupModData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PermitGroupModResponse,
    PermitGroupModError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups/{group_id}/mods',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Unlink a pack from group
 */
export const deleteGroupFromPack = <ThrowOnError extends boolean = false>(
  options: Options<DeleteGroupFromPackData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteGroupFromPackResponse,
    DeleteGroupFromPackError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups/{group_id}/packs',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all packs attached to group
 */
export const listGroupPacks = <ThrowOnError extends boolean = false>(
  options: Options<ListGroupPacksData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListGroupPacksResponse,
    ListGroupPacksError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups/{group_id}/packs',
    ...options,
  })
}

/**
 * Attach a pack to group
 */
export const attachGroupToPack = <ThrowOnError extends boolean = false>(
  options: Options<AttachGroupToPackData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AttachGroupToPackResponse,
    AttachGroupToPackError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups/{group_id}/packs',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Update pack perms for group
 */
export const permitGroupPack = <ThrowOnError extends boolean = false>(
  options: Options<PermitGroupPackData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PermitGroupPackResponse,
    PermitGroupPackError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/groups/{group_id}/packs',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all available users
 */
export const listUsers = <ThrowOnError extends boolean = false>(
  options?: Options<ListUsersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListUsersResponse,
    ListUsersError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users',
    ...options,
  })
}

/**
 * Create a new user
 */
export const createUser = <ThrowOnError extends boolean = false>(
  options: Options<CreateUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateUserResponse,
    CreateUserError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Delete a specific user
 */
export const deleteUser = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteUserResponse,
    DeleteUserError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users/{user_id}',
    ...options,
  })
}

/**
 * Fetch a specific user
 */
export const showUser = <ThrowOnError extends boolean = false>(
  options: Options<ShowUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ShowUserResponse,
    ShowUserError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users/{user_id}',
    ...options,
  })
}

/**
 * Update a specific user
 */
export const updateUser = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateUserResponse,
    UpdateUserError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users/{user_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Unlink a group from user
 */
export const deleteUserFromGroup = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserFromGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteUserFromGroupResponse,
    DeleteUserFromGroupError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users/{user_id}/groups',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all groups attached to user
 */
export const listUserGroups = <ThrowOnError extends boolean = false>(
  options: Options<ListUserGroupsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListUserGroupsResponse,
    ListUserGroupsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users/{user_id}/groups',
    ...options,
  })
}

/**
 * Attach a group to user
 */
export const attachUserToGroup = <ThrowOnError extends boolean = false>(
  options: Options<AttachUserToGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AttachUserToGroupResponse,
    AttachUserToGroupError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users/{user_id}/groups',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Update group perms for user
 */
export const permitUserGroup = <ThrowOnError extends boolean = false>(
  options: Options<PermitUserGroupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PermitUserGroupResponse,
    PermitUserGroupError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users/{user_id}/groups',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Unlink a mod from user
 */
export const deleteUserFromMod = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserFromModData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteUserFromModResponse,
    DeleteUserFromModError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users/{user_id}/mods',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all mods attached to user
 */
export const listUserMods = <ThrowOnError extends boolean = false>(
  options: Options<ListUserModsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListUserModsResponse,
    ListUserModsError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users/{user_id}/mods',
    ...options,
  })
}

/**
 * Attach a mod to user
 */
export const attachUserToMod = <ThrowOnError extends boolean = false>(
  options: Options<AttachUserToModData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AttachUserToModResponse,
    AttachUserToModError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users/{user_id}/mods',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Update mod perms for user
 */
export const permitUserMod = <ThrowOnError extends boolean = false>(
  options: Options<PermitUserModData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PermitUserModResponse,
    PermitUserModError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users/{user_id}/mods',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Unlink a pack from user
 */
export const deleteUserFromPack = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserFromPackData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteUserFromPackResponse,
    DeleteUserFromPackError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users/{user_id}/packs',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Fetch all packs attached to user
 */
export const listUserPacks = <ThrowOnError extends boolean = false>(
  options: Options<ListUserPacksData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListUserPacksResponse,
    ListUserPacksError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users/{user_id}/packs',
    ...options,
  })
}

/**
 * Attach a pack to user
 */
export const attachUserToPack = <ThrowOnError extends boolean = false>(
  options: Options<AttachUserToPackData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AttachUserToPackResponse,
    AttachUserToPackError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users/{user_id}/packs',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Update pack perms for user
 */
export const permitUserPack = <ThrowOnError extends boolean = false>(
  options: Options<PermitUserPackData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PermitUserPackResponse,
    PermitUserPackError,
    ThrowOnError
  >({
    security: [
      {
        name: 'X-API-Key',
        type: 'apiKey',
      },
      {
        scheme: 'bearer',
        type: 'http',
      },
      {
        scheme: 'basic',
        type: 'http',
      },
    ],
    url: '/users/{user_id}/packs',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

// This file is auto-generated by @hey-api/openapi-ts

export type AuthToken = {
  readonly token: string
  readonly expires_at?: string
}

export type AuthVerify = {
  readonly username: string
  readonly created_at?: string
}

/**
 * Model to represent profile
 */
export type Profile = {
  id?: string
  username?: string
  password?: string
  email?: string
  fullname?: string
  profile?: string
  readonly admin?: boolean
  readonly active?: boolean
  readonly created_at?: string
  readonly updated_at?: string
  readonly auths?: Array<UserAuth>
  readonly groups?: Array<UserGroup>
  readonly mods?: Array<UserMod>
  readonly packs?: Array<UserPack>
}

/**
 * Model to represent minecraft
 */
export type Minecraft = {
  readonly id?: string
  name?: string
  type?: string
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent forge
 */
export type Forge = {
  readonly id?: string
  name?: string
  minecraft?: string
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent neoforge
 */
export type Neoforge = {
  readonly id?: string
  name?: string
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent quilt
 */
export type Quilt = {
  readonly id?: string
  name?: string
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent fabric
 */
export type Fabric = {
  readonly id?: string
  name?: string
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent mod
 */
export type Mod = {
  readonly id?: string
  avatar?: ModAvatar
  slug?: string
  name?: string
  side?: string
  description?: string
  author?: string
  website?: string
  donate?: string
  public?: boolean
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent mod avatar
 */
export type ModAvatar = {
  slug?: string
  url?: string
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent version
 */
export type Version = {
  readonly id?: string
  file?: VersionFile
  mod?: Mod
  name?: string
  public?: boolean
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent version file
 */
export type VersionFile = {
  slug?: string
  content_type?: string
  md5?: string
  path?: string
  url?: string
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent pack
 */
export type Pack = {
  readonly id?: string
  avatar?: PackAvatar
  slug?: string
  name?: string
  website?: string
  public?: boolean
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent pack avatar
 */
export type PackAvatar = {
  slug?: string
  url?: string
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent build
 */
export type Build = {
  readonly id?: string
  pack?: Pack
  minecraft_id?: string
  minecraft?: Minecraft
  forge_id?: string
  forge?: Forge
  neoforge_id?: string
  neoforge?: Neoforge
  quilt_id?: string
  quilt?: Quilt
  fabric_id?: string
  fabric?: Fabric
  name?: string
  java?: string
  memory?: string
  latest?: boolean
  recommended?: boolean
  public?: boolean
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent build version
 */
export type BuildVersion = {
  build_id: string
  build?: Build
  version_id: string
  version?: Version
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent group
 */
export type Group = {
  id?: string
  slug?: string
  name?: string
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent group pack
 */
export type GroupPack = {
  group_id: string
  group?: Group
  pack_id: string
  pack?: Pack
  perm?: 'user' | 'admin' | 'owner'
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent group mod
 */
export type GroupMod = {
  group_id: string
  group?: Group
  mod_id: string
  mod?: Mod
  perm?: 'user' | 'admin' | 'owner'
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent user
 */
export type User = {
  id?: string
  username?: string
  password?: string
  email?: string
  fullname?: string
  profile?: string
  admin?: boolean
  active?: boolean
  readonly created_at?: string
  readonly updated_at?: string
  readonly auths?: Array<UserAuth>
}

/**
 * Model to represent user auth
 */
export type UserAuth = {
  provider?: string
  ref?: string
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent user group
 */
export type UserGroup = {
  user_id: string
  user?: User
  group_id: string
  group?: Group
  perm?: 'owner' | 'user' | 'admin'
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent user pack
 */
export type UserPack = {
  user_id: string
  user?: User
  pack_id: string
  pack?: Pack
  perm?: 'user' | 'admin' | 'owner'
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent user mod
 */
export type UserMod = {
  user_id: string
  user?: User
  mod_id: string
  mod?: Mod
  perm?: 'user' | 'admin' | 'owner'
  readonly created_at?: string
  readonly updated_at?: string
}

/**
 * Model to represent auth provider
 */
export type Provider = {
  readonly name?: string
  readonly driver?: string
  readonly display?: string
  readonly icon?: string
}

/**
 * Generic response for errors and validations
 */
export type Notification = {
  status?: number
  message?: string
  errors?: Array<Validation>
}

/**
 * General structure to show validation errors
 */
export type Validation = {
  field?: string
  message?: string
}

/**
 * Search query
 */
export type SearchQueryParam = string

/**
 * Paging limit
 */
export type PagingLimitParam = number

/**
 * Paging offset
 */
export type PagingOffsetParam = number

/**
 * Sorting column
 */
export type SortColumnParam = string

/**
 * Sorting order
 */
export type SortOrderParam = 'asc' | 'desc'

/**
 * An identifier for the auth provider
 */
export type AuthProviderParam = string

/**
 * Auth state
 */
export type AuthStateParam = string

/**
 * Auth code
 */
export type AuthCodeParam = string

/**
 * A minecraft identifier or slug
 */
export type MinecraftParam = string

/**
 * A forge identifier or slug
 */
export type ForgeParam = string

/**
 * A neoforge identifier or slug
 */
export type NeoforgeParam = string

/**
 * A quilt identifier or slug
 */
export type QuiltParam = string

/**
 * A fabric identifier or slug
 */
export type FabricParam = string

/**
 * A mod identifier or slug
 */
export type ModParam = string

/**
 * A version identifier or slug
 */
export type VersionParam = string

/**
 * A pack identifier or slug
 */
export type PackParam = string

/**
 * A build identifier or slug
 */
export type BuildParam = string

/**
 * A group identifier or slug
 */
export type GroupParam = string

/**
 * A user identifier or slug
 */
export type UserParam = string

/**
 * The redirect token to authenticate
 */
export type RedirectAuthBody = {
  token: string
}

/**
 * The credentials to authenticate
 */
export type LoginAuthBody = {
  username: string
  password: string
}

/**
 * The profile data to update
 */
export type UpdateProfileBody = {
  username?: string
  password?: string
  email?: string
  fullname?: string
}

/**
 * The minecraft build data to create or update
 */
export type MinecraftBuildBody = {
  pack: string
  build: string
}

/**
 * The forge build data to create or update
 */
export type ForgeBuildBody = {
  pack: string
  build: string
}

/**
 * The neoforge build data to create or update
 */
export type NeoforgeBuildBody = {
  pack: string
  build: string
}

/**
 * The quilt build data to create or update
 */
export type QuiltBuildBody = {
  pack: string
  build: string
}

/**
 * The fabric build data to create or update
 */
export type FabricBuildBody = {
  pack: string
  build: string
}

/**
 * The mod data to create
 */
export type CreateModBody = {
  slug?: string
  name?: string
  side?: string
  description?: string
  author?: string
  website?: string
  donate?: string
  public?: boolean
}

/**
 * The mod data to update
 */
export type UpdateModBody = {
  slug?: string
  name?: string
  side?: string
  description?: string
  author?: string
  website?: string
  donate?: string
  public?: boolean
}

/**
 * The mod avatar to upload
 */
export type ModAvatarBody = {
  file?: Blob | File
}

/**
 * The mod user data to permit
 */
export type ModUserPermBody = {
  user: string
  perm: string
}

/**
 * The mod user data to unlink
 */
export type ModUserDropBody = {
  user: string
}

/**
 * The mod group data to permit
 */
export type ModGroupPermBody = {
  group: string
  perm: string
}

/**
 * The mod group data to unlink
 */
export type ModGroupDropBody = {
  group: string
}

/**
 * The version data to create
 */
export type CreateVersionBody = {
  name?: string
  public?: boolean
  upload?: string
}

/**
 * The version data to update
 */
export type UpdateVersionBody = {
  name?: string
  public?: boolean
  upload?: string
}

/**
 * The version build data to create or delete
 */
export type VersionBuildBody = {
  pack: string
  build: string
}

/**
 * The pack data to create
 */
export type CreatePackBody = {
  slug?: string
  name?: string
  website?: string
  public?: boolean
}

/**
 * The pack data to update
 */
export type UpdatePackBody = {
  slug?: string
  name?: string
  website?: string
  public?: boolean
}

/**
 * The pack avatar to upload
 */
export type PackAvatarBody = {
  file?: Blob | File
}

/**
 * The pack user data to permit
 */
export type PackUserPermBody = {
  user: string
  perm: string
}

/**
 * The pack user data to unlink
 */
export type PackUserDropBody = {
  user: string
}

/**
 * The pack group data to permit
 */
export type PackGroupPermBody = {
  group: string
  perm: string
}

/**
 * The pack group data to unlink
 */
export type PackGroupDropBody = {
  group: string
}

/**
 * The build data to create
 */
export type CreateBuildBody = {
  minecraft_id?: string
  forge_id?: string
  neoforge_id?: string
  quilt_id?: string
  fabric_id?: string
  name?: string
  java?: string
  memory?: string
  latest?: boolean
  recommended?: boolean
  public?: boolean
}

/**
 * The build data to update
 */
export type UpdateBuildBody = {
  minecraft_id?: string
  forge_id?: string
  neoforge_id?: string
  quilt_id?: string
  fabric_id?: string
  name?: string
  java?: string
  memory?: string
  latest?: boolean
  recommended?: boolean
  public?: boolean
}

/**
 * The build version data to create or delete
 */
export type BuildVersionBody = {
  mod: string
  version: string
}

/**
 * The group data to create
 */
export type CreateGroupBody = {
  slug?: string
  name?: string
}

/**
 * The group data to update
 */
export type UpdateGroupBody = {
  slug?: string
  name?: string
}

/**
 * The group user data to permit
 */
export type GroupUserPermBody = {
  user: string
  perm: string
}

/**
 * The group user data to unlink
 */
export type GroupUserDropBody = {
  user: string
}

/**
 * The group mod data to permit
 */
export type GroupModPermBody = {
  mod: string
  perm: string
}

/**
 * The group mod data to unlink
 */
export type GroupModDropBody = {
  mod: string
}

/**
 * The group pack data to permit
 */
export type GroupPackPermBody = {
  pack: string
  perm: string
}

/**
 * The group pack data to unlink
 */
export type GroupPackDropBody = {
  pack: string
}

/**
 * The user data to create
 */
export type CreateUserBody = {
  username?: string
  password?: string
  email?: string
  fullname?: string
  admin?: boolean
  active?: boolean
}

/**
 * The user data to update
 */
export type UpdateUserBody = {
  username?: string
  password?: string
  email?: string
  fullname?: string
  admin?: boolean
  active?: boolean
}

/**
 * The user group data to permit
 */
export type UserGroupPermBody = {
  group: string
  perm: string
}

/**
 * The user group data to unlink
 */
export type UserGroupDropBody = {
  group: string
}

/**
 * The user mod data to permit
 */
export type UserModPermBody = {
  mod: string
  perm: string
}

/**
 * The user mod data to unlink
 */
export type UserModDropBody = {
  mod: string
}

/**
 * The user pack data to permit
 */
export type UserPackPermBody = {
  pack: string
  perm: string
}

/**
 * The user pack data to unlink
 */
export type UserPackDropBody = {
  pack: string
}

export type RequestProviderData = {
  body?: never
  path: {
    /**
     * An identifier for the auth provider
     */
    provider: string
  }
  query?: never
  url: '/auth/{provider}/request'
}

export type RequestProviderErrors = {
  /**
   * Provider not found
   */
  404: string
  /**
   * Internal server error
   */
  500: string
}

export type RequestProviderError =
  RequestProviderErrors[keyof RequestProviderErrors]

export type CallbackProviderData = {
  body?: never
  path: {
    /**
     * An identifier for the auth provider
     */
    provider: string
  }
  query?: {
    /**
     * Auth state
     */
    state?: string
    /**
     * Auth code
     */
    code?: string
  }
  url: '/auth/{provider}/callback'
}

export type CallbackProviderErrors = {
  /**
   * Provider not found
   */
  404: string
  /**
   * Failed to initialize provider
   */
  412: string
  /**
   * Internal server error
   */
  500: string
}

export type CallbackProviderError =
  CallbackProviderErrors[keyof CallbackProviderErrors]

export type ListProvidersData = {
  body?: never
  path?: never
  query?: never
  url: '/auth/providers'
}

export type ListProvidersResponses = {
  /**
   * A collection of auth providers
   */
  200: {
    total: number
    providers: Array<Provider>
  }
}

export type ListProvidersResponse =
  ListProvidersResponses[keyof ListProvidersResponses]

export type RedirectAuthData = {
  /**
   * The redirect token to authenticate
   */
  body: RedirectAuthBody
  path?: never
  query?: never
  url: '/auth/redirect'
}

export type RedirectAuthErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * Failed to generate or validate token
   */
  401: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type RedirectAuthError = RedirectAuthErrors[keyof RedirectAuthErrors]

export type RedirectAuthResponses = {
  /**
   * Generated token never expiring
   */
  200: AuthToken
}

export type RedirectAuthResponse =
  RedirectAuthResponses[keyof RedirectAuthResponses]

export type LoginAuthData = {
  /**
   * The credentials to authenticate
   */
  body: LoginAuthBody
  path?: never
  query?: never
  url: '/auth/login'
}

export type LoginAuthErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * Unauthorized with wrong credentials
   */
  401: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type LoginAuthError = LoginAuthErrors[keyof LoginAuthErrors]

export type LoginAuthResponses = {
  /**
   * Generated token with expire date
   */
  200: AuthToken
}

export type LoginAuthResponse = LoginAuthResponses[keyof LoginAuthResponses]

export type RefreshAuthData = {
  body?: never
  path?: never
  query?: never
  url: '/auth/refresh'
}

export type RefreshAuthErrors = {
  /**
   * Failed to generate or validate token
   */
  401: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type RefreshAuthError = RefreshAuthErrors[keyof RefreshAuthErrors]

export type RefreshAuthResponses = {
  /**
   * Refreshed token with expire date
   */
  200: AuthToken
}

export type RefreshAuthResponse =
  RefreshAuthResponses[keyof RefreshAuthResponses]

export type VerifyAuthData = {
  body?: never
  path?: never
  query?: never
  url: '/auth/verify'
}

export type VerifyAuthErrors = {
  /**
   * Failed to generate or validate token
   */
  401: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type VerifyAuthError = VerifyAuthErrors[keyof VerifyAuthErrors]

export type VerifyAuthResponses = {
  /**
   * Metadata of the auth token
   */
  200: AuthVerify
}

export type VerifyAuthResponse = VerifyAuthResponses[keyof VerifyAuthResponses]

export type TokenProfileData = {
  body?: never
  path?: never
  query?: never
  url: '/profile/token'
}

export type TokenProfileErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type TokenProfileError = TokenProfileErrors[keyof TokenProfileErrors]

export type TokenProfileResponses = {
  /**
   * Generated token never expiring
   */
  200: AuthToken
}

export type TokenProfileResponse =
  TokenProfileResponses[keyof TokenProfileResponses]

export type ShowProfileData = {
  body?: never
  path?: never
  query?: never
  url: '/profile/self'
}

export type ShowProfileErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ShowProfileError = ShowProfileErrors[keyof ShowProfileErrors]

export type ShowProfileResponses = {
  /**
   * The current profile details
   */
  200: Profile
}

export type ShowProfileResponse =
  ShowProfileResponses[keyof ShowProfileResponses]

export type UpdateProfileData = {
  /**
   * The profile data to update
   */
  body: UpdateProfileBody
  path?: never
  query?: never
  url: '/profile/self'
}

export type UpdateProfileErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type UpdateProfileError = UpdateProfileErrors[keyof UpdateProfileErrors]

export type UpdateProfileResponses = {
  /**
   * The current profile details
   */
  200: Profile
}

export type UpdateProfileResponse =
  UpdateProfileResponses[keyof UpdateProfileResponses]

export type ListMinecraftsData = {
  body?: never
  path?: never
  query?: {
    /**
     * Search query
     */
    search?: string
  }
  url: '/minecraft'
}

export type ListMinecraftsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListMinecraftsError =
  ListMinecraftsErrors[keyof ListMinecraftsErrors]

export type ListMinecraftsResponses = {
  /**
   * A collection of minecrafts
   */
  200: {
    total: number
    limit: number
    offset: number
    versions: Array<Minecraft>
  }
}

export type ListMinecraftsResponse =
  ListMinecraftsResponses[keyof ListMinecraftsResponses]

export type UpdateMinecraftData = {
  body?: never
  path?: never
  query?: never
  url: '/minecraft'
}

export type UpdateMinecraftErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Some internal server error
   */
  500: Notification
  /**
   * Remote source is nit available
   */
  503: Notification
}

export type UpdateMinecraftError =
  UpdateMinecraftErrors[keyof UpdateMinecraftErrors]

export type UpdateMinecraftResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type UpdateMinecraftResponse =
  UpdateMinecraftResponses[keyof UpdateMinecraftResponses]

export type DeleteMinecraftFromBuildData = {
  /**
   * The minecraft build data to create or update
   */
  body: MinecraftBuildBody
  path: {
    /**
     * A minecraft identifier or slug
     */
    minecraft_id: string
  }
  query?: never
  url: '/minecraft/{minecraft_id}/builds'
}

export type DeleteMinecraftFromBuildErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteMinecraftFromBuildError =
  DeleteMinecraftFromBuildErrors[keyof DeleteMinecraftFromBuildErrors]

export type DeleteMinecraftFromBuildResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteMinecraftFromBuildResponse =
  DeleteMinecraftFromBuildResponses[keyof DeleteMinecraftFromBuildResponses]

export type ListMinecraftBuildsData = {
  body?: never
  path: {
    /**
     * A minecraft identifier or slug
     */
    minecraft_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/minecraft/{minecraft_id}/builds'
}

export type ListMinecraftBuildsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListMinecraftBuildsError =
  ListMinecraftBuildsErrors[keyof ListMinecraftBuildsErrors]

export type ListMinecraftBuildsResponses = {
  /**
   * A collection of minecraft builds
   */
  200: {
    total: number
    limit: number
    offset: number
    minecraft?: Minecraft
    builds: Array<Build>
  }
}

export type ListMinecraftBuildsResponse =
  ListMinecraftBuildsResponses[keyof ListMinecraftBuildsResponses]

export type AttachMinecraftToBuildData = {
  /**
   * The minecraft build data to create or update
   */
  body: MinecraftBuildBody
  path: {
    /**
     * A minecraft identifier or slug
     */
    minecraft_id: string
  }
  query?: never
  url: '/minecraft/{minecraft_id}/builds'
}

export type AttachMinecraftToBuildErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is already attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type AttachMinecraftToBuildError =
  AttachMinecraftToBuildErrors[keyof AttachMinecraftToBuildErrors]

export type AttachMinecraftToBuildResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type AttachMinecraftToBuildResponse =
  AttachMinecraftToBuildResponses[keyof AttachMinecraftToBuildResponses]

export type ListForgesData = {
  body?: never
  path?: never
  query?: {
    /**
     * Search query
     */
    search?: string
  }
  url: '/forge'
}

export type ListForgesErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListForgesError = ListForgesErrors[keyof ListForgesErrors]

export type ListForgesResponses = {
  /**
   * A collection of forges
   */
  200: {
    total: number
    limit: number
    offset: number
    versions: Array<Forge>
  }
}

export type ListForgesResponse = ListForgesResponses[keyof ListForgesResponses]

export type UpdateForgeData = {
  body?: never
  path?: never
  query?: never
  url: '/forge'
}

export type UpdateForgeErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Some internal server error
   */
  500: Notification
  /**
   * Remote source is nit available
   */
  503: Notification
}

export type UpdateForgeError = UpdateForgeErrors[keyof UpdateForgeErrors]

export type UpdateForgeResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type UpdateForgeResponse =
  UpdateForgeResponses[keyof UpdateForgeResponses]

export type DeleteForgeFromBuildData = {
  /**
   * The forge build data to create or update
   */
  body: ForgeBuildBody
  path: {
    /**
     * A forge identifier or slug
     */
    forge_id: string
  }
  query?: never
  url: '/forge/{forge_id}/builds'
}

export type DeleteForgeFromBuildErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteForgeFromBuildError =
  DeleteForgeFromBuildErrors[keyof DeleteForgeFromBuildErrors]

export type DeleteForgeFromBuildResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteForgeFromBuildResponse =
  DeleteForgeFromBuildResponses[keyof DeleteForgeFromBuildResponses]

export type ListForgeBuildsData = {
  body?: never
  path: {
    /**
     * A forge identifier or slug
     */
    forge_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/forge/{forge_id}/builds'
}

export type ListForgeBuildsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListForgeBuildsError =
  ListForgeBuildsErrors[keyof ListForgeBuildsErrors]

export type ListForgeBuildsResponses = {
  /**
   * A collection of forge builds
   */
  200: {
    total: number
    limit: number
    offset: number
    forge?: Forge
    builds: Array<Build>
  }
}

export type ListForgeBuildsResponse =
  ListForgeBuildsResponses[keyof ListForgeBuildsResponses]

export type AttachForgeToBuildData = {
  /**
   * The forge build data to create or update
   */
  body: ForgeBuildBody
  path: {
    /**
     * A forge identifier or slug
     */
    forge_id: string
  }
  query?: never
  url: '/forge/{forge_id}/builds'
}

export type AttachForgeToBuildErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is already attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type AttachForgeToBuildError =
  AttachForgeToBuildErrors[keyof AttachForgeToBuildErrors]

export type AttachForgeToBuildResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type AttachForgeToBuildResponse =
  AttachForgeToBuildResponses[keyof AttachForgeToBuildResponses]

export type ListNeoforgesData = {
  body?: never
  path?: never
  query?: {
    /**
     * Search query
     */
    search?: string
  }
  url: '/neoforge'
}

export type ListNeoforgesErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListNeoforgesError = ListNeoforgesErrors[keyof ListNeoforgesErrors]

export type ListNeoforgesResponses = {
  /**
   * A collection of neoforges
   */
  200: {
    total: number
    limit: number
    offset: number
    versions: Array<Neoforge>
  }
}

export type ListNeoforgesResponse =
  ListNeoforgesResponses[keyof ListNeoforgesResponses]

export type UpdateNeoforgeData = {
  body?: never
  path?: never
  query?: never
  url: '/neoforge'
}

export type UpdateNeoforgeErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Some internal server error
   */
  500: Notification
  /**
   * Remote source is nit available
   */
  503: Notification
}

export type UpdateNeoforgeError =
  UpdateNeoforgeErrors[keyof UpdateNeoforgeErrors]

export type UpdateNeoforgeResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type UpdateNeoforgeResponse =
  UpdateNeoforgeResponses[keyof UpdateNeoforgeResponses]

export type DeleteNeoforgeFromBuildData = {
  /**
   * The neoforge build data to create or update
   */
  body: NeoforgeBuildBody
  path: {
    /**
     * A neoforge identifier or slug
     */
    neoforge_id: string
  }
  query?: never
  url: '/neoforge/{neoforge_id}/builds'
}

export type DeleteNeoforgeFromBuildErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteNeoforgeFromBuildError =
  DeleteNeoforgeFromBuildErrors[keyof DeleteNeoforgeFromBuildErrors]

export type DeleteNeoforgeFromBuildResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteNeoforgeFromBuildResponse =
  DeleteNeoforgeFromBuildResponses[keyof DeleteNeoforgeFromBuildResponses]

export type ListNeoforgeBuildsData = {
  body?: never
  path: {
    /**
     * A neoforge identifier or slug
     */
    neoforge_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/neoforge/{neoforge_id}/builds'
}

export type ListNeoforgeBuildsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListNeoforgeBuildsError =
  ListNeoforgeBuildsErrors[keyof ListNeoforgeBuildsErrors]

export type ListNeoforgeBuildsResponses = {
  /**
   * A collection of neoforge builds
   */
  200: {
    total: number
    limit: number
    offset: number
    neoforge?: Neoforge
    builds: Array<Build>
  }
}

export type ListNeoforgeBuildsResponse =
  ListNeoforgeBuildsResponses[keyof ListNeoforgeBuildsResponses]

export type AttachNeoforgeToBuildData = {
  /**
   * The neoforge build data to create or update
   */
  body: NeoforgeBuildBody
  path: {
    /**
     * A neoforge identifier or slug
     */
    neoforge_id: string
  }
  query?: never
  url: '/neoforge/{neoforge_id}/builds'
}

export type AttachNeoforgeToBuildErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is already attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type AttachNeoforgeToBuildError =
  AttachNeoforgeToBuildErrors[keyof AttachNeoforgeToBuildErrors]

export type AttachNeoforgeToBuildResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type AttachNeoforgeToBuildResponse =
  AttachNeoforgeToBuildResponses[keyof AttachNeoforgeToBuildResponses]

export type ListQuiltsData = {
  body?: never
  path?: never
  query?: {
    /**
     * Search query
     */
    search?: string
  }
  url: '/quilt'
}

export type ListQuiltsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListQuiltsError = ListQuiltsErrors[keyof ListQuiltsErrors]

export type ListQuiltsResponses = {
  /**
   * A collection of quilts
   */
  200: {
    total: number
    limit: number
    offset: number
    versions: Array<Quilt>
  }
}

export type ListQuiltsResponse = ListQuiltsResponses[keyof ListQuiltsResponses]

export type UpdateQuiltData = {
  body?: never
  path?: never
  query?: never
  url: '/quilt'
}

export type UpdateQuiltErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Some internal server error
   */
  500: Notification
  /**
   * Remote source is nit available
   */
  503: Notification
}

export type UpdateQuiltError = UpdateQuiltErrors[keyof UpdateQuiltErrors]

export type UpdateQuiltResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type UpdateQuiltResponse =
  UpdateQuiltResponses[keyof UpdateQuiltResponses]

export type DeleteQuiltFromBuildData = {
  /**
   * The quilt build data to create or update
   */
  body: QuiltBuildBody
  path: {
    /**
     * A quilt identifier or slug
     */
    quilt_id: string
  }
  query?: never
  url: '/quilt/{quilt_id}/builds'
}

export type DeleteQuiltFromBuildErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteQuiltFromBuildError =
  DeleteQuiltFromBuildErrors[keyof DeleteQuiltFromBuildErrors]

export type DeleteQuiltFromBuildResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteQuiltFromBuildResponse =
  DeleteQuiltFromBuildResponses[keyof DeleteQuiltFromBuildResponses]

export type ListQuiltBuildsData = {
  body?: never
  path: {
    /**
     * A quilt identifier or slug
     */
    quilt_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/quilt/{quilt_id}/builds'
}

export type ListQuiltBuildsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListQuiltBuildsError =
  ListQuiltBuildsErrors[keyof ListQuiltBuildsErrors]

export type ListQuiltBuildsResponses = {
  /**
   * A collection of quilt builds
   */
  200: {
    total: number
    limit: number
    offset: number
    quilt?: Quilt
    builds: Array<Build>
  }
}

export type ListQuiltBuildsResponse =
  ListQuiltBuildsResponses[keyof ListQuiltBuildsResponses]

export type AttachQuiltToBuildData = {
  /**
   * The quilt build data to create or update
   */
  body: QuiltBuildBody
  path: {
    /**
     * A quilt identifier or slug
     */
    quilt_id: string
  }
  query?: never
  url: '/quilt/{quilt_id}/builds'
}

export type AttachQuiltToBuildErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is already attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type AttachQuiltToBuildError =
  AttachQuiltToBuildErrors[keyof AttachQuiltToBuildErrors]

export type AttachQuiltToBuildResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type AttachQuiltToBuildResponse =
  AttachQuiltToBuildResponses[keyof AttachQuiltToBuildResponses]

export type ListFabricsData = {
  body?: never
  path?: never
  query?: {
    /**
     * Search query
     */
    search?: string
  }
  url: '/fabric'
}

export type ListFabricsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListFabricsError = ListFabricsErrors[keyof ListFabricsErrors]

export type ListFabricsResponses = {
  /**
   * A collection of fabrics
   */
  200: {
    total: number
    limit: number
    offset: number
    versions: Array<Fabric>
  }
}

export type ListFabricsResponse =
  ListFabricsResponses[keyof ListFabricsResponses]

export type UpdateFabricData = {
  body?: never
  path?: never
  query?: never
  url: '/fabric'
}

export type UpdateFabricErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Some internal server error
   */
  500: Notification
  /**
   * Remote source is nit available
   */
  503: Notification
}

export type UpdateFabricError = UpdateFabricErrors[keyof UpdateFabricErrors]

export type UpdateFabricResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type UpdateFabricResponse =
  UpdateFabricResponses[keyof UpdateFabricResponses]

export type DeleteFabricFromBuildData = {
  /**
   * The fabric build data to create or update
   */
  body: FabricBuildBody
  path: {
    /**
     * A fabric identifier or slug
     */
    fabric_id: string
  }
  query?: never
  url: '/fabric/{fabric_id}/builds'
}

export type DeleteFabricFromBuildErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteFabricFromBuildError =
  DeleteFabricFromBuildErrors[keyof DeleteFabricFromBuildErrors]

export type DeleteFabricFromBuildResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteFabricFromBuildResponse =
  DeleteFabricFromBuildResponses[keyof DeleteFabricFromBuildResponses]

export type ListFabricBuildsData = {
  body?: never
  path: {
    /**
     * A fabric identifier or slug
     */
    fabric_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/fabric/{fabric_id}/builds'
}

export type ListFabricBuildsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListFabricBuildsError =
  ListFabricBuildsErrors[keyof ListFabricBuildsErrors]

export type ListFabricBuildsResponses = {
  /**
   * A collection of fabric builds
   */
  200: {
    total: number
    limit: number
    offset: number
    fabric?: Fabric
    builds: Array<Build>
  }
}

export type ListFabricBuildsResponse =
  ListFabricBuildsResponses[keyof ListFabricBuildsResponses]

export type AttachFabricToBuildData = {
  /**
   * The fabric build data to create or update
   */
  body: FabricBuildBody
  path: {
    /**
     * A fabric identifier or slug
     */
    fabric_id: string
  }
  query?: never
  url: '/fabric/{fabric_id}/builds'
}

export type AttachFabricToBuildErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is already attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type AttachFabricToBuildError =
  AttachFabricToBuildErrors[keyof AttachFabricToBuildErrors]

export type AttachFabricToBuildResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type AttachFabricToBuildResponse =
  AttachFabricToBuildResponses[keyof AttachFabricToBuildResponses]

export type ListPacksData = {
  body?: never
  path?: never
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/packs'
}

export type ListPacksErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListPacksError = ListPacksErrors[keyof ListPacksErrors]

export type ListPacksResponses = {
  /**
   * A collection of packs
   */
  200: {
    total: number
    limit: number
    offset: number
    packs: Array<Pack>
  }
}

export type ListPacksResponse = ListPacksResponses[keyof ListPacksResponses]

export type CreatePackData = {
  /**
   * The pack data to create
   */
  body: CreatePackBody
  path?: never
  query?: never
  url: '/packs'
}

export type CreatePackErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type CreatePackError = CreatePackErrors[keyof CreatePackErrors]

export type CreatePackResponses = {
  /**
   * The details for a pack
   */
  200: Pack
}

export type CreatePackResponse = CreatePackResponses[keyof CreatePackResponses]

export type DeletePackData = {
  body?: never
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string
  }
  query?: never
  url: '/packs/{pack_id}'
}

export type DeletePackErrors = {
  /**
   * Failed to execute action for resource
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeletePackError = DeletePackErrors[keyof DeletePackErrors]

export type DeletePackResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeletePackResponse = DeletePackResponses[keyof DeletePackResponses]

export type ShowPackData = {
  body?: never
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string
  }
  query?: never
  url: '/packs/{pack_id}'
}

export type ShowPackErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ShowPackError = ShowPackErrors[keyof ShowPackErrors]

export type ShowPackResponses = {
  /**
   * The details for a pack
   */
  200: Pack
}

export type ShowPackResponse = ShowPackResponses[keyof ShowPackResponses]

export type UpdatePackData = {
  /**
   * The pack data to update
   */
  body: UpdatePackBody
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string
  }
  query?: never
  url: '/packs/{pack_id}'
}

export type UpdatePackErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type UpdatePackError = UpdatePackErrors[keyof UpdatePackErrors]

export type UpdatePackResponses = {
  /**
   * The details for a pack
   */
  200: Pack
}

export type UpdatePackResponse = UpdatePackResponses[keyof UpdatePackResponses]

export type DeletePackAvatarData = {
  body?: never
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string
  }
  query?: never
  url: '/packs/{pack_id}/avatar'
}

export type DeletePackAvatarErrors = {
  /**
   * Failed to execute action for resource
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeletePackAvatarError =
  DeletePackAvatarErrors[keyof DeletePackAvatarErrors]

export type DeletePackAvatarResponses = {
  /**
   * The details for a pack avatar
   */
  200: PackAvatar
}

export type DeletePackAvatarResponse =
  DeletePackAvatarResponses[keyof DeletePackAvatarResponses]

export type CreatePackAvatarData = {
  /**
   * The pack avatar to upload
   */
  body: PackAvatarBody
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string
  }
  query?: never
  url: '/packs/{pack_id}/avatar'
}

export type CreatePackAvatarErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type CreatePackAvatarError =
  CreatePackAvatarErrors[keyof CreatePackAvatarErrors]

export type CreatePackAvatarResponses = {
  /**
   * The details for a pack avatar
   */
  200: PackAvatar
}

export type CreatePackAvatarResponse =
  CreatePackAvatarResponses[keyof CreatePackAvatarResponses]

export type DeletePackFromUserData = {
  /**
   * The pack user data to unlink
   */
  body: PackUserDropBody
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string
  }
  query?: never
  url: '/packs/{pack_id}/users'
}

export type DeletePackFromUserErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeletePackFromUserError =
  DeletePackFromUserErrors[keyof DeletePackFromUserErrors]

export type DeletePackFromUserResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeletePackFromUserResponse =
  DeletePackFromUserResponses[keyof DeletePackFromUserResponses]

export type ListPackUsersData = {
  body?: never
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/packs/{pack_id}/users'
}

export type ListPackUsersErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListPackUsersError = ListPackUsersErrors[keyof ListPackUsersErrors]

export type ListPackUsersResponses = {
  /**
   * A collection of pack users
   */
  200: {
    total: number
    limit: number
    offset: number
    pack?: Pack
    users: Array<UserPack>
  }
}

export type ListPackUsersResponse =
  ListPackUsersResponses[keyof ListPackUsersResponses]

export type AttachPackToUserData = {
  /**
   * The pack user data to permit
   */
  body: PackUserPermBody
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string
  }
  query?: never
  url: '/packs/{pack_id}/users'
}

export type AttachPackToUserErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is already attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type AttachPackToUserError =
  AttachPackToUserErrors[keyof AttachPackToUserErrors]

export type AttachPackToUserResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type AttachPackToUserResponse =
  AttachPackToUserResponses[keyof AttachPackToUserResponses]

export type PermitPackUserData = {
  /**
   * The pack user data to permit
   */
  body: PackUserPermBody
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string
  }
  query?: never
  url: '/packs/{pack_id}/users'
}

export type PermitPackUserErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type PermitPackUserError =
  PermitPackUserErrors[keyof PermitPackUserErrors]

export type PermitPackUserResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type PermitPackUserResponse =
  PermitPackUserResponses[keyof PermitPackUserResponses]

export type DeletePackFromGroupData = {
  /**
   * The pack group data to unlink
   */
  body: PackGroupDropBody
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string
  }
  query?: never
  url: '/packs/{pack_id}/groups'
}

export type DeletePackFromGroupErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeletePackFromGroupError =
  DeletePackFromGroupErrors[keyof DeletePackFromGroupErrors]

export type DeletePackFromGroupResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeletePackFromGroupResponse =
  DeletePackFromGroupResponses[keyof DeletePackFromGroupResponses]

export type ListPackGroupsData = {
  body?: never
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/packs/{pack_id}/groups'
}

export type ListPackGroupsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListPackGroupsError =
  ListPackGroupsErrors[keyof ListPackGroupsErrors]

export type ListPackGroupsResponses = {
  /**
   * A collection of pack groups
   */
  200: {
    total: number
    limit: number
    offset: number
    pack?: Pack
    groups: Array<GroupPack>
  }
}

export type ListPackGroupsResponse =
  ListPackGroupsResponses[keyof ListPackGroupsResponses]

export type AttachPackToGroupData = {
  /**
   * The pack group data to permit
   */
  body: PackGroupPermBody
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string
  }
  query?: never
  url: '/packs/{pack_id}/groups'
}

export type AttachPackToGroupErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is already attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type AttachPackToGroupError =
  AttachPackToGroupErrors[keyof AttachPackToGroupErrors]

export type AttachPackToGroupResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type AttachPackToGroupResponse =
  AttachPackToGroupResponses[keyof AttachPackToGroupResponses]

export type PermitPackGroupData = {
  /**
   * The pack group data to permit
   */
  body: PackGroupPermBody
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string
  }
  query?: never
  url: '/packs/{pack_id}/groups'
}

export type PermitPackGroupErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type PermitPackGroupError =
  PermitPackGroupErrors[keyof PermitPackGroupErrors]

export type PermitPackGroupResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type PermitPackGroupResponse =
  PermitPackGroupResponses[keyof PermitPackGroupResponses]

export type ListBuildsData = {
  body?: never
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/packs/{pack_id}/builds'
}

export type ListBuildsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListBuildsError = ListBuildsErrors[keyof ListBuildsErrors]

export type ListBuildsResponses = {
  /**
   * A collection of build
   */
  200: {
    total: number
    limit: number
    offset: number
    pack?: Pack
    builds: Array<Build>
  }
}

export type ListBuildsResponse = ListBuildsResponses[keyof ListBuildsResponses]

export type CreateBuildData = {
  /**
   * The build data to create
   */
  body: CreateBuildBody
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string
  }
  query?: never
  url: '/packs/{pack_id}/builds'
}

export type CreateBuildErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type CreateBuildError = CreateBuildErrors[keyof CreateBuildErrors]

export type CreateBuildResponses = {
  /**
   * The details for a build
   */
  200: Build
}

export type CreateBuildResponse =
  CreateBuildResponses[keyof CreateBuildResponses]

export type DeleteBuildData = {
  body?: never
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string
    /**
     * A build identifier or slug
     */
    build_id: string
  }
  query?: never
  url: '/packs/{pack_id}/builds/{build_id}'
}

export type DeleteBuildErrors = {
  /**
   * Failed to execute action for resource
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteBuildError = DeleteBuildErrors[keyof DeleteBuildErrors]

export type DeleteBuildResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteBuildResponse =
  DeleteBuildResponses[keyof DeleteBuildResponses]

export type ShowBuildData = {
  body?: never
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string
    /**
     * A build identifier or slug
     */
    build_id: string
  }
  query?: never
  url: '/packs/{pack_id}/builds/{build_id}'
}

export type ShowBuildErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ShowBuildError = ShowBuildErrors[keyof ShowBuildErrors]

export type ShowBuildResponses = {
  /**
   * The details for a build
   */
  200: Build
}

export type ShowBuildResponse = ShowBuildResponses[keyof ShowBuildResponses]

export type UpdateBuildData = {
  /**
   * The build data to update
   */
  body: UpdateBuildBody
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string
    /**
     * A build identifier or slug
     */
    build_id: string
  }
  query?: never
  url: '/packs/{pack_id}/builds/{build_id}'
}

export type UpdateBuildErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type UpdateBuildError = UpdateBuildErrors[keyof UpdateBuildErrors]

export type UpdateBuildResponses = {
  /**
   * The details for a build
   */
  200: Build
}

export type UpdateBuildResponse =
  UpdateBuildResponses[keyof UpdateBuildResponses]

export type DeleteBuildFromVersionData = {
  /**
   * The build version data to create or delete
   */
  body: BuildVersionBody
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string
    /**
     * A build identifier or slug
     */
    build_id: string
  }
  query?: never
  url: '/packs/{pack_id}/builds/{build_id}/versions'
}

export type DeleteBuildFromVersionErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteBuildFromVersionError =
  DeleteBuildFromVersionErrors[keyof DeleteBuildFromVersionErrors]

export type DeleteBuildFromVersionResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteBuildFromVersionResponse =
  DeleteBuildFromVersionResponses[keyof DeleteBuildFromVersionResponses]

export type ListBuildVersionsData = {
  body?: never
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string
    /**
     * A build identifier or slug
     */
    build_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/packs/{pack_id}/builds/{build_id}/versions'
}

export type ListBuildVersionsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListBuildVersionsError =
  ListBuildVersionsErrors[keyof ListBuildVersionsErrors]

export type ListBuildVersionsResponses = {
  /**
   * A collection of version builds
   */
  200: {
    total: number
    limit: number
    offset: number
    pack?: Pack
    build?: Build
    versions: Array<BuildVersion>
  }
}

export type ListBuildVersionsResponse =
  ListBuildVersionsResponses[keyof ListBuildVersionsResponses]

export type AttachBuildToVersionData = {
  /**
   * The build version data to create or delete
   */
  body: BuildVersionBody
  path: {
    /**
     * A pack identifier or slug
     */
    pack_id: string
    /**
     * A build identifier or slug
     */
    build_id: string
  }
  query?: never
  url: '/packs/{pack_id}/builds/{build_id}/versions'
}

export type AttachBuildToVersionErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is already attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type AttachBuildToVersionError =
  AttachBuildToVersionErrors[keyof AttachBuildToVersionErrors]

export type AttachBuildToVersionResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type AttachBuildToVersionResponse =
  AttachBuildToVersionResponses[keyof AttachBuildToVersionResponses]

export type ListModsData = {
  body?: never
  path?: never
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/mods'
}

export type ListModsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListModsError = ListModsErrors[keyof ListModsErrors]

export type ListModsResponses = {
  /**
   * A collection of mods
   */
  200: {
    total: number
    limit: number
    offset: number
    mods: Array<Mod>
  }
}

export type ListModsResponse = ListModsResponses[keyof ListModsResponses]

export type CreateModData = {
  /**
   * The mod data to create
   */
  body: CreateModBody
  path?: never
  query?: never
  url: '/mods'
}

export type CreateModErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type CreateModError = CreateModErrors[keyof CreateModErrors]

export type CreateModResponses = {
  /**
   * The details for a mod
   */
  200: Mod
}

export type CreateModResponse = CreateModResponses[keyof CreateModResponses]

export type DeleteModData = {
  body?: never
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string
  }
  query?: never
  url: '/mods/{mod_id}'
}

export type DeleteModErrors = {
  /**
   * Failed to execute action for resource
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteModError = DeleteModErrors[keyof DeleteModErrors]

export type DeleteModResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteModResponse = DeleteModResponses[keyof DeleteModResponses]

export type ShowModData = {
  body?: never
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string
  }
  query?: never
  url: '/mods/{mod_id}'
}

export type ShowModErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ShowModError = ShowModErrors[keyof ShowModErrors]

export type ShowModResponses = {
  /**
   * The details for a mod
   */
  200: Mod
}

export type ShowModResponse = ShowModResponses[keyof ShowModResponses]

export type UpdateModData = {
  /**
   * The mod data to update
   */
  body: UpdateModBody
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string
  }
  query?: never
  url: '/mods/{mod_id}'
}

export type UpdateModErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type UpdateModError = UpdateModErrors[keyof UpdateModErrors]

export type UpdateModResponses = {
  /**
   * The details for a mod
   */
  200: Mod
}

export type UpdateModResponse = UpdateModResponses[keyof UpdateModResponses]

export type DeleteModAvatarData = {
  body?: never
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string
  }
  query?: never
  url: '/mods/{mod_id}/avatar'
}

export type DeleteModAvatarErrors = {
  /**
   * Failed to execute action for resource
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteModAvatarError =
  DeleteModAvatarErrors[keyof DeleteModAvatarErrors]

export type DeleteModAvatarResponses = {
  /**
   * The details for a mod avatar
   */
  200: ModAvatar
}

export type DeleteModAvatarResponse =
  DeleteModAvatarResponses[keyof DeleteModAvatarResponses]

export type CreateModAvatarData = {
  /**
   * The mod avatar to upload
   */
  body: ModAvatarBody
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string
  }
  query?: never
  url: '/mods/{mod_id}/avatar'
}

export type CreateModAvatarErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type CreateModAvatarError =
  CreateModAvatarErrors[keyof CreateModAvatarErrors]

export type CreateModAvatarResponses = {
  /**
   * The details for a mod avatar
   */
  200: ModAvatar
}

export type CreateModAvatarResponse =
  CreateModAvatarResponses[keyof CreateModAvatarResponses]

export type DeleteModFromUserData = {
  /**
   * The mod user data to unlink
   */
  body: ModUserDropBody
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string
  }
  query?: never
  url: '/mods/{mod_id}/users'
}

export type DeleteModFromUserErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteModFromUserError =
  DeleteModFromUserErrors[keyof DeleteModFromUserErrors]

export type DeleteModFromUserResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteModFromUserResponse =
  DeleteModFromUserResponses[keyof DeleteModFromUserResponses]

export type ListModUsersData = {
  body?: never
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/mods/{mod_id}/users'
}

export type ListModUsersErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListModUsersError = ListModUsersErrors[keyof ListModUsersErrors]

export type ListModUsersResponses = {
  /**
   * A collection of mod users
   */
  200: {
    total: number
    limit: number
    offset: number
    mod?: Mod
    users: Array<UserMod>
  }
}

export type ListModUsersResponse =
  ListModUsersResponses[keyof ListModUsersResponses]

export type AttachModToUserData = {
  /**
   * The mod user data to permit
   */
  body: ModUserPermBody
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string
  }
  query?: never
  url: '/mods/{mod_id}/users'
}

export type AttachModToUserErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is already attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type AttachModToUserError =
  AttachModToUserErrors[keyof AttachModToUserErrors]

export type AttachModToUserResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type AttachModToUserResponse =
  AttachModToUserResponses[keyof AttachModToUserResponses]

export type PermitModUserData = {
  /**
   * The mod user data to permit
   */
  body: ModUserPermBody
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string
  }
  query?: never
  url: '/mods/{mod_id}/users'
}

export type PermitModUserErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type PermitModUserError = PermitModUserErrors[keyof PermitModUserErrors]

export type PermitModUserResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type PermitModUserResponse =
  PermitModUserResponses[keyof PermitModUserResponses]

export type DeleteModFromGroupData = {
  /**
   * The mod group data to unlink
   */
  body: ModGroupDropBody
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string
  }
  query?: never
  url: '/mods/{mod_id}/groups'
}

export type DeleteModFromGroupErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteModFromGroupError =
  DeleteModFromGroupErrors[keyof DeleteModFromGroupErrors]

export type DeleteModFromGroupResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteModFromGroupResponse =
  DeleteModFromGroupResponses[keyof DeleteModFromGroupResponses]

export type ListModGroupsData = {
  body?: never
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/mods/{mod_id}/groups'
}

export type ListModGroupsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListModGroupsError = ListModGroupsErrors[keyof ListModGroupsErrors]

export type ListModGroupsResponses = {
  /**
   * A collection of mod groups
   */
  200: {
    total: number
    limit: number
    offset: number
    mod?: Mod
    groups: Array<GroupMod>
  }
}

export type ListModGroupsResponse =
  ListModGroupsResponses[keyof ListModGroupsResponses]

export type AttachModToGroupData = {
  /**
   * The mod group data to permit
   */
  body: ModGroupPermBody
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string
  }
  query?: never
  url: '/mods/{mod_id}/groups'
}

export type AttachModToGroupErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is already attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type AttachModToGroupError =
  AttachModToGroupErrors[keyof AttachModToGroupErrors]

export type AttachModToGroupResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type AttachModToGroupResponse =
  AttachModToGroupResponses[keyof AttachModToGroupResponses]

export type PermitModGroupData = {
  /**
   * The mod group data to permit
   */
  body: ModGroupPermBody
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string
  }
  query?: never
  url: '/mods/{mod_id}/groups'
}

export type PermitModGroupErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type PermitModGroupError =
  PermitModGroupErrors[keyof PermitModGroupErrors]

export type PermitModGroupResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type PermitModGroupResponse =
  PermitModGroupResponses[keyof PermitModGroupResponses]

export type ListVersionsData = {
  body?: never
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/mods/{mod_id}/versions'
}

export type ListVersionsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListVersionsError = ListVersionsErrors[keyof ListVersionsErrors]

export type ListVersionsResponses = {
  /**
   * A collection of version
   */
  200: {
    total: number
    limit: number
    offset: number
    mod?: Mod
    versions: Array<Version>
  }
}

export type ListVersionsResponse =
  ListVersionsResponses[keyof ListVersionsResponses]

export type CreateVersionData = {
  /**
   * The version data to create
   */
  body: CreateVersionBody
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string
  }
  query?: never
  url: '/mods/{mod_id}/versions'
}

export type CreateVersionErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type CreateVersionError = CreateVersionErrors[keyof CreateVersionErrors]

export type CreateVersionResponses = {
  /**
   * The details for a version
   */
  200: Version
}

export type CreateVersionResponse =
  CreateVersionResponses[keyof CreateVersionResponses]

export type DeleteVersionData = {
  body?: never
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string
    /**
     * A version identifier or slug
     */
    version_id: string
  }
  query?: never
  url: '/mods/{mod_id}/versions/{version_id}'
}

export type DeleteVersionErrors = {
  /**
   * Failed to execute action for resource
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteVersionError = DeleteVersionErrors[keyof DeleteVersionErrors]

export type DeleteVersionResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteVersionResponse =
  DeleteVersionResponses[keyof DeleteVersionResponses]

export type ShowVersionData = {
  body?: never
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string
    /**
     * A version identifier or slug
     */
    version_id: string
  }
  query?: never
  url: '/mods/{mod_id}/versions/{version_id}'
}

export type ShowVersionErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ShowVersionError = ShowVersionErrors[keyof ShowVersionErrors]

export type ShowVersionResponses = {
  /**
   * The details for a version
   */
  200: Version
}

export type ShowVersionResponse =
  ShowVersionResponses[keyof ShowVersionResponses]

export type UpdateVersionData = {
  /**
   * The version data to update
   */
  body: UpdateVersionBody
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string
    /**
     * A version identifier or slug
     */
    version_id: string
  }
  query?: never
  url: '/mods/{mod_id}/versions/{version_id}'
}

export type UpdateVersionErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type UpdateVersionError = UpdateVersionErrors[keyof UpdateVersionErrors]

export type UpdateVersionResponses = {
  /**
   * The details for a version
   */
  200: Version
}

export type UpdateVersionResponse =
  UpdateVersionResponses[keyof UpdateVersionResponses]

export type DeleteVersionFromBuildData = {
  /**
   * The version build data to create or delete
   */
  body: VersionBuildBody
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string
    /**
     * A version identifier or slug
     */
    version_id: string
  }
  query?: never
  url: '/mods/{mod_id}/versions/{version_id}/builds'
}

export type DeleteVersionFromBuildErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteVersionFromBuildError =
  DeleteVersionFromBuildErrors[keyof DeleteVersionFromBuildErrors]

export type DeleteVersionFromBuildResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteVersionFromBuildResponse =
  DeleteVersionFromBuildResponses[keyof DeleteVersionFromBuildResponses]

export type ListVersionBuildsData = {
  body?: never
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string
    /**
     * A version identifier or slug
     */
    version_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/mods/{mod_id}/versions/{version_id}/builds'
}

export type ListVersionBuildsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListVersionBuildsError =
  ListVersionBuildsErrors[keyof ListVersionBuildsErrors]

export type ListVersionBuildsResponses = {
  /**
   * A collection of version builds
   */
  200: {
    total: number
    limit: number
    offset: number
    mod?: Mod
    version?: Version
    builds: Array<BuildVersion>
  }
}

export type ListVersionBuildsResponse =
  ListVersionBuildsResponses[keyof ListVersionBuildsResponses]

export type AttachVersionToBuildData = {
  /**
   * The version build data to create or delete
   */
  body: VersionBuildBody
  path: {
    /**
     * A mod identifier or slug
     */
    mod_id: string
    /**
     * A version identifier or slug
     */
    version_id: string
  }
  query?: never
  url: '/mods/{mod_id}/versions/{version_id}/builds'
}

export type AttachVersionToBuildErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is already attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type AttachVersionToBuildError =
  AttachVersionToBuildErrors[keyof AttachVersionToBuildErrors]

export type AttachVersionToBuildResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type AttachVersionToBuildResponse =
  AttachVersionToBuildResponses[keyof AttachVersionToBuildResponses]

export type ListGroupsData = {
  body?: never
  path?: never
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/groups'
}

export type ListGroupsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListGroupsError = ListGroupsErrors[keyof ListGroupsErrors]

export type ListGroupsResponses = {
  /**
   * A collection of groups
   */
  200: {
    total: number
    limit: number
    offset: number
    groups: Array<Group>
  }
}

export type ListGroupsResponse = ListGroupsResponses[keyof ListGroupsResponses]

export type CreateGroupData = {
  /**
   * The group data to create
   */
  body: CreateGroupBody
  path?: never
  query?: never
  url: '/groups'
}

export type CreateGroupErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type CreateGroupError = CreateGroupErrors[keyof CreateGroupErrors]

export type CreateGroupResponses = {
  /**
   * The details for a group
   */
  200: Group
}

export type CreateGroupResponse =
  CreateGroupResponses[keyof CreateGroupResponses]

export type DeleteGroupData = {
  body?: never
  path: {
    /**
     * A group identifier or slug
     */
    group_id: string
  }
  query?: never
  url: '/groups/{group_id}'
}

export type DeleteGroupErrors = {
  /**
   * Failed to execute action for resource
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteGroupError = DeleteGroupErrors[keyof DeleteGroupErrors]

export type DeleteGroupResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteGroupResponse =
  DeleteGroupResponses[keyof DeleteGroupResponses]

export type ShowGroupData = {
  body?: never
  path: {
    /**
     * A group identifier or slug
     */
    group_id: string
  }
  query?: never
  url: '/groups/{group_id}'
}

export type ShowGroupErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ShowGroupError = ShowGroupErrors[keyof ShowGroupErrors]

export type ShowGroupResponses = {
  /**
   * The details for a group
   */
  200: Group
}

export type ShowGroupResponse = ShowGroupResponses[keyof ShowGroupResponses]

export type UpdateGroupData = {
  /**
   * The group data to update
   */
  body: UpdateGroupBody
  path: {
    /**
     * A group identifier or slug
     */
    group_id: string
  }
  query?: never
  url: '/groups/{group_id}'
}

export type UpdateGroupErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type UpdateGroupError = UpdateGroupErrors[keyof UpdateGroupErrors]

export type UpdateGroupResponses = {
  /**
   * The details for a group
   */
  200: Group
}

export type UpdateGroupResponse =
  UpdateGroupResponses[keyof UpdateGroupResponses]

export type DeleteGroupFromUserData = {
  /**
   * The group user data to unlink
   */
  body: GroupUserDropBody
  path: {
    /**
     * A group identifier or slug
     */
    group_id: string
  }
  query?: never
  url: '/groups/{group_id}/users'
}

export type DeleteGroupFromUserErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteGroupFromUserError =
  DeleteGroupFromUserErrors[keyof DeleteGroupFromUserErrors]

export type DeleteGroupFromUserResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteGroupFromUserResponse =
  DeleteGroupFromUserResponses[keyof DeleteGroupFromUserResponses]

export type ListGroupUsersData = {
  body?: never
  path: {
    /**
     * A group identifier or slug
     */
    group_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/groups/{group_id}/users'
}

export type ListGroupUsersErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListGroupUsersError =
  ListGroupUsersErrors[keyof ListGroupUsersErrors]

export type ListGroupUsersResponses = {
  /**
   * A collection of group users
   */
  200: {
    total: number
    limit: number
    offset: number
    group?: Group
    users: Array<UserGroup>
  }
}

export type ListGroupUsersResponse =
  ListGroupUsersResponses[keyof ListGroupUsersResponses]

export type AttachGroupToUserData = {
  /**
   * The group user data to permit
   */
  body: GroupUserPermBody
  path: {
    /**
     * A group identifier or slug
     */
    group_id: string
  }
  query?: never
  url: '/groups/{group_id}/users'
}

export type AttachGroupToUserErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is already attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type AttachGroupToUserError =
  AttachGroupToUserErrors[keyof AttachGroupToUserErrors]

export type AttachGroupToUserResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type AttachGroupToUserResponse =
  AttachGroupToUserResponses[keyof AttachGroupToUserResponses]

export type PermitGroupUserData = {
  /**
   * The group user data to permit
   */
  body: GroupUserPermBody
  path: {
    /**
     * A group identifier or slug
     */
    group_id: string
  }
  query?: never
  url: '/groups/{group_id}/users'
}

export type PermitGroupUserErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type PermitGroupUserError =
  PermitGroupUserErrors[keyof PermitGroupUserErrors]

export type PermitGroupUserResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type PermitGroupUserResponse =
  PermitGroupUserResponses[keyof PermitGroupUserResponses]

export type DeleteGroupFromModData = {
  /**
   * The group mod data to unlink
   */
  body: GroupModDropBody
  path: {
    /**
     * A group identifier or slug
     */
    group_id: string
  }
  query?: never
  url: '/groups/{group_id}/mods'
}

export type DeleteGroupFromModErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteGroupFromModError =
  DeleteGroupFromModErrors[keyof DeleteGroupFromModErrors]

export type DeleteGroupFromModResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteGroupFromModResponse =
  DeleteGroupFromModResponses[keyof DeleteGroupFromModResponses]

export type ListGroupModsData = {
  body?: never
  path: {
    /**
     * A group identifier or slug
     */
    group_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/groups/{group_id}/mods'
}

export type ListGroupModsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListGroupModsError = ListGroupModsErrors[keyof ListGroupModsErrors]

export type ListGroupModsResponses = {
  /**
   * A collection of group mods
   */
  200: {
    total: number
    limit: number
    offset: number
    group?: Group
    mods: Array<GroupMod>
  }
}

export type ListGroupModsResponse =
  ListGroupModsResponses[keyof ListGroupModsResponses]

export type AttachGroupToModData = {
  /**
   * The group mod data to permit
   */
  body: GroupModPermBody
  path: {
    /**
     * A group identifier or slug
     */
    group_id: string
  }
  query?: never
  url: '/groups/{group_id}/mods'
}

export type AttachGroupToModErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is already attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type AttachGroupToModError =
  AttachGroupToModErrors[keyof AttachGroupToModErrors]

export type AttachGroupToModResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type AttachGroupToModResponse =
  AttachGroupToModResponses[keyof AttachGroupToModResponses]

export type PermitGroupModData = {
  /**
   * The group mod data to permit
   */
  body: GroupModPermBody
  path: {
    /**
     * A group identifier or slug
     */
    group_id: string
  }
  query?: never
  url: '/groups/{group_id}/mods'
}

export type PermitGroupModErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type PermitGroupModError =
  PermitGroupModErrors[keyof PermitGroupModErrors]

export type PermitGroupModResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type PermitGroupModResponse =
  PermitGroupModResponses[keyof PermitGroupModResponses]

export type DeleteGroupFromPackData = {
  /**
   * The group pack data to unlink
   */
  body: GroupPackDropBody
  path: {
    /**
     * A group identifier or slug
     */
    group_id: string
  }
  query?: never
  url: '/groups/{group_id}/packs'
}

export type DeleteGroupFromPackErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteGroupFromPackError =
  DeleteGroupFromPackErrors[keyof DeleteGroupFromPackErrors]

export type DeleteGroupFromPackResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteGroupFromPackResponse =
  DeleteGroupFromPackResponses[keyof DeleteGroupFromPackResponses]

export type ListGroupPacksData = {
  body?: never
  path: {
    /**
     * A group identifier or slug
     */
    group_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/groups/{group_id}/packs'
}

export type ListGroupPacksErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListGroupPacksError =
  ListGroupPacksErrors[keyof ListGroupPacksErrors]

export type ListGroupPacksResponses = {
  /**
   * A collection of group packs
   */
  200: {
    total: number
    limit: number
    offset: number
    group?: Group
    packs: Array<GroupPack>
  }
}

export type ListGroupPacksResponse =
  ListGroupPacksResponses[keyof ListGroupPacksResponses]

export type AttachGroupToPackData = {
  /**
   * The group pack data to permit
   */
  body: GroupPackPermBody
  path: {
    /**
     * A group identifier or slug
     */
    group_id: string
  }
  query?: never
  url: '/groups/{group_id}/packs'
}

export type AttachGroupToPackErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is already attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type AttachGroupToPackError =
  AttachGroupToPackErrors[keyof AttachGroupToPackErrors]

export type AttachGroupToPackResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type AttachGroupToPackResponse =
  AttachGroupToPackResponses[keyof AttachGroupToPackResponses]

export type PermitGroupPackData = {
  /**
   * The group pack data to permit
   */
  body: GroupPackPermBody
  path: {
    /**
     * A group identifier or slug
     */
    group_id: string
  }
  query?: never
  url: '/groups/{group_id}/packs'
}

export type PermitGroupPackErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type PermitGroupPackError =
  PermitGroupPackErrors[keyof PermitGroupPackErrors]

export type PermitGroupPackResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type PermitGroupPackResponse =
  PermitGroupPackResponses[keyof PermitGroupPackResponses]

export type ListUsersData = {
  body?: never
  path?: never
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/users'
}

export type ListUsersErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListUsersError = ListUsersErrors[keyof ListUsersErrors]

export type ListUsersResponses = {
  /**
   * A collection of users
   */
  200: {
    total: number
    limit: number
    offset: number
    users: Array<User>
  }
}

export type ListUsersResponse = ListUsersResponses[keyof ListUsersResponses]

export type CreateUserData = {
  /**
   * The user data to create
   */
  body: CreateUserBody
  path?: never
  query?: never
  url: '/users'
}

export type CreateUserErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors]

export type CreateUserResponses = {
  /**
   * The details for an user
   */
  200: User
}

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses]

export type DeleteUserData = {
  body?: never
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string
  }
  query?: never
  url: '/users/{user_id}'
}

export type DeleteUserErrors = {
  /**
   * Failed to execute action for resource
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteUserError = DeleteUserErrors[keyof DeleteUserErrors]

export type DeleteUserResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses]

export type ShowUserData = {
  body?: never
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string
  }
  query?: never
  url: '/users/{user_id}'
}

export type ShowUserErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ShowUserError = ShowUserErrors[keyof ShowUserErrors]

export type ShowUserResponses = {
  /**
   * The details for an user
   */
  200: User
}

export type ShowUserResponse = ShowUserResponses[keyof ShowUserResponses]

export type UpdateUserData = {
  /**
   * The user data to update
   */
  body: UpdateUserBody
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string
  }
  query?: never
  url: '/users/{user_id}'
}

export type UpdateUserErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type UpdateUserError = UpdateUserErrors[keyof UpdateUserErrors]

export type UpdateUserResponses = {
  /**
   * The details for an user
   */
  200: User
}

export type UpdateUserResponse = UpdateUserResponses[keyof UpdateUserResponses]

export type DeleteUserFromGroupData = {
  /**
   * The user group data to unlink
   */
  body: UserGroupDropBody
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string
  }
  query?: never
  url: '/users/{user_id}/groups'
}

export type DeleteUserFromGroupErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteUserFromGroupError =
  DeleteUserFromGroupErrors[keyof DeleteUserFromGroupErrors]

export type DeleteUserFromGroupResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteUserFromGroupResponse =
  DeleteUserFromGroupResponses[keyof DeleteUserFromGroupResponses]

export type ListUserGroupsData = {
  body?: never
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/users/{user_id}/groups'
}

export type ListUserGroupsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListUserGroupsError =
  ListUserGroupsErrors[keyof ListUserGroupsErrors]

export type ListUserGroupsResponses = {
  /**
   * A collection of user groups
   */
  200: {
    total: number
    limit: number
    offset: number
    user?: User
    groups: Array<UserGroup>
  }
}

export type ListUserGroupsResponse =
  ListUserGroupsResponses[keyof ListUserGroupsResponses]

export type AttachUserToGroupData = {
  /**
   * The user group data to permit
   */
  body: UserGroupPermBody
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string
  }
  query?: never
  url: '/users/{user_id}/groups'
}

export type AttachUserToGroupErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is already attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type AttachUserToGroupError =
  AttachUserToGroupErrors[keyof AttachUserToGroupErrors]

export type AttachUserToGroupResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type AttachUserToGroupResponse =
  AttachUserToGroupResponses[keyof AttachUserToGroupResponses]

export type PermitUserGroupData = {
  /**
   * The user group data to permit
   */
  body: UserGroupPermBody
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string
  }
  query?: never
  url: '/users/{user_id}/groups'
}

export type PermitUserGroupErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type PermitUserGroupError =
  PermitUserGroupErrors[keyof PermitUserGroupErrors]

export type PermitUserGroupResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type PermitUserGroupResponse =
  PermitUserGroupResponses[keyof PermitUserGroupResponses]

export type DeleteUserFromModData = {
  /**
   * The user mod data to unlink
   */
  body: UserModDropBody
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string
  }
  query?: never
  url: '/users/{user_id}/mods'
}

export type DeleteUserFromModErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteUserFromModError =
  DeleteUserFromModErrors[keyof DeleteUserFromModErrors]

export type DeleteUserFromModResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteUserFromModResponse =
  DeleteUserFromModResponses[keyof DeleteUserFromModResponses]

export type ListUserModsData = {
  body?: never
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/users/{user_id}/mods'
}

export type ListUserModsErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListUserModsError = ListUserModsErrors[keyof ListUserModsErrors]

export type ListUserModsResponses = {
  /**
   * A collection of user mods
   */
  200: {
    total: number
    limit: number
    offset: number
    user?: User
    mods: Array<UserMod>
  }
}

export type ListUserModsResponse =
  ListUserModsResponses[keyof ListUserModsResponses]

export type AttachUserToModData = {
  /**
   * The user mod data to permit
   */
  body: UserModPermBody
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string
  }
  query?: never
  url: '/users/{user_id}/mods'
}

export type AttachUserToModErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is already attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type AttachUserToModError =
  AttachUserToModErrors[keyof AttachUserToModErrors]

export type AttachUserToModResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type AttachUserToModResponse =
  AttachUserToModResponses[keyof AttachUserToModResponses]

export type PermitUserModData = {
  /**
   * The user mod data to permit
   */
  body: UserModPermBody
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string
  }
  query?: never
  url: '/users/{user_id}/mods'
}

export type PermitUserModErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type PermitUserModError = PermitUserModErrors[keyof PermitUserModErrors]

export type PermitUserModResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type PermitUserModResponse =
  PermitUserModResponses[keyof PermitUserModResponses]

export type DeleteUserFromPackData = {
  /**
   * The user pack data to unlink
   */
  body: UserPackDropBody
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string
  }
  query?: never
  url: '/users/{user_id}/packs'
}

export type DeleteUserFromPackErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type DeleteUserFromPackError =
  DeleteUserFromPackErrors[keyof DeleteUserFromPackErrors]

export type DeleteUserFromPackResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type DeleteUserFromPackResponse =
  DeleteUserFromPackResponses[keyof DeleteUserFromPackResponses]

export type ListUserPacksData = {
  body?: never
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string
  }
  query?: {
    /**
     * Search query
     */
    search?: string
    /**
     * Sorting column
     */
    sort?: string
    /**
     * Sorting order
     */
    order?: 'asc' | 'desc'
    /**
     * Paging limit
     */
    limit?: number
    /**
     * Paging offset
     */
    offset?: number
  }
  url: '/users/{user_id}/packs'
}

export type ListUserPacksErrors = {
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type ListUserPacksError = ListUserPacksErrors[keyof ListUserPacksErrors]

export type ListUserPacksResponses = {
  /**
   * A collection of user packs
   */
  200: {
    total: number
    limit: number
    offset: number
    user?: User
    packs: Array<UserPack>
  }
}

export type ListUserPacksResponse =
  ListUserPacksResponses[keyof ListUserPacksResponses]

export type AttachUserToPackData = {
  /**
   * The user pack data to permit
   */
  body: UserPackPermBody
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string
  }
  query?: never
  url: '/users/{user_id}/packs'
}

export type AttachUserToPackErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is already attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type AttachUserToPackError =
  AttachUserToPackErrors[keyof AttachUserToPackErrors]

export type AttachUserToPackResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type AttachUserToPackResponse =
  AttachUserToPackResponses[keyof AttachUserToPackResponses]

export type PermitUserPackData = {
  /**
   * The user pack data to permit
   */
  body: UserPackPermBody
  path: {
    /**
     * A user identifier or slug
     */
    user_id: string
  }
  query?: never
  url: '/users/{user_id}/packs'
}

export type PermitUserPackErrors = {
  /**
   * Failed to parse request
   */
  400: Notification
  /**
   * User is not authorized
   */
  403: Notification
  /**
   * Resource not found
   */
  404: Notification
  /**
   * Resource is not attached
   */
  412: Notification
  /**
   * Failed to validate request
   */
  422: Notification
  /**
   * Some internal server error
   */
  500: Notification
}

export type PermitUserPackError =
  PermitUserPackErrors[keyof PermitUserPackErrors]

export type PermitUserPackResponses = {
  /**
   * Plain success message
   */
  200: Notification
}

export type PermitUserPackResponse =
  PermitUserPackResponses[keyof PermitUserPackResponses]

export type ClientOptions = {
  baseUrl: 'https://try.kleister.eu/api/v1' | (string & {})
}

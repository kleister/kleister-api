// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/builds/repository/repository.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/kleister/kleister-api/pkg/model"
)

// MockBuildsRepository is a mock of BuildsRepository interface.
type MockBuildsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBuildsRepositoryMockRecorder
}

// MockBuildsRepositoryMockRecorder is the mock recorder for MockBuildsRepository.
type MockBuildsRepositoryMockRecorder struct {
	mock *MockBuildsRepository
}

// NewMockBuildsRepository creates a new mock instance.
func NewMockBuildsRepository(ctrl *gomock.Controller) *MockBuildsRepository {
	mock := &MockBuildsRepository{ctrl: ctrl}
	mock.recorder = &MockBuildsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildsRepository) EXPECT() *MockBuildsRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBuildsRepository) Create(arg0 context.Context, arg1 *model.Build) (*model.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*model.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBuildsRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBuildsRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockBuildsRepository) Delete(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBuildsRepositoryMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBuildsRepository)(nil).Delete), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockBuildsRepository) List(arg0 context.Context, arg1 string) ([]*model.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*model.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockBuildsRepositoryMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBuildsRepository)(nil).List), arg0, arg1)
}

// Show mocks base method.
func (m *MockBuildsRepository) Show(arg0 context.Context, arg1, arg2 string) (*model.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Show", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Show indicates an expected call of Show.
func (mr *MockBuildsRepositoryMockRecorder) Show(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Show", reflect.TypeOf((*MockBuildsRepository)(nil).Show), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockBuildsRepository) Update(arg0 context.Context, arg1 *model.Build) (*model.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*model.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockBuildsRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBuildsRepository)(nil).Update), arg0, arg1)
}

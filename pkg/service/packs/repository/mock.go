// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/packs/repository/repository.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/kleister/kleister-api/pkg/model"
)

// MockPacksRepository is a mock of PacksRepository interface.
type MockPacksRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPacksRepositoryMockRecorder
}

// MockPacksRepositoryMockRecorder is the mock recorder for MockPacksRepository.
type MockPacksRepositoryMockRecorder struct {
	mock *MockPacksRepository
}

// NewMockPacksRepository creates a new mock instance.
func NewMockPacksRepository(ctrl *gomock.Controller) *MockPacksRepository {
	mock := &MockPacksRepository{ctrl: ctrl}
	mock.recorder = &MockPacksRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPacksRepository) EXPECT() *MockPacksRepositoryMockRecorder {
	return m.recorder
}

// AttachTeam mocks base method.
func (m *MockPacksRepository) AttachTeam(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachTeam", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachTeam indicates an expected call of AttachTeam.
func (mr *MockPacksRepositoryMockRecorder) AttachTeam(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachTeam", reflect.TypeOf((*MockPacksRepository)(nil).AttachTeam), arg0, arg1, arg2)
}

// AttachUser mocks base method.
func (m *MockPacksRepository) AttachUser(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachUser indicates an expected call of AttachUser.
func (mr *MockPacksRepositoryMockRecorder) AttachUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachUser", reflect.TypeOf((*MockPacksRepository)(nil).AttachUser), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *MockPacksRepository) Create(arg0 context.Context, arg1 *model.Pack) (*model.Pack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*model.Pack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPacksRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPacksRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockPacksRepository) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPacksRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPacksRepository)(nil).Delete), arg0, arg1)
}

// DropTeam mocks base method.
func (m *MockPacksRepository) DropTeam(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropTeam", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropTeam indicates an expected call of DropTeam.
func (mr *MockPacksRepositoryMockRecorder) DropTeam(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropTeam", reflect.TypeOf((*MockPacksRepository)(nil).DropTeam), arg0, arg1, arg2)
}

// DropUser mocks base method.
func (m *MockPacksRepository) DropUser(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropUser indicates an expected call of DropUser.
func (mr *MockPacksRepositoryMockRecorder) DropUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropUser", reflect.TypeOf((*MockPacksRepository)(nil).DropUser), arg0, arg1, arg2)
}

// Exists mocks base method.
func (m *MockPacksRepository) Exists(arg0 context.Context, arg1 string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Exists indicates an expected call of Exists.
func (mr *MockPacksRepositoryMockRecorder) Exists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockPacksRepository)(nil).Exists), arg0, arg1)
}

// List mocks base method.
func (m *MockPacksRepository) List(arg0 context.Context, arg1 string) ([]*model.Pack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*model.Pack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPacksRepositoryMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPacksRepository)(nil).List), arg0, arg1)
}

// ListTeams mocks base method.
func (m *MockPacksRepository) ListTeams(arg0 context.Context, arg1, arg2 string) ([]*model.TeamPack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeams", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.TeamPack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTeams indicates an expected call of ListTeams.
func (mr *MockPacksRepositoryMockRecorder) ListTeams(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeams", reflect.TypeOf((*MockPacksRepository)(nil).ListTeams), arg0, arg1, arg2)
}

// ListUsers mocks base method.
func (m *MockPacksRepository) ListUsers(arg0 context.Context, arg1, arg2 string) ([]*model.UserPack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.UserPack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockPacksRepositoryMockRecorder) ListUsers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockPacksRepository)(nil).ListUsers), arg0, arg1, arg2)
}

// Show mocks base method.
func (m *MockPacksRepository) Show(arg0 context.Context, arg1 string) (*model.Pack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Show", arg0, arg1)
	ret0, _ := ret[0].(*model.Pack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Show indicates an expected call of Show.
func (mr *MockPacksRepositoryMockRecorder) Show(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Show", reflect.TypeOf((*MockPacksRepository)(nil).Show), arg0, arg1)
}

// Update mocks base method.
func (m *MockPacksRepository) Update(arg0 context.Context, arg1 *model.Pack) (*model.Pack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*model.Pack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPacksRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPacksRepository)(nil).Update), arg0, arg1)
}

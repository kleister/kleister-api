// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/forge/repository/repository.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/kleister/kleister-api/pkg/model"
)

// MockForgeRepository is a mock of ForgeRepository interface.
type MockForgeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockForgeRepositoryMockRecorder
}

// MockForgeRepositoryMockRecorder is the mock recorder for MockForgeRepository.
type MockForgeRepositoryMockRecorder struct {
	mock *MockForgeRepository
}

// NewMockForgeRepository creates a new mock instance.
func NewMockForgeRepository(ctrl *gomock.Controller) *MockForgeRepository {
	mock := &MockForgeRepository{ctrl: ctrl}
	mock.recorder = &MockForgeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForgeRepository) EXPECT() *MockForgeRepositoryMockRecorder {
	return m.recorder
}

// ListBuilds mocks base method.
func (m *MockForgeRepository) ListBuilds(arg0 context.Context, arg1, arg2 string) ([]*model.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBuilds", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuilds indicates an expected call of ListBuilds.
func (mr *MockForgeRepositoryMockRecorder) ListBuilds(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuilds", reflect.TypeOf((*MockForgeRepository)(nil).ListBuilds), arg0, arg1, arg2)
}

// Search mocks base method.
func (m *MockForgeRepository) Search(arg0 context.Context, arg1 string) ([]*model.Forge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].([]*model.Forge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockForgeRepositoryMockRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockForgeRepository)(nil).Search), arg0, arg1)
}

// Update mocks base method.
func (m *MockForgeRepository) Update(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockForgeRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockForgeRepository)(nil).Update), arg0)
}

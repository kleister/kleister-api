// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// contextKey provides a type for use with context.WithValue.
type contextKey string

const (
	BasicScopes  contextKey = "Basic.Scopes"
	BearerScopes contextKey = "Bearer.Scopes"
	CookieScopes contextKey = "Cookie.Scopes"
	HeaderScopes contextKey = "Header.Scopes"
)

// Defines values for ModTeamParamsPerm.
const (
	ModTeamParamsPermAdmin ModTeamParamsPerm = "admin"
	ModTeamParamsPermOwner ModTeamParamsPerm = "owner"
	ModTeamParamsPermUser  ModTeamParamsPerm = "user"
)

// Defines values for ModUserParamsPerm.
const (
	ModUserParamsPermAdmin ModUserParamsPerm = "admin"
	ModUserParamsPermOwner ModUserParamsPerm = "owner"
	ModUserParamsPermUser  ModUserParamsPerm = "user"
)

// Defines values for PackTeamParamsPerm.
const (
	PackTeamParamsPermAdmin PackTeamParamsPerm = "admin"
	PackTeamParamsPermOwner PackTeamParamsPerm = "owner"
	PackTeamParamsPermUser  PackTeamParamsPerm = "user"
)

// Defines values for PackUserParamsPerm.
const (
	PackUserParamsPermAdmin PackUserParamsPerm = "admin"
	PackUserParamsPermOwner PackUserParamsPerm = "owner"
	PackUserParamsPermUser  PackUserParamsPerm = "user"
)

// Defines values for TeamModPerm.
const (
	TeamModPermAdmin TeamModPerm = "admin"
	TeamModPermOwner TeamModPerm = "owner"
	TeamModPermUser  TeamModPerm = "user"
)

// Defines values for TeamModParamsPerm.
const (
	TeamModParamsPermAdmin TeamModParamsPerm = "admin"
	TeamModParamsPermOwner TeamModParamsPerm = "owner"
	TeamModParamsPermUser  TeamModParamsPerm = "user"
)

// Defines values for TeamPackPerm.
const (
	TeamPackPermAdmin TeamPackPerm = "admin"
	TeamPackPermOwner TeamPackPerm = "owner"
	TeamPackPermUser  TeamPackPerm = "user"
)

// Defines values for TeamPackParamsPerm.
const (
	TeamPackParamsPermAdmin TeamPackParamsPerm = "admin"
	TeamPackParamsPermOwner TeamPackParamsPerm = "owner"
	TeamPackParamsPermUser  TeamPackParamsPerm = "user"
)

// Defines values for TeamUserParamsPerm.
const (
	TeamUserParamsPermAdmin TeamUserParamsPerm = "admin"
	TeamUserParamsPermOwner TeamUserParamsPerm = "owner"
	TeamUserParamsPermUser  TeamUserParamsPerm = "user"
)

// Defines values for UserModPerm.
const (
	UserModPermAdmin UserModPerm = "admin"
	UserModPermOwner UserModPerm = "owner"
	UserModPermUser  UserModPerm = "user"
)

// Defines values for UserModParamsPerm.
const (
	UserModParamsPermAdmin UserModParamsPerm = "admin"
	UserModParamsPermOwner UserModParamsPerm = "owner"
	UserModParamsPermUser  UserModParamsPerm = "user"
)

// Defines values for UserPackPerm.
const (
	UserPackPermAdmin UserPackPerm = "admin"
	UserPackPermOwner UserPackPerm = "owner"
	UserPackPermUser  UserPackPerm = "user"
)

// Defines values for UserPackParamsPerm.
const (
	UserPackParamsPermAdmin UserPackParamsPerm = "admin"
	UserPackParamsPermOwner UserPackParamsPerm = "owner"
	UserPackParamsPermUser  UserPackParamsPerm = "user"
)

// Defines values for UserTeamPerm.
const (
	UserTeamPermAdmin UserTeamPerm = "admin"
	UserTeamPermOwner UserTeamPerm = "owner"
	UserTeamPermUser  UserTeamPerm = "user"
)

// Defines values for UserTeamParamsPerm.
const (
	UserTeamParamsPermAdmin UserTeamParamsPerm = "admin"
	UserTeamParamsPermOwner UserTeamParamsPerm = "owner"
	UserTeamParamsPermUser  UserTeamParamsPerm = "user"
)

// Defines values for ListFabricBuildsParamsSort.
const (
	ListFabricBuildsParamsSortBuildName   ListFabricBuildsParamsSort = "build_name"
	ListFabricBuildsParamsSortBuildPublic ListFabricBuildsParamsSort = "build_public"
	ListFabricBuildsParamsSortPackName    ListFabricBuildsParamsSort = "pack_name"
	ListFabricBuildsParamsSortPackSlug    ListFabricBuildsParamsSort = "pack_slug"
)

// Defines values for ListFabricBuildsParamsOrder.
const (
	ListFabricBuildsParamsOrderAsc  ListFabricBuildsParamsOrder = "asc"
	ListFabricBuildsParamsOrderDesc ListFabricBuildsParamsOrder = "desc"
)

// Defines values for ListForgeBuildsParamsSort.
const (
	ListForgeBuildsParamsSortBuildName   ListForgeBuildsParamsSort = "build_name"
	ListForgeBuildsParamsSortBuildPublic ListForgeBuildsParamsSort = "build_public"
	ListForgeBuildsParamsSortPackName    ListForgeBuildsParamsSort = "pack_name"
	ListForgeBuildsParamsSortPackSlug    ListForgeBuildsParamsSort = "pack_slug"
)

// Defines values for ListForgeBuildsParamsOrder.
const (
	ListForgeBuildsParamsOrderAsc  ListForgeBuildsParamsOrder = "asc"
	ListForgeBuildsParamsOrderDesc ListForgeBuildsParamsOrder = "desc"
)

// Defines values for ListMinecraftBuildsParamsSort.
const (
	ListMinecraftBuildsParamsSortBuildName   ListMinecraftBuildsParamsSort = "build_name"
	ListMinecraftBuildsParamsSortBuildPublic ListMinecraftBuildsParamsSort = "build_public"
	ListMinecraftBuildsParamsSortPackName    ListMinecraftBuildsParamsSort = "pack_name"
	ListMinecraftBuildsParamsSortPackSlug    ListMinecraftBuildsParamsSort = "pack_slug"
)

// Defines values for ListMinecraftBuildsParamsOrder.
const (
	ListMinecraftBuildsParamsOrderAsc  ListMinecraftBuildsParamsOrder = "asc"
	ListMinecraftBuildsParamsOrderDesc ListMinecraftBuildsParamsOrder = "desc"
)

// Defines values for ListModsParamsSort.
const (
	ListModsParamsSortName   ListModsParamsSort = "name"
	ListModsParamsSortPublic ListModsParamsSort = "public"
	ListModsParamsSortSlug   ListModsParamsSort = "slug"
)

// Defines values for ListModsParamsOrder.
const (
	ListModsParamsOrderAsc  ListModsParamsOrder = "asc"
	ListModsParamsOrderDesc ListModsParamsOrder = "desc"
)

// Defines values for ListModTeamsParamsSort.
const (
	ListModTeamsParamsSortName ListModTeamsParamsSort = "name"
	ListModTeamsParamsSortSlug ListModTeamsParamsSort = "slug"
)

// Defines values for ListModTeamsParamsOrder.
const (
	ListModTeamsParamsOrderAsc  ListModTeamsParamsOrder = "asc"
	ListModTeamsParamsOrderDesc ListModTeamsParamsOrder = "desc"
)

// Defines values for ListModUsersParamsSort.
const (
	ListModUsersParamsSortActive   ListModUsersParamsSort = "active"
	ListModUsersParamsSortAdmin    ListModUsersParamsSort = "admin"
	ListModUsersParamsSortEmail    ListModUsersParamsSort = "email"
	ListModUsersParamsSortFullname ListModUsersParamsSort = "fullname"
	ListModUsersParamsSortUsername ListModUsersParamsSort = "username"
)

// Defines values for ListModUsersParamsOrder.
const (
	ListModUsersParamsOrderAsc  ListModUsersParamsOrder = "asc"
	ListModUsersParamsOrderDesc ListModUsersParamsOrder = "desc"
)

// Defines values for ListVersionsParamsSort.
const (
	ListVersionsParamsSortName   ListVersionsParamsSort = "name"
	ListVersionsParamsSortPublic ListVersionsParamsSort = "public"
)

// Defines values for ListVersionsParamsOrder.
const (
	ListVersionsParamsOrderAsc  ListVersionsParamsOrder = "asc"
	ListVersionsParamsOrderDesc ListVersionsParamsOrder = "desc"
)

// Defines values for ListVersionBuildsParamsSort.
const (
	ListVersionBuildsParamsSortName   ListVersionBuildsParamsSort = "name"
	ListVersionBuildsParamsSortPublic ListVersionBuildsParamsSort = "public"
)

// Defines values for ListVersionBuildsParamsOrder.
const (
	ListVersionBuildsParamsOrderAsc  ListVersionBuildsParamsOrder = "asc"
	ListVersionBuildsParamsOrderDesc ListVersionBuildsParamsOrder = "desc"
)

// Defines values for ListNeoforgeBuildsParamsSort.
const (
	ListNeoforgeBuildsParamsSortBuildName   ListNeoforgeBuildsParamsSort = "build_name"
	ListNeoforgeBuildsParamsSortBuildPublic ListNeoforgeBuildsParamsSort = "build_public"
	ListNeoforgeBuildsParamsSortPackName    ListNeoforgeBuildsParamsSort = "pack_name"
	ListNeoforgeBuildsParamsSortPackSlug    ListNeoforgeBuildsParamsSort = "pack_slug"
)

// Defines values for ListNeoforgeBuildsParamsOrder.
const (
	ListNeoforgeBuildsParamsOrderAsc  ListNeoforgeBuildsParamsOrder = "asc"
	ListNeoforgeBuildsParamsOrderDesc ListNeoforgeBuildsParamsOrder = "desc"
)

// Defines values for ListPacksParamsSort.
const (
	ListPacksParamsSortName   ListPacksParamsSort = "name"
	ListPacksParamsSortPublic ListPacksParamsSort = "public"
	ListPacksParamsSortSlug   ListPacksParamsSort = "slug"
)

// Defines values for ListPacksParamsOrder.
const (
	ListPacksParamsOrderAsc  ListPacksParamsOrder = "asc"
	ListPacksParamsOrderDesc ListPacksParamsOrder = "desc"
)

// Defines values for ListBuildsParamsSort.
const (
	ListBuildsParamsSortName   ListBuildsParamsSort = "name"
	ListBuildsParamsSortPublic ListBuildsParamsSort = "public"
)

// Defines values for ListBuildsParamsOrder.
const (
	ListBuildsParamsOrderAsc  ListBuildsParamsOrder = "asc"
	ListBuildsParamsOrderDesc ListBuildsParamsOrder = "desc"
)

// Defines values for ListBuildVersionsParamsSort.
const (
	ListBuildVersionsParamsSortName   ListBuildVersionsParamsSort = "name"
	ListBuildVersionsParamsSortPublic ListBuildVersionsParamsSort = "public"
)

// Defines values for ListBuildVersionsParamsOrder.
const (
	ListBuildVersionsParamsOrderAsc  ListBuildVersionsParamsOrder = "asc"
	ListBuildVersionsParamsOrderDesc ListBuildVersionsParamsOrder = "desc"
)

// Defines values for ListPackTeamsParamsSort.
const (
	ListPackTeamsParamsSortName ListPackTeamsParamsSort = "name"
	ListPackTeamsParamsSortSlug ListPackTeamsParamsSort = "slug"
)

// Defines values for ListPackTeamsParamsOrder.
const (
	ListPackTeamsParamsOrderAsc  ListPackTeamsParamsOrder = "asc"
	ListPackTeamsParamsOrderDesc ListPackTeamsParamsOrder = "desc"
)

// Defines values for ListPackUsersParamsSort.
const (
	ListPackUsersParamsSortActive   ListPackUsersParamsSort = "active"
	ListPackUsersParamsSortAdmin    ListPackUsersParamsSort = "admin"
	ListPackUsersParamsSortEmail    ListPackUsersParamsSort = "email"
	ListPackUsersParamsSortFullname ListPackUsersParamsSort = "fullname"
	ListPackUsersParamsSortUsername ListPackUsersParamsSort = "username"
)

// Defines values for ListPackUsersParamsOrder.
const (
	ListPackUsersParamsOrderAsc  ListPackUsersParamsOrder = "asc"
	ListPackUsersParamsOrderDesc ListPackUsersParamsOrder = "desc"
)

// Defines values for ListQuiltBuildsParamsSort.
const (
	BuildName   ListQuiltBuildsParamsSort = "build_name"
	BuildPublic ListQuiltBuildsParamsSort = "build_public"
	PackName    ListQuiltBuildsParamsSort = "pack_name"
	PackSlug    ListQuiltBuildsParamsSort = "pack_slug"
)

// Defines values for ListQuiltBuildsParamsOrder.
const (
	ListQuiltBuildsParamsOrderAsc  ListQuiltBuildsParamsOrder = "asc"
	ListQuiltBuildsParamsOrderDesc ListQuiltBuildsParamsOrder = "desc"
)

// Defines values for ListTeamsParamsSort.
const (
	ListTeamsParamsSortName ListTeamsParamsSort = "name"
	ListTeamsParamsSortSlug ListTeamsParamsSort = "slug"
)

// Defines values for ListTeamsParamsOrder.
const (
	ListTeamsParamsOrderAsc  ListTeamsParamsOrder = "asc"
	ListTeamsParamsOrderDesc ListTeamsParamsOrder = "desc"
)

// Defines values for ListTeamModsParamsSort.
const (
	ListTeamModsParamsSortName   ListTeamModsParamsSort = "name"
	ListTeamModsParamsSortPublic ListTeamModsParamsSort = "public"
	ListTeamModsParamsSortSlug   ListTeamModsParamsSort = "slug"
)

// Defines values for ListTeamModsParamsOrder.
const (
	ListTeamModsParamsOrderAsc  ListTeamModsParamsOrder = "asc"
	ListTeamModsParamsOrderDesc ListTeamModsParamsOrder = "desc"
)

// Defines values for ListTeamPacksParamsSort.
const (
	ListTeamPacksParamsSortName   ListTeamPacksParamsSort = "name"
	ListTeamPacksParamsSortPublic ListTeamPacksParamsSort = "public"
	ListTeamPacksParamsSortSlug   ListTeamPacksParamsSort = "slug"
)

// Defines values for ListTeamPacksParamsOrder.
const (
	ListTeamPacksParamsOrderAsc  ListTeamPacksParamsOrder = "asc"
	ListTeamPacksParamsOrderDesc ListTeamPacksParamsOrder = "desc"
)

// Defines values for ListTeamUsersParamsSort.
const (
	ListTeamUsersParamsSortActive   ListTeamUsersParamsSort = "active"
	ListTeamUsersParamsSortAdmin    ListTeamUsersParamsSort = "admin"
	ListTeamUsersParamsSortEmail    ListTeamUsersParamsSort = "email"
	ListTeamUsersParamsSortFullname ListTeamUsersParamsSort = "fullname"
	ListTeamUsersParamsSortUsername ListTeamUsersParamsSort = "username"
)

// Defines values for ListTeamUsersParamsOrder.
const (
	ListTeamUsersParamsOrderAsc  ListTeamUsersParamsOrder = "asc"
	ListTeamUsersParamsOrderDesc ListTeamUsersParamsOrder = "desc"
)

// Defines values for ListUsersParamsSort.
const (
	Active   ListUsersParamsSort = "active"
	Admin    ListUsersParamsSort = "admin"
	Email    ListUsersParamsSort = "email"
	Fullname ListUsersParamsSort = "fullname"
	Username ListUsersParamsSort = "username"
)

// Defines values for ListUsersParamsOrder.
const (
	ListUsersParamsOrderAsc  ListUsersParamsOrder = "asc"
	ListUsersParamsOrderDesc ListUsersParamsOrder = "desc"
)

// Defines values for ListUserModsParamsSort.
const (
	ListUserModsParamsSortName   ListUserModsParamsSort = "name"
	ListUserModsParamsSortPublic ListUserModsParamsSort = "public"
	ListUserModsParamsSortSlug   ListUserModsParamsSort = "slug"
)

// Defines values for ListUserModsParamsOrder.
const (
	ListUserModsParamsOrderAsc  ListUserModsParamsOrder = "asc"
	ListUserModsParamsOrderDesc ListUserModsParamsOrder = "desc"
)

// Defines values for ListUserPacksParamsSort.
const (
	ListUserPacksParamsSortName   ListUserPacksParamsSort = "name"
	ListUserPacksParamsSortPublic ListUserPacksParamsSort = "public"
	ListUserPacksParamsSortSlug   ListUserPacksParamsSort = "slug"
)

// Defines values for ListUserPacksParamsOrder.
const (
	ListUserPacksParamsOrderAsc  ListUserPacksParamsOrder = "asc"
	ListUserPacksParamsOrderDesc ListUserPacksParamsOrder = "desc"
)

// Defines values for ListUserTeamsParamsSort.
const (
	ListUserTeamsParamsSortName ListUserTeamsParamsSort = "name"
	ListUserTeamsParamsSortSlug ListUserTeamsParamsSort = "slug"
)

// Defines values for ListUserTeamsParamsOrder.
const (
	Asc  ListUserTeamsParamsOrder = "asc"
	Desc ListUserTeamsParamsOrder = "desc"
)

// AuthLogin defines model for auth_login.
type AuthLogin struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// AuthToken defines model for auth_token.
type AuthToken struct {
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	Token     *string    `json:"token,omitempty"`
}

// AuthVerify defines model for auth_verify.
type AuthVerify struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Username  *string    `json:"username,omitempty"`
}

// Build Model to represent build
type Build struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Fabric Model to represent fabric
	Fabric   *Fabric `json:"fabric,omitempty"`
	FabricId *string `json:"fabric_id,omitempty"`

	// Forge Model to represent forge
	Forge   *Forge  `json:"forge,omitempty"`
	ForgeId *string `json:"forge_id,omitempty"`
	Id      *string `json:"id,omitempty"`
	Java    *string `json:"java,omitempty"`
	Latest  *bool   `json:"latest,omitempty"`
	Memory  *string `json:"memory,omitempty"`

	// Minecraft Model to represent minecraft
	Minecraft   *Minecraft `json:"minecraft,omitempty"`
	MinecraftId *string    `json:"minecraft_id,omitempty"`
	Name        *string    `json:"name,omitempty"`

	// Neoforge Model to represent neoforge
	Neoforge   *Neoforge `json:"neoforge,omitempty"`
	NeoforgeId *string   `json:"neoforge_id,omitempty"`

	// Pack Model to represent pack
	Pack   *Pack `json:"pack,omitempty"`
	Public *bool `json:"public,omitempty"`

	// Quilt Model to represent quilt
	Quilt       *Quilt     `json:"quilt,omitempty"`
	QuiltId     *string    `json:"quilt_id,omitempty"`
	Recommended *bool      `json:"recommended,omitempty"`
	Slug        *string    `json:"slug,omitempty"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
}

// BuildVersion Model to represent build version
type BuildVersion struct {
	// Build Model to represent build
	Build     *Build     `json:"build,omitempty"`
	BuildId   string     `json:"build_id"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// Version Model to represent version
	Version   *Version `json:"version,omitempty"`
	VersionId string   `json:"version_id"`
}

// BuildVersionParams Parameters to attach or unlink build version
type BuildVersionParams struct {
	Mod     string `json:"mod"`
	Version string `json:"version"`
}

// BuildVersions Model to represent build versions
type BuildVersions struct {
	// Build Model to represent build
	Build *Build `json:"build,omitempty"`

	// Pack Model to represent pack
	Pack     *Pack           `json:"pack,omitempty"`
	Total    *int64          `json:"total,omitempty"`
	Versions *[]BuildVersion `json:"versions,omitempty"`
}

// Builds Model to represent list of builds
type Builds struct {
	Builds *[]Build `json:"builds,omitempty"`

	// Pack Model to represent pack
	Pack  *Pack  `json:"pack,omitempty"`
	Total *int64 `json:"total,omitempty"`
}

// Fabric Model to represent fabric
type Fabric struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id        *string    `json:"id,omitempty"`
	Name      *string    `json:"name,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// FabricBuildParams Model to represent params for fabric builds
type FabricBuildParams struct {
	Build string `json:"build"`
	Pack  string `json:"pack"`
}

// FabricBuilds Model to represent fabric builds
type FabricBuilds struct {
	Builds *[]Build `json:"builds,omitempty"`

	// Fabric Model to represent fabric
	Fabric *Fabric `json:"fabric,omitempty"`
	Total  *int64  `json:"total,omitempty"`
}

// Fabrics Model to represent list of fabrics
type Fabrics struct {
	Total    *int64    `json:"total,omitempty"`
	Versions *[]Fabric `json:"versions,omitempty"`
}

// Forge Model to represent forge
type Forge struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id        *string    `json:"id,omitempty"`
	Minecraft *string    `json:"minecraft,omitempty"`
	Name      *string    `json:"name,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// ForgeBuildParams Model to represent params for forge builds
type ForgeBuildParams struct {
	Build string `json:"build"`
	Pack  string `json:"pack"`
}

// ForgeBuilds Model to represent forge builds
type ForgeBuilds struct {
	Builds *[]Build `json:"builds,omitempty"`

	// Forge Model to represent forge
	Forge *Forge `json:"forge,omitempty"`
	Total *int64 `json:"total,omitempty"`
}

// Forges Model to represent list of forges
type Forges struct {
	Total    *int64   `json:"total,omitempty"`
	Versions *[]Forge `json:"versions,omitempty"`
}

// Minecraft Model to represent minecraft
type Minecraft struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id        *string    `json:"id,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Type      *string    `json:"type,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// MinecraftBuildParams Model to represent params for minecraft builds
type MinecraftBuildParams struct {
	Build string `json:"build"`
	Pack  string `json:"pack"`
}

// MinecraftBuilds Model to represent minecraft builds
type MinecraftBuilds struct {
	Builds *[]Build `json:"builds,omitempty"`

	// Minecraft Model to represent minecraft
	Minecraft *Minecraft `json:"minecraft,omitempty"`
	Total     *int64     `json:"total,omitempty"`
}

// Minecrafts Model to represent list of minecrafts
type Minecrafts struct {
	Total    *int64       `json:"total,omitempty"`
	Versions *[]Minecraft `json:"versions,omitempty"`
}

// Mod Model to represent mod
type Mod struct {
	Author      *string    `json:"author,omitempty"`
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Description *string    `json:"description,omitempty"`
	Donate      *string    `json:"donate,omitempty"`
	Id          *string    `json:"id,omitempty"`
	Name        *string    `json:"name,omitempty"`
	Public      *bool      `json:"public,omitempty"`
	Side        *string    `json:"side,omitempty"`
	Slug        *string    `json:"slug,omitempty"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
	Website     *string    `json:"website,omitempty"`
}

// ModTeamParams Parameters to attach or unlink mod team
type ModTeamParams struct {
	Perm *ModTeamParamsPerm `json:"perm,omitempty"`
	Team string             `json:"team"`
}

// ModTeamParamsPerm defines model for ModTeamParams.Perm.
type ModTeamParamsPerm string

// ModTeams Model to represent mod teams
type ModTeams struct {
	// Mod Model to represent mod
	Mod   *Mod       `json:"mod,omitempty"`
	Teams *[]TeamMod `json:"teams,omitempty"`
	Total *int64     `json:"total,omitempty"`
}

// ModUserParams Parameters to attach or unlink mod user
type ModUserParams struct {
	Perm *ModUserParamsPerm `json:"perm,omitempty"`
	User string             `json:"user"`
}

// ModUserParamsPerm defines model for ModUserParams.Perm.
type ModUserParamsPerm string

// ModUsers Model to represent mod users
type ModUsers struct {
	// Mod Model to represent mod
	Mod   *Mod       `json:"mod,omitempty"`
	Total *int64     `json:"total,omitempty"`
	Users *[]UserMod `json:"users,omitempty"`
}

// Mods Model to represent list of mods
type Mods struct {
	Mods  *[]Mod `json:"mods,omitempty"`
	Total *int64 `json:"total,omitempty"`
}

// Neoforge Model to represent neoforge
type Neoforge struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id        *string    `json:"id,omitempty"`
	Name      *string    `json:"name,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NeoforgeBuildParams Model to represent params for neoforge builds
type NeoforgeBuildParams struct {
	Build string `json:"build"`
	Pack  string `json:"pack"`
}

// NeoforgeBuilds Model to represent neoforge builds
type NeoforgeBuilds struct {
	Builds *[]Build `json:"builds,omitempty"`

	// Neoforge Model to represent neoforge
	Neoforge *Neoforge `json:"neoforge,omitempty"`
	Total    *int64    `json:"total,omitempty"`
}

// Neoforges Model to represent list of neoforges
type Neoforges struct {
	Total    *int64      `json:"total,omitempty"`
	Versions *[]Neoforge `json:"versions,omitempty"`
}

// Notification Generic response for errors and validations
type Notification struct {
	Errors  *[]Validation `json:"errors,omitempty"`
	Message *string       `json:"message,omitempty"`
	Status  *int          `json:"status,omitempty"`
}

// Pack Model to represent pack
type Pack struct {
	// Back Model to represent pack background
	Back      *PackBack  `json:"back,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Icon Model to represent pack icon
	Icon *PackIcon `json:"icon,omitempty"`
	Id   *string   `json:"id,omitempty"`

	// Logo Model to represent pack logo
	Logo      *PackLogo  `json:"logo,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Public    *bool      `json:"public,omitempty"`
	Slug      *string    `json:"slug,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Website   *string    `json:"website,omitempty"`
}

// PackBack Model to represent pack background
type PackBack struct {
	ContentType *string    `json:"content_type,omitempty"`
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Id          *string    `json:"id,omitempty"`
	Md5         *string    `json:"md5,omitempty"`
	Path        *string    `json:"path,omitempty"`
	Slug        *string    `json:"slug,omitempty"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
	Upload      *string    `json:"upload,omitempty"`
	Url         *string    `json:"url,omitempty"`
}

// PackIcon Model to represent pack icon
type PackIcon struct {
	ContentType *string    `json:"content_type,omitempty"`
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Id          *string    `json:"id,omitempty"`
	Md5         *string    `json:"md5,omitempty"`
	Path        *string    `json:"path,omitempty"`
	Slug        *string    `json:"slug,omitempty"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
	Upload      *string    `json:"upload,omitempty"`
	Url         *string    `json:"url,omitempty"`
}

// PackLogo Model to represent pack logo
type PackLogo struct {
	ContentType *string    `json:"content_type,omitempty"`
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Id          *string    `json:"id,omitempty"`
	Md5         *string    `json:"md5,omitempty"`
	Path        *string    `json:"path,omitempty"`
	Slug        *string    `json:"slug,omitempty"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
	Upload      *string    `json:"upload,omitempty"`
	Url         *string    `json:"url,omitempty"`
}

// PackTeamParams Parameters to attach or unlink pack team
type PackTeamParams struct {
	Perm *PackTeamParamsPerm `json:"perm,omitempty"`
	Team string              `json:"team"`
}

// PackTeamParamsPerm defines model for PackTeamParams.Perm.
type PackTeamParamsPerm string

// PackTeams Model to represent pack teams
type PackTeams struct {
	// Pack Model to represent pack
	Pack  *Pack       `json:"pack,omitempty"`
	Teams *[]TeamPack `json:"teams,omitempty"`
	Total *int64      `json:"total,omitempty"`
}

// PackUserParams Parameters to attach or unlink pack user
type PackUserParams struct {
	Perm *PackUserParamsPerm `json:"perm,omitempty"`
	User string              `json:"user"`
}

// PackUserParamsPerm defines model for PackUserParams.Perm.
type PackUserParamsPerm string

// PackUsers Model to represent pack users
type PackUsers struct {
	// Pack Model to represent pack
	Pack  *Pack       `json:"pack,omitempty"`
	Total *int64      `json:"total,omitempty"`
	Users *[]UserPack `json:"users,omitempty"`
}

// Packs Model to represent list of packs
type Packs struct {
	Packs *[]Pack `json:"packs,omitempty"`
	Total *int64  `json:"total,omitempty"`
}

// Profile Model to represent profile
type Profile struct {
	Active    *bool       `json:"active,omitempty"`
	Admin     *bool       `json:"admin,omitempty"`
	Auths     *[]UserAuth `json:"auths,omitempty"`
	CreatedAt *time.Time  `json:"created_at,omitempty"`
	Email     *string     `json:"email,omitempty"`
	Fullname  *string     `json:"fullname,omitempty"`
	Id        *string     `json:"id,omitempty"`
	Mods      *[]UserMod  `json:"mods,omitempty"`
	Packs     *[]UserPack `json:"packs,omitempty"`
	Password  *string     `json:"password,omitempty"`
	Profile   *string     `json:"profile,omitempty"`
	Teams     *[]UserTeam `json:"teams,omitempty"`
	UpdatedAt *time.Time  `json:"updated_at,omitempty"`
	Username  *string     `json:"username,omitempty"`
}

// Provider Model to represent auth provider
type Provider struct {
	Display *string `json:"display,omitempty"`
	Driver  *string `json:"driver,omitempty"`
	Icon    *string `json:"icon,omitempty"`
	Name    *string `json:"name,omitempty"`
}

// Providers Model to represent list of auth providers
type Providers struct {
	Total    *int64      `json:"total,omitempty"`
	Versions *[]Provider `json:"versions,omitempty"`
}

// Quilt Model to represent quilt
type Quilt struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id        *string    `json:"id,omitempty"`
	Name      *string    `json:"name,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// QuiltBuildParams Model to represent params for quilt builds
type QuiltBuildParams struct {
	Build string `json:"build"`
	Pack  string `json:"pack"`
}

// QuiltBuilds Model to represent quilt builds
type QuiltBuilds struct {
	Builds *[]Build `json:"builds,omitempty"`

	// Quilt Model to represent quilt
	Quilt *Quilt `json:"quilt,omitempty"`
	Total *int64 `json:"total,omitempty"`
}

// Quilts Model to represent list of quilts
type Quilts struct {
	Total    *int64   `json:"total,omitempty"`
	Versions *[]Quilt `json:"versions,omitempty"`
}

// Team Model to represent team
type Team struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id        *string    `json:"id,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Slug      *string    `json:"slug,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// TeamMod Model to represent team mod
type TeamMod struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Mod Model to represent mod
	Mod   *Mod         `json:"mod,omitempty"`
	ModId string       `json:"mod_id"`
	Perm  *TeamModPerm `json:"perm,omitempty"`

	// Team Model to represent team
	Team      *Team      `json:"team,omitempty"`
	TeamId    string     `json:"team_id"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// TeamModPerm defines model for TeamMod.Perm.
type TeamModPerm string

// TeamModParams Parameters to attach or unlink team mod
type TeamModParams struct {
	Mod  string             `json:"mod"`
	Perm *TeamModParamsPerm `json:"perm,omitempty"`
}

// TeamModParamsPerm defines model for TeamModParams.Perm.
type TeamModParamsPerm string

// TeamMods Model to represent team mods
type TeamMods struct {
	Mods *[]TeamMod `json:"mods,omitempty"`

	// Team Model to represent team
	Team  *Team  `json:"team,omitempty"`
	Total *int64 `json:"total,omitempty"`
}

// TeamPack Model to represent team pack
type TeamPack struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Pack Model to represent pack
	Pack   *Pack         `json:"pack,omitempty"`
	PackId string        `json:"pack_id"`
	Perm   *TeamPackPerm `json:"perm,omitempty"`

	// Team Model to represent team
	Team      *Team      `json:"team,omitempty"`
	TeamId    string     `json:"team_id"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// TeamPackPerm defines model for TeamPack.Perm.
type TeamPackPerm string

// TeamPackParams Parameters to attach or unlink team pack
type TeamPackParams struct {
	Pack string              `json:"pack"`
	Perm *TeamPackParamsPerm `json:"perm,omitempty"`
}

// TeamPackParamsPerm defines model for TeamPackParams.Perm.
type TeamPackParamsPerm string

// TeamPacks Model to represent team packs
type TeamPacks struct {
	Packs *[]TeamPack `json:"packs,omitempty"`

	// Team Model to represent team
	Team  *Team  `json:"team,omitempty"`
	Total *int64 `json:"total,omitempty"`
}

// TeamUserParams Parameters to attach or unlink team user
type TeamUserParams struct {
	Perm *TeamUserParamsPerm `json:"perm,omitempty"`
	User string              `json:"user"`
}

// TeamUserParamsPerm defines model for TeamUserParams.Perm.
type TeamUserParamsPerm string

// TeamUsers Model to represent team users
type TeamUsers struct {
	// Team Model to represent team
	Team  *Team       `json:"team,omitempty"`
	Total *int64      `json:"total,omitempty"`
	Users *[]UserTeam `json:"users,omitempty"`
}

// Teams Model to represent list of teams
type Teams struct {
	Teams *[]Team `json:"teams,omitempty"`
	Total *int64  `json:"total,omitempty"`
}

// User Model to represent user
type User struct {
	Active    *bool       `json:"active,omitempty"`
	Admin     *bool       `json:"admin,omitempty"`
	Auths     *[]UserAuth `json:"auths,omitempty"`
	CreatedAt *time.Time  `json:"created_at,omitempty"`
	Email     *string     `json:"email,omitempty"`
	Fullname  *string     `json:"fullname,omitempty"`
	Id        *string     `json:"id,omitempty"`
	Password  *string     `json:"password,omitempty"`
	Profile   *string     `json:"profile,omitempty"`
	UpdatedAt *time.Time  `json:"updated_at,omitempty"`
	Username  *string     `json:"username,omitempty"`
}

// UserAuth Model to represent user auth
type UserAuth struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Provider  *string    `json:"provider,omitempty"`
	Ref       *string    `json:"ref,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// UserMod Model to represent user mod
type UserMod struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Mod Model to represent mod
	Mod       *Mod         `json:"mod,omitempty"`
	ModId     string       `json:"mod_id"`
	Perm      *UserModPerm `json:"perm,omitempty"`
	UpdatedAt *time.Time   `json:"updated_at,omitempty"`

	// User Model to represent user
	User   *User  `json:"user,omitempty"`
	UserId string `json:"user_id"`
}

// UserModPerm defines model for UserMod.Perm.
type UserModPerm string

// UserModParams Parameters to attach or unlink user mod
type UserModParams struct {
	Mod  string             `json:"mod"`
	Perm *UserModParamsPerm `json:"perm,omitempty"`
}

// UserModParamsPerm defines model for UserModParams.Perm.
type UserModParamsPerm string

// UserMods Model to represent user mods
type UserMods struct {
	Mods  *[]UserMod `json:"mods,omitempty"`
	Total *int64     `json:"total,omitempty"`

	// User Model to represent user
	User *User `json:"user,omitempty"`
}

// UserPack Model to represent user pack
type UserPack struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Pack Model to represent pack
	Pack      *Pack         `json:"pack,omitempty"`
	PackId    string        `json:"pack_id"`
	Perm      *UserPackPerm `json:"perm,omitempty"`
	UpdatedAt *time.Time    `json:"updated_at,omitempty"`

	// User Model to represent user
	User   *User  `json:"user,omitempty"`
	UserId string `json:"user_id"`
}

// UserPackPerm defines model for UserPack.Perm.
type UserPackPerm string

// UserPackParams Parameters to attach or unlink user pack
type UserPackParams struct {
	Pack string              `json:"pack"`
	Perm *UserPackParamsPerm `json:"perm,omitempty"`
}

// UserPackParamsPerm defines model for UserPackParams.Perm.
type UserPackParamsPerm string

// UserPacks Model to represent user packs
type UserPacks struct {
	Packs *[]UserPack `json:"packs,omitempty"`
	Total *int64      `json:"total,omitempty"`

	// User Model to represent user
	User *User `json:"user,omitempty"`
}

// UserTeam Model to represent user team
type UserTeam struct {
	CreatedAt *time.Time    `json:"created_at,omitempty"`
	Perm      *UserTeamPerm `json:"perm,omitempty"`

	// Team Model to represent team
	Team      *Team      `json:"team,omitempty"`
	TeamId    string     `json:"team_id"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// User Model to represent user
	User   *User  `json:"user,omitempty"`
	UserId string `json:"user_id"`
}

// UserTeamPerm defines model for UserTeam.Perm.
type UserTeamPerm string

// UserTeamParams Parameters to attach or unlink user team
type UserTeamParams struct {
	Perm *UserTeamParamsPerm `json:"perm,omitempty"`
	Team string              `json:"team"`
}

// UserTeamParamsPerm defines model for UserTeamParams.Perm.
type UserTeamParamsPerm string

// UserTeams Model to represent user teams
type UserTeams struct {
	Teams *[]UserTeam `json:"teams,omitempty"`
	Total *int64      `json:"total,omitempty"`

	// User Model to represent user
	User *User `json:"user,omitempty"`
}

// Users Model to represent list of users
type Users struct {
	Total *int64  `json:"total,omitempty"`
	Users *[]User `json:"users,omitempty"`
}

// Validation General structure to show validation errors
type Validation struct {
	Field   *string `json:"field,omitempty"`
	Message *string `json:"message,omitempty"`
}

// Version Model to represent version
type Version struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// File Model to represent version file
	File *VersionFile `json:"file,omitempty"`
	Id   *string      `json:"id,omitempty"`

	// Mod Model to represent mod
	Mod       *Mod       `json:"mod,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Public    *bool      `json:"public,omitempty"`
	Slug      *string    `json:"slug,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// VersionBuildParams Parameters to attach or unlink version build
type VersionBuildParams struct {
	Build string `json:"build"`
	Pack  string `json:"pack"`
}

// VersionBuilds Model to represent version builds
type VersionBuilds struct {
	Builds *[]BuildVersion `json:"builds,omitempty"`

	// Mod Model to represent mod
	Mod   *Mod   `json:"mod,omitempty"`
	Total *int64 `json:"total,omitempty"`

	// Version Model to represent version
	Version *Version `json:"version,omitempty"`
}

// VersionFile Model to represent version file
type VersionFile struct {
	ContentType *string    `json:"content_type,omitempty"`
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	Id          *string    `json:"id,omitempty"`
	Md5         *string    `json:"md5,omitempty"`
	Path        *string    `json:"path,omitempty"`
	Slug        *string    `json:"slug,omitempty"`
	UpdatedAt   *time.Time `json:"updated_at,omitempty"`
	Upload      *string    `json:"upload,omitempty"`
	Url         *string    `json:"url,omitempty"`
}

// Versions Model to represent list of versions
type Versions struct {
	// Mod Model to represent mod
	Mod      *Mod       `json:"mod,omitempty"`
	Total    *int64     `json:"total,omitempty"`
	Versions *[]Version `json:"versions,omitempty"`
}

// ExternalCallbackParams defines parameters for ExternalCallback.
type ExternalCallbackParams struct {
	// State Auth state
	State *string `form:"state,omitempty" json:"state,omitempty"`

	// Code Auth code
	Code *string `form:"code,omitempty" json:"code,omitempty"`
}

// ExternalInitializeParams defines parameters for ExternalInitialize.
type ExternalInitializeParams struct {
	// State Auth state
	State *string `form:"state,omitempty" json:"state,omitempty"`
}

// ListFabricsParams defines parameters for ListFabrics.
type ListFabricsParams struct {
	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// ListFabricBuildsParams defines parameters for ListFabricBuilds.
type ListFabricBuildsParams struct {
	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *ListFabricBuildsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListFabricBuildsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListFabricBuildsParamsSort defines parameters for ListFabricBuilds.
type ListFabricBuildsParamsSort string

// ListFabricBuildsParamsOrder defines parameters for ListFabricBuilds.
type ListFabricBuildsParamsOrder string

// ListForgesParams defines parameters for ListForges.
type ListForgesParams struct {
	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// ListForgeBuildsParams defines parameters for ListForgeBuilds.
type ListForgeBuildsParams struct {
	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *ListForgeBuildsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListForgeBuildsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListForgeBuildsParamsSort defines parameters for ListForgeBuilds.
type ListForgeBuildsParamsSort string

// ListForgeBuildsParamsOrder defines parameters for ListForgeBuilds.
type ListForgeBuildsParamsOrder string

// ListMinecraftsParams defines parameters for ListMinecrafts.
type ListMinecraftsParams struct {
	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// ListMinecraftBuildsParams defines parameters for ListMinecraftBuilds.
type ListMinecraftBuildsParams struct {
	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *ListMinecraftBuildsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListMinecraftBuildsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListMinecraftBuildsParamsSort defines parameters for ListMinecraftBuilds.
type ListMinecraftBuildsParamsSort string

// ListMinecraftBuildsParamsOrder defines parameters for ListMinecraftBuilds.
type ListMinecraftBuildsParamsOrder string

// ListModsParams defines parameters for ListMods.
type ListModsParams struct {
	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *ListModsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListModsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListModsParamsSort defines parameters for ListMods.
type ListModsParamsSort string

// ListModsParamsOrder defines parameters for ListMods.
type ListModsParamsOrder string

// ListModTeamsParams defines parameters for ListModTeams.
type ListModTeamsParams struct {
	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *ListModTeamsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListModTeamsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListModTeamsParamsSort defines parameters for ListModTeams.
type ListModTeamsParamsSort string

// ListModTeamsParamsOrder defines parameters for ListModTeams.
type ListModTeamsParamsOrder string

// ListModUsersParams defines parameters for ListModUsers.
type ListModUsersParams struct {
	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *ListModUsersParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListModUsersParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListModUsersParamsSort defines parameters for ListModUsers.
type ListModUsersParamsSort string

// ListModUsersParamsOrder defines parameters for ListModUsers.
type ListModUsersParamsOrder string

// ListVersionsParams defines parameters for ListVersions.
type ListVersionsParams struct {
	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *ListVersionsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListVersionsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListVersionsParamsSort defines parameters for ListVersions.
type ListVersionsParamsSort string

// ListVersionsParamsOrder defines parameters for ListVersions.
type ListVersionsParamsOrder string

// ListVersionBuildsParams defines parameters for ListVersionBuilds.
type ListVersionBuildsParams struct {
	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *ListVersionBuildsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListVersionBuildsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListVersionBuildsParamsSort defines parameters for ListVersionBuilds.
type ListVersionBuildsParamsSort string

// ListVersionBuildsParamsOrder defines parameters for ListVersionBuilds.
type ListVersionBuildsParamsOrder string

// ListNeoforgesParams defines parameters for ListNeoforges.
type ListNeoforgesParams struct {
	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// ListNeoforgeBuildsParams defines parameters for ListNeoforgeBuilds.
type ListNeoforgeBuildsParams struct {
	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *ListNeoforgeBuildsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListNeoforgeBuildsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListNeoforgeBuildsParamsSort defines parameters for ListNeoforgeBuilds.
type ListNeoforgeBuildsParamsSort string

// ListNeoforgeBuildsParamsOrder defines parameters for ListNeoforgeBuilds.
type ListNeoforgeBuildsParamsOrder string

// ListPacksParams defines parameters for ListPacks.
type ListPacksParams struct {
	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *ListPacksParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListPacksParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListPacksParamsSort defines parameters for ListPacks.
type ListPacksParamsSort string

// ListPacksParamsOrder defines parameters for ListPacks.
type ListPacksParamsOrder string

// ListBuildsParams defines parameters for ListBuilds.
type ListBuildsParams struct {
	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *ListBuildsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListBuildsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListBuildsParamsSort defines parameters for ListBuilds.
type ListBuildsParamsSort string

// ListBuildsParamsOrder defines parameters for ListBuilds.
type ListBuildsParamsOrder string

// ListBuildVersionsParams defines parameters for ListBuildVersions.
type ListBuildVersionsParams struct {
	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *ListBuildVersionsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListBuildVersionsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListBuildVersionsParamsSort defines parameters for ListBuildVersions.
type ListBuildVersionsParamsSort string

// ListBuildVersionsParamsOrder defines parameters for ListBuildVersions.
type ListBuildVersionsParamsOrder string

// ListPackTeamsParams defines parameters for ListPackTeams.
type ListPackTeamsParams struct {
	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *ListPackTeamsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListPackTeamsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListPackTeamsParamsSort defines parameters for ListPackTeams.
type ListPackTeamsParamsSort string

// ListPackTeamsParamsOrder defines parameters for ListPackTeams.
type ListPackTeamsParamsOrder string

// ListPackUsersParams defines parameters for ListPackUsers.
type ListPackUsersParams struct {
	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *ListPackUsersParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListPackUsersParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListPackUsersParamsSort defines parameters for ListPackUsers.
type ListPackUsersParamsSort string

// ListPackUsersParamsOrder defines parameters for ListPackUsers.
type ListPackUsersParamsOrder string

// ListQuiltsParams defines parameters for ListQuilts.
type ListQuiltsParams struct {
	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// ListQuiltBuildsParams defines parameters for ListQuiltBuilds.
type ListQuiltBuildsParams struct {
	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *ListQuiltBuildsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListQuiltBuildsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListQuiltBuildsParamsSort defines parameters for ListQuiltBuilds.
type ListQuiltBuildsParamsSort string

// ListQuiltBuildsParamsOrder defines parameters for ListQuiltBuilds.
type ListQuiltBuildsParamsOrder string

// ListTeamsParams defines parameters for ListTeams.
type ListTeamsParams struct {
	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *ListTeamsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListTeamsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListTeamsParamsSort defines parameters for ListTeams.
type ListTeamsParamsSort string

// ListTeamsParamsOrder defines parameters for ListTeams.
type ListTeamsParamsOrder string

// ListTeamModsParams defines parameters for ListTeamMods.
type ListTeamModsParams struct {
	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *ListTeamModsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListTeamModsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListTeamModsParamsSort defines parameters for ListTeamMods.
type ListTeamModsParamsSort string

// ListTeamModsParamsOrder defines parameters for ListTeamMods.
type ListTeamModsParamsOrder string

// ListTeamPacksParams defines parameters for ListTeamPacks.
type ListTeamPacksParams struct {
	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *ListTeamPacksParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListTeamPacksParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListTeamPacksParamsSort defines parameters for ListTeamPacks.
type ListTeamPacksParamsSort string

// ListTeamPacksParamsOrder defines parameters for ListTeamPacks.
type ListTeamPacksParamsOrder string

// ListTeamUsersParams defines parameters for ListTeamUsers.
type ListTeamUsersParams struct {
	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *ListTeamUsersParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListTeamUsersParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListTeamUsersParamsSort defines parameters for ListTeamUsers.
type ListTeamUsersParamsSort string

// ListTeamUsersParamsOrder defines parameters for ListTeamUsers.
type ListTeamUsersParamsOrder string

// ListUsersParams defines parameters for ListUsers.
type ListUsersParams struct {
	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *ListUsersParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListUsersParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListUsersParamsSort defines parameters for ListUsers.
type ListUsersParamsSort string

// ListUsersParamsOrder defines parameters for ListUsers.
type ListUsersParamsOrder string

// ListUserModsParams defines parameters for ListUserMods.
type ListUserModsParams struct {
	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *ListUserModsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListUserModsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListUserModsParamsSort defines parameters for ListUserMods.
type ListUserModsParamsSort string

// ListUserModsParamsOrder defines parameters for ListUserMods.
type ListUserModsParamsOrder string

// ListUserPacksParams defines parameters for ListUserPacks.
type ListUserPacksParams struct {
	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *ListUserPacksParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListUserPacksParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListUserPacksParamsSort defines parameters for ListUserPacks.
type ListUserPacksParamsSort string

// ListUserPacksParamsOrder defines parameters for ListUserPacks.
type ListUserPacksParamsOrder string

// ListUserTeamsParams defines parameters for ListUserTeams.
type ListUserTeamsParams struct {
	// Search Search query
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort Sorting column
	Sort *ListUserTeamsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sorting order
	Order *ListUserTeamsParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Paging limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Paging offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListUserTeamsParamsSort defines parameters for ListUserTeams.
type ListUserTeamsParamsSort string

// ListUserTeamsParamsOrder defines parameters for ListUserTeams.
type ListUserTeamsParamsOrder string

// LoginAuthJSONRequestBody defines body for LoginAuth for application/json ContentType.
type LoginAuthJSONRequestBody = AuthLogin

// DeleteFabricFromBuildJSONRequestBody defines body for DeleteFabricFromBuild for application/json ContentType.
type DeleteFabricFromBuildJSONRequestBody = FabricBuildParams

// AttachFabricToBuildJSONRequestBody defines body for AttachFabricToBuild for application/json ContentType.
type AttachFabricToBuildJSONRequestBody = FabricBuildParams

// DeleteForgeFromBuildJSONRequestBody defines body for DeleteForgeFromBuild for application/json ContentType.
type DeleteForgeFromBuildJSONRequestBody = ForgeBuildParams

// AttachForgeToBuildJSONRequestBody defines body for AttachForgeToBuild for application/json ContentType.
type AttachForgeToBuildJSONRequestBody = ForgeBuildParams

// DeleteMinecraftFromBuildJSONRequestBody defines body for DeleteMinecraftFromBuild for application/json ContentType.
type DeleteMinecraftFromBuildJSONRequestBody = MinecraftBuildParams

// AttachMinecraftToBuildJSONRequestBody defines body for AttachMinecraftToBuild for application/json ContentType.
type AttachMinecraftToBuildJSONRequestBody = MinecraftBuildParams

// CreateModJSONRequestBody defines body for CreateMod for application/json ContentType.
type CreateModJSONRequestBody = Mod

// UpdateModJSONRequestBody defines body for UpdateMod for application/json ContentType.
type UpdateModJSONRequestBody = Mod

// DeleteModFromTeamJSONRequestBody defines body for DeleteModFromTeam for application/json ContentType.
type DeleteModFromTeamJSONRequestBody = ModTeamParams

// AttachModToTeamJSONRequestBody defines body for AttachModToTeam for application/json ContentType.
type AttachModToTeamJSONRequestBody = ModTeamParams

// PermitModTeamJSONRequestBody defines body for PermitModTeam for application/json ContentType.
type PermitModTeamJSONRequestBody = ModTeamParams

// DeleteModFromUserJSONRequestBody defines body for DeleteModFromUser for application/json ContentType.
type DeleteModFromUserJSONRequestBody = ModUserParams

// AttachModToUserJSONRequestBody defines body for AttachModToUser for application/json ContentType.
type AttachModToUserJSONRequestBody = ModUserParams

// PermitModUserJSONRequestBody defines body for PermitModUser for application/json ContentType.
type PermitModUserJSONRequestBody = ModUserParams

// CreateVersionJSONRequestBody defines body for CreateVersion for application/json ContentType.
type CreateVersionJSONRequestBody = Version

// UpdateVersionJSONRequestBody defines body for UpdateVersion for application/json ContentType.
type UpdateVersionJSONRequestBody = Version

// DeleteVersionFromBuildJSONRequestBody defines body for DeleteVersionFromBuild for application/json ContentType.
type DeleteVersionFromBuildJSONRequestBody = VersionBuildParams

// AttachVersionToBuildJSONRequestBody defines body for AttachVersionToBuild for application/json ContentType.
type AttachVersionToBuildJSONRequestBody = VersionBuildParams

// DeleteNeoforgeFromBuildJSONRequestBody defines body for DeleteNeoforgeFromBuild for application/json ContentType.
type DeleteNeoforgeFromBuildJSONRequestBody = NeoforgeBuildParams

// AttachNeoforgeToBuildJSONRequestBody defines body for AttachNeoforgeToBuild for application/json ContentType.
type AttachNeoforgeToBuildJSONRequestBody = NeoforgeBuildParams

// CreatePackJSONRequestBody defines body for CreatePack for application/json ContentType.
type CreatePackJSONRequestBody = Pack

// UpdatePackJSONRequestBody defines body for UpdatePack for application/json ContentType.
type UpdatePackJSONRequestBody = Pack

// CreateBuildJSONRequestBody defines body for CreateBuild for application/json ContentType.
type CreateBuildJSONRequestBody = Build

// UpdateBuildJSONRequestBody defines body for UpdateBuild for application/json ContentType.
type UpdateBuildJSONRequestBody = Build

// DeleteBuildFromVersionJSONRequestBody defines body for DeleteBuildFromVersion for application/json ContentType.
type DeleteBuildFromVersionJSONRequestBody = BuildVersionParams

// AttachBuildToVersionJSONRequestBody defines body for AttachBuildToVersion for application/json ContentType.
type AttachBuildToVersionJSONRequestBody = BuildVersionParams

// DeletePackFromTeamJSONRequestBody defines body for DeletePackFromTeam for application/json ContentType.
type DeletePackFromTeamJSONRequestBody = PackTeamParams

// AttachPackToTeamJSONRequestBody defines body for AttachPackToTeam for application/json ContentType.
type AttachPackToTeamJSONRequestBody = PackTeamParams

// PermitPackTeamJSONRequestBody defines body for PermitPackTeam for application/json ContentType.
type PermitPackTeamJSONRequestBody = PackTeamParams

// DeletePackFromUserJSONRequestBody defines body for DeletePackFromUser for application/json ContentType.
type DeletePackFromUserJSONRequestBody = PackUserParams

// AttachPackToUserJSONRequestBody defines body for AttachPackToUser for application/json ContentType.
type AttachPackToUserJSONRequestBody = PackUserParams

// PermitPackUserJSONRequestBody defines body for PermitPackUser for application/json ContentType.
type PermitPackUserJSONRequestBody = PackUserParams

// UpdateProfileJSONRequestBody defines body for UpdateProfile for application/json ContentType.
type UpdateProfileJSONRequestBody = Profile

// DeleteQuiltFromBuildJSONRequestBody defines body for DeleteQuiltFromBuild for application/json ContentType.
type DeleteQuiltFromBuildJSONRequestBody = QuiltBuildParams

// AttachQuiltToBuildJSONRequestBody defines body for AttachQuiltToBuild for application/json ContentType.
type AttachQuiltToBuildJSONRequestBody = QuiltBuildParams

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = Team

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = Team

// DeleteTeamFromModJSONRequestBody defines body for DeleteTeamFromMod for application/json ContentType.
type DeleteTeamFromModJSONRequestBody = TeamModParams

// AttachTeamToModJSONRequestBody defines body for AttachTeamToMod for application/json ContentType.
type AttachTeamToModJSONRequestBody = TeamModParams

// PermitTeamModJSONRequestBody defines body for PermitTeamMod for application/json ContentType.
type PermitTeamModJSONRequestBody = TeamModParams

// DeleteTeamFromPackJSONRequestBody defines body for DeleteTeamFromPack for application/json ContentType.
type DeleteTeamFromPackJSONRequestBody = TeamPackParams

// AttachTeamToPackJSONRequestBody defines body for AttachTeamToPack for application/json ContentType.
type AttachTeamToPackJSONRequestBody = TeamPackParams

// PermitTeamPackJSONRequestBody defines body for PermitTeamPack for application/json ContentType.
type PermitTeamPackJSONRequestBody = TeamPackParams

// DeleteTeamFromUserJSONRequestBody defines body for DeleteTeamFromUser for application/json ContentType.
type DeleteTeamFromUserJSONRequestBody = TeamUserParams

// AttachTeamToUserJSONRequestBody defines body for AttachTeamToUser for application/json ContentType.
type AttachTeamToUserJSONRequestBody = TeamUserParams

// PermitTeamUserJSONRequestBody defines body for PermitTeamUser for application/json ContentType.
type PermitTeamUserJSONRequestBody = TeamUserParams

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = User

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = User

// DeleteUserFromModJSONRequestBody defines body for DeleteUserFromMod for application/json ContentType.
type DeleteUserFromModJSONRequestBody = UserModParams

// AttachUserToModJSONRequestBody defines body for AttachUserToMod for application/json ContentType.
type AttachUserToModJSONRequestBody = UserModParams

// PermitUserModJSONRequestBody defines body for PermitUserMod for application/json ContentType.
type PermitUserModJSONRequestBody = UserModParams

// DeleteUserFromPackJSONRequestBody defines body for DeleteUserFromPack for application/json ContentType.
type DeleteUserFromPackJSONRequestBody = UserPackParams

// AttachUserToPackJSONRequestBody defines body for AttachUserToPack for application/json ContentType.
type AttachUserToPackJSONRequestBody = UserPackParams

// PermitUserPackJSONRequestBody defines body for PermitUserPack for application/json ContentType.
type PermitUserPackJSONRequestBody = UserPackParams

// DeleteUserFromTeamJSONRequestBody defines body for DeleteUserFromTeam for application/json ContentType.
type DeleteUserFromTeamJSONRequestBody = UserTeamParams

// AttachUserToTeamJSONRequestBody defines body for AttachUserToTeam for application/json ContentType.
type AttachUserToTeamJSONRequestBody = UserTeamParams

// PermitUserTeamJSONRequestBody defines body for PermitUserTeam for application/json ContentType.
type PermitUserTeamJSONRequestBody = UserTeamParams

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authenticate an user by credentials
	// (POST /auth/login)
	LoginAuth(w http.ResponseWriter, r *http.Request)
	// Fetch the available auth providers
	// (GET /auth/providers)
	ExternalProviders(w http.ResponseWriter, r *http.Request)
	// Refresh an auth token before it expires
	// (GET /auth/refresh)
	RefreshAuth(w http.ResponseWriter, r *http.Request)
	// Verify validity for an authentication token
	// (GET /auth/verify)
	VerifyAuth(w http.ResponseWriter, r *http.Request)
	// Callback for external authentication
	// (GET /auth/{provider}/callback)
	ExternalCallback(w http.ResponseWriter, r *http.Request, provider string, params ExternalCallbackParams)
	// Initialize the external authentication
	// (GET /auth/{provider}/initialize)
	ExternalInitialize(w http.ResponseWriter, r *http.Request, provider string, params ExternalInitializeParams)
	// Fetch the available Fabric versions
	// (GET /fabric)
	ListFabrics(w http.ResponseWriter, r *http.Request, params ListFabricsParams)
	// Update the available Fabric versions
	// (PUT /fabric)
	UpdateFabric(w http.ResponseWriter, r *http.Request)
	// Unlink a build from a Fabric version
	// (DELETE /fabric/{fabric_id}/builds)
	DeleteFabricFromBuild(w http.ResponseWriter, r *http.Request, fabricId string)
	// Fetch the builds attached to a Fabric version
	// (GET /fabric/{fabric_id}/builds)
	ListFabricBuilds(w http.ResponseWriter, r *http.Request, fabricId string, params ListFabricBuildsParams)
	// Attach a build to a Fabric version
	// (POST /fabric/{fabric_id}/builds)
	AttachFabricToBuild(w http.ResponseWriter, r *http.Request, fabricId string)
	// Fetch the available Forge versions
	// (GET /forge)
	ListForges(w http.ResponseWriter, r *http.Request, params ListForgesParams)
	// Update the available Forge versions
	// (PUT /forge)
	UpdateForge(w http.ResponseWriter, r *http.Request)
	// Unlink a build from a Forge version
	// (DELETE /forge/{forge_id}/builds)
	DeleteForgeFromBuild(w http.ResponseWriter, r *http.Request, forgeId string)
	// Fetch the builds attached to a Forge version
	// (GET /forge/{forge_id}/builds)
	ListForgeBuilds(w http.ResponseWriter, r *http.Request, forgeId string, params ListForgeBuildsParams)
	// Attach a build to a Forge version
	// (POST /forge/{forge_id}/builds)
	AttachForgeToBuild(w http.ResponseWriter, r *http.Request, forgeId string)
	// Fetch the available Minecraft versions
	// (GET /minecraft)
	ListMinecrafts(w http.ResponseWriter, r *http.Request, params ListMinecraftsParams)
	// Update the available Minecraft versions
	// (PUT /minecraft)
	UpdateMinecraft(w http.ResponseWriter, r *http.Request)
	// Unlink a build from a Minecraft version
	// (DELETE /minecraft/{minecraft_id}/builds)
	DeleteMinecraftFromBuild(w http.ResponseWriter, r *http.Request, minecraftId string)
	// Fetch the builds attached to a Minecraft version
	// (GET /minecraft/{minecraft_id}/builds)
	ListMinecraftBuilds(w http.ResponseWriter, r *http.Request, minecraftId string, params ListMinecraftBuildsParams)
	// Attach a build to a Minecraft version
	// (POST /minecraft/{minecraft_id}/builds)
	AttachMinecraftToBuild(w http.ResponseWriter, r *http.Request, minecraftId string)
	// Fetch all available mods
	// (GET /mods)
	ListMods(w http.ResponseWriter, r *http.Request, params ListModsParams)
	// Create a new mod
	// (POST /mods)
	CreateMod(w http.ResponseWriter, r *http.Request)
	// Delete a specific mod
	// (DELETE /mods/{mod_id})
	DeleteMod(w http.ResponseWriter, r *http.Request, modId string)
	// Fetch a specific mod
	// (GET /mods/{mod_id})
	ShowMod(w http.ResponseWriter, r *http.Request, modId string)
	// Update a specific mod
	// (PUT /mods/{mod_id})
	UpdateMod(w http.ResponseWriter, r *http.Request, modId string)
	// Unlink a team from mod
	// (DELETE /mods/{mod_id}/teams)
	DeleteModFromTeam(w http.ResponseWriter, r *http.Request, modId string)
	// Fetch all teams attached to mod
	// (GET /mods/{mod_id}/teams)
	ListModTeams(w http.ResponseWriter, r *http.Request, modId string, params ListModTeamsParams)
	// Attach a team to mod
	// (POST /mods/{mod_id}/teams)
	AttachModToTeam(w http.ResponseWriter, r *http.Request, modId string)
	// Update team perms for mod
	// (PUT /mods/{mod_id}/teams)
	PermitModTeam(w http.ResponseWriter, r *http.Request, modId string)
	// Unlink a user from mod
	// (DELETE /mods/{mod_id}/users)
	DeleteModFromUser(w http.ResponseWriter, r *http.Request, modId string)
	// Fetch all users attached to mod
	// (GET /mods/{mod_id}/users)
	ListModUsers(w http.ResponseWriter, r *http.Request, modId string, params ListModUsersParams)
	// Attach a user to mod
	// (POST /mods/{mod_id}/users)
	AttachModToUser(w http.ResponseWriter, r *http.Request, modId string)
	// Update user perms for mod
	// (PUT /mods/{mod_id}/users)
	PermitModUser(w http.ResponseWriter, r *http.Request, modId string)
	// Fetch all available versions for a mod
	// (GET /mods/{mod_id}/versions)
	ListVersions(w http.ResponseWriter, r *http.Request, modId string, params ListVersionsParams)
	// Create a new version for a mod
	// (POST /mods/{mod_id}/versions)
	CreateVersion(w http.ResponseWriter, r *http.Request, modId string)
	// Delete a specific version for a mod
	// (DELETE /mods/{mod_id}/versions/{version_id})
	DeleteVersion(w http.ResponseWriter, r *http.Request, modId string, versionId string)
	// Fetch a specific version for a mod
	// (GET /mods/{mod_id}/versions/{version_id})
	ShowVersion(w http.ResponseWriter, r *http.Request, modId string, versionId string)
	// Update a specific version for a mod
	// (PUT /mods/{mod_id}/versions/{version_id})
	UpdateVersion(w http.ResponseWriter, r *http.Request, modId string, versionId string)
	// Unlink a build from a version
	// (DELETE /mods/{mod_id}/versions/{version_id}/builds)
	DeleteVersionFromBuild(w http.ResponseWriter, r *http.Request, modId string, versionId string)
	// Fetch all builds attached to version
	// (GET /mods/{mod_id}/versions/{version_id}/builds)
	ListVersionBuilds(w http.ResponseWriter, r *http.Request, modId string, versionId string, params ListVersionBuildsParams)
	// Attach a build to a version
	// (POST /mods/{mod_id}/versions/{version_id}/builds)
	AttachVersionToBuild(w http.ResponseWriter, r *http.Request, modId string, versionId string)
	// Fetch the available Neoforge versions
	// (GET /neoforge)
	ListNeoforges(w http.ResponseWriter, r *http.Request, params ListNeoforgesParams)
	// Update the available Neoforge versions
	// (PUT /neoforge)
	UpdateNeoforge(w http.ResponseWriter, r *http.Request)
	// Unlink a build from a Neoforge version
	// (DELETE /neoforge/{neoforge_id}/builds)
	DeleteNeoforgeFromBuild(w http.ResponseWriter, r *http.Request, neoforgeId string)
	// Fetch the builds attached to a Neoforge version
	// (GET /neoforge/{neoforge_id}/builds)
	ListNeoforgeBuilds(w http.ResponseWriter, r *http.Request, neoforgeId string, params ListNeoforgeBuildsParams)
	// Attach a build to a Neoforge version
	// (POST /neoforge/{neoforge_id}/builds)
	AttachNeoforgeToBuild(w http.ResponseWriter, r *http.Request, neoforgeId string)
	// Fetch all available packs
	// (GET /packs)
	ListPacks(w http.ResponseWriter, r *http.Request, params ListPacksParams)
	// Create a new pack
	// (POST /packs)
	CreatePack(w http.ResponseWriter, r *http.Request)
	// Delete a specific pack
	// (DELETE /packs/{pack_id})
	DeletePack(w http.ResponseWriter, r *http.Request, packId string)
	// Fetch a specific pack
	// (GET /packs/{pack_id})
	ShowPack(w http.ResponseWriter, r *http.Request, packId string)
	// Update a specific pack
	// (PUT /packs/{pack_id})
	UpdatePack(w http.ResponseWriter, r *http.Request, packId string)
	// Fetch all available builds for a pack
	// (GET /packs/{pack_id}/builds)
	ListBuilds(w http.ResponseWriter, r *http.Request, packId string, params ListBuildsParams)
	// Create a new build for a pack
	// (POST /packs/{pack_id}/builds)
	CreateBuild(w http.ResponseWriter, r *http.Request, packId string)
	// Delete a specific build for a pack
	// (DELETE /packs/{pack_id}/builds/{build_id})
	DeleteBuild(w http.ResponseWriter, r *http.Request, packId string, buildId string)
	// Fetch a specific build for a pack
	// (GET /packs/{pack_id}/builds/{build_id})
	ShowBuild(w http.ResponseWriter, r *http.Request, packId string, buildId string)
	// Update a specific build for a pack
	// (PUT /packs/{pack_id}/builds/{build_id})
	UpdateBuild(w http.ResponseWriter, r *http.Request, packId string, buildId string)
	// Unlink a version from a build
	// (DELETE /packs/{pack_id}/builds/{build_id}/versions)
	DeleteBuildFromVersion(w http.ResponseWriter, r *http.Request, packId string, buildId string)
	// Fetch all versions attached to build
	// (GET /packs/{pack_id}/builds/{build_id}/versions)
	ListBuildVersions(w http.ResponseWriter, r *http.Request, packId string, buildId string, params ListBuildVersionsParams)
	// Attach a version to a build
	// (POST /packs/{pack_id}/builds/{build_id}/versions)
	AttachBuildToVersion(w http.ResponseWriter, r *http.Request, packId string, buildId string)
	// Unlink a team from pack
	// (DELETE /packs/{pack_id}/teams)
	DeletePackFromTeam(w http.ResponseWriter, r *http.Request, packId string)
	// Fetch all teams attached to pack
	// (GET /packs/{pack_id}/teams)
	ListPackTeams(w http.ResponseWriter, r *http.Request, packId string, params ListPackTeamsParams)
	// Attach a team to pack
	// (POST /packs/{pack_id}/teams)
	AttachPackToTeam(w http.ResponseWriter, r *http.Request, packId string)
	// Update team perms for pack
	// (PUT /packs/{pack_id}/teams)
	PermitPackTeam(w http.ResponseWriter, r *http.Request, packId string)
	// Unlink a user from pack
	// (DELETE /packs/{pack_id}/users)
	DeletePackFromUser(w http.ResponseWriter, r *http.Request, packId string)
	// Fetch all users attached to pack
	// (GET /packs/{pack_id}/users)
	ListPackUsers(w http.ResponseWriter, r *http.Request, packId string, params ListPackUsersParams)
	// Attach a user to pack
	// (POST /packs/{pack_id}/users)
	AttachPackToUser(w http.ResponseWriter, r *http.Request, packId string)
	// Update user perms for pack
	// (PUT /packs/{pack_id}/users)
	PermitPackUser(w http.ResponseWriter, r *http.Request, packId string)
	// Fetch profile details of the personal account
	// (GET /profile/self)
	ShowProfile(w http.ResponseWriter, r *http.Request)
	// Update your own profile information
	// (PUT /profile/self)
	UpdateProfile(w http.ResponseWriter, r *http.Request)
	// Retrieve an unlimited auth token
	// (GET /profile/token)
	TokenProfile(w http.ResponseWriter, r *http.Request)
	// Fetch the available Quilt versions
	// (GET /quilt)
	ListQuilts(w http.ResponseWriter, r *http.Request, params ListQuiltsParams)
	// Update the available Quilt versions
	// (PUT /quilt)
	UpdateQuilt(w http.ResponseWriter, r *http.Request)
	// Unlink a build from a Quilt version
	// (DELETE /quilt/{quilt_id}/builds)
	DeleteQuiltFromBuild(w http.ResponseWriter, r *http.Request, quiltId string)
	// Fetch the builds attached to a Quilt version
	// (GET /quilt/{quilt_id}/builds)
	ListQuiltBuilds(w http.ResponseWriter, r *http.Request, quiltId string, params ListQuiltBuildsParams)
	// Attach a build to a Quilt version
	// (POST /quilt/{quilt_id}/builds)
	AttachQuiltToBuild(w http.ResponseWriter, r *http.Request, quiltId string)
	// Fetch all available teams
	// (GET /teams)
	ListTeams(w http.ResponseWriter, r *http.Request, params ListTeamsParams)
	// Create a new team
	// (POST /teams)
	CreateTeam(w http.ResponseWriter, r *http.Request)
	// Delete a specific team
	// (DELETE /teams/{team_id})
	DeleteTeam(w http.ResponseWriter, r *http.Request, teamId string)
	// Fetch a specific team
	// (GET /teams/{team_id})
	ShowTeam(w http.ResponseWriter, r *http.Request, teamId string)
	// Update a specific team
	// (PUT /teams/{team_id})
	UpdateTeam(w http.ResponseWriter, r *http.Request, teamId string)
	// Unlink a mod from team
	// (DELETE /teams/{team_id}/mods)
	DeleteTeamFromMod(w http.ResponseWriter, r *http.Request, teamId string)
	// Fetch all mods attached to team
	// (GET /teams/{team_id}/mods)
	ListTeamMods(w http.ResponseWriter, r *http.Request, teamId string, params ListTeamModsParams)
	// Attach a mod to team
	// (POST /teams/{team_id}/mods)
	AttachTeamToMod(w http.ResponseWriter, r *http.Request, teamId string)
	// Update mod perms for team
	// (PUT /teams/{team_id}/mods)
	PermitTeamMod(w http.ResponseWriter, r *http.Request, teamId string)
	// Unlink a pack from team
	// (DELETE /teams/{team_id}/packs)
	DeleteTeamFromPack(w http.ResponseWriter, r *http.Request, teamId string)
	// Fetch all packs attached to team
	// (GET /teams/{team_id}/packs)
	ListTeamPacks(w http.ResponseWriter, r *http.Request, teamId string, params ListTeamPacksParams)
	// Attach a pack to team
	// (POST /teams/{team_id}/packs)
	AttachTeamToPack(w http.ResponseWriter, r *http.Request, teamId string)
	// Update pack perms for team
	// (PUT /teams/{team_id}/packs)
	PermitTeamPack(w http.ResponseWriter, r *http.Request, teamId string)
	// Unlink a user from team
	// (DELETE /teams/{team_id}/users)
	DeleteTeamFromUser(w http.ResponseWriter, r *http.Request, teamId string)
	// Fetch all users attached to team
	// (GET /teams/{team_id}/users)
	ListTeamUsers(w http.ResponseWriter, r *http.Request, teamId string, params ListTeamUsersParams)
	// Attach a user to team
	// (POST /teams/{team_id}/users)
	AttachTeamToUser(w http.ResponseWriter, r *http.Request, teamId string)
	// Update user perms for team
	// (PUT /teams/{team_id}/users)
	PermitTeamUser(w http.ResponseWriter, r *http.Request, teamId string)
	// Fetch all available users
	// (GET /users)
	ListUsers(w http.ResponseWriter, r *http.Request, params ListUsersParams)
	// Create a new user
	// (POST /users)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Delete a specific user
	// (DELETE /users/{user_id})
	DeleteUser(w http.ResponseWriter, r *http.Request, userId string)
	// Fetch a specific user
	// (GET /users/{user_id})
	ShowUser(w http.ResponseWriter, r *http.Request, userId string)
	// Update a specific user
	// (PUT /users/{user_id})
	UpdateUser(w http.ResponseWriter, r *http.Request, userId string)
	// Unlink a mod from user
	// (DELETE /users/{user_id}/mods)
	DeleteUserFromMod(w http.ResponseWriter, r *http.Request, userId string)
	// Fetch all mods attached to user
	// (GET /users/{user_id}/mods)
	ListUserMods(w http.ResponseWriter, r *http.Request, userId string, params ListUserModsParams)
	// Attach a mod to user
	// (POST /users/{user_id}/mods)
	AttachUserToMod(w http.ResponseWriter, r *http.Request, userId string)
	// Update mod perms for user
	// (PUT /users/{user_id}/mods)
	PermitUserMod(w http.ResponseWriter, r *http.Request, userId string)
	// Unlink a pack from user
	// (DELETE /users/{user_id}/packs)
	DeleteUserFromPack(w http.ResponseWriter, r *http.Request, userId string)
	// Fetch all packs attached to user
	// (GET /users/{user_id}/packs)
	ListUserPacks(w http.ResponseWriter, r *http.Request, userId string, params ListUserPacksParams)
	// Attach a pack to user
	// (POST /users/{user_id}/packs)
	AttachUserToPack(w http.ResponseWriter, r *http.Request, userId string)
	// Update pack perms for user
	// (PUT /users/{user_id}/packs)
	PermitUserPack(w http.ResponseWriter, r *http.Request, userId string)
	// Unlink a team from user
	// (DELETE /users/{user_id}/teams)
	DeleteUserFromTeam(w http.ResponseWriter, r *http.Request, userId string)
	// Fetch all teams attached to user
	// (GET /users/{user_id}/teams)
	ListUserTeams(w http.ResponseWriter, r *http.Request, userId string, params ListUserTeamsParams)
	// Attach a team to user
	// (POST /users/{user_id}/teams)
	AttachUserToTeam(w http.ResponseWriter, r *http.Request, userId string)
	// Update team perms for user
	// (PUT /users/{user_id}/teams)
	PermitUserTeam(w http.ResponseWriter, r *http.Request, userId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Authenticate an user by credentials
// (POST /auth/login)
func (_ Unimplemented) LoginAuth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch the available auth providers
// (GET /auth/providers)
func (_ Unimplemented) ExternalProviders(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Refresh an auth token before it expires
// (GET /auth/refresh)
func (_ Unimplemented) RefreshAuth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Verify validity for an authentication token
// (GET /auth/verify)
func (_ Unimplemented) VerifyAuth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Callback for external authentication
// (GET /auth/{provider}/callback)
func (_ Unimplemented) ExternalCallback(w http.ResponseWriter, r *http.Request, provider string, params ExternalCallbackParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Initialize the external authentication
// (GET /auth/{provider}/initialize)
func (_ Unimplemented) ExternalInitialize(w http.ResponseWriter, r *http.Request, provider string, params ExternalInitializeParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch the available Fabric versions
// (GET /fabric)
func (_ Unimplemented) ListFabrics(w http.ResponseWriter, r *http.Request, params ListFabricsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the available Fabric versions
// (PUT /fabric)
func (_ Unimplemented) UpdateFabric(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a build from a Fabric version
// (DELETE /fabric/{fabric_id}/builds)
func (_ Unimplemented) DeleteFabricFromBuild(w http.ResponseWriter, r *http.Request, fabricId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch the builds attached to a Fabric version
// (GET /fabric/{fabric_id}/builds)
func (_ Unimplemented) ListFabricBuilds(w http.ResponseWriter, r *http.Request, fabricId string, params ListFabricBuildsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a build to a Fabric version
// (POST /fabric/{fabric_id}/builds)
func (_ Unimplemented) AttachFabricToBuild(w http.ResponseWriter, r *http.Request, fabricId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch the available Forge versions
// (GET /forge)
func (_ Unimplemented) ListForges(w http.ResponseWriter, r *http.Request, params ListForgesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the available Forge versions
// (PUT /forge)
func (_ Unimplemented) UpdateForge(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a build from a Forge version
// (DELETE /forge/{forge_id}/builds)
func (_ Unimplemented) DeleteForgeFromBuild(w http.ResponseWriter, r *http.Request, forgeId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch the builds attached to a Forge version
// (GET /forge/{forge_id}/builds)
func (_ Unimplemented) ListForgeBuilds(w http.ResponseWriter, r *http.Request, forgeId string, params ListForgeBuildsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a build to a Forge version
// (POST /forge/{forge_id}/builds)
func (_ Unimplemented) AttachForgeToBuild(w http.ResponseWriter, r *http.Request, forgeId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch the available Minecraft versions
// (GET /minecraft)
func (_ Unimplemented) ListMinecrafts(w http.ResponseWriter, r *http.Request, params ListMinecraftsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the available Minecraft versions
// (PUT /minecraft)
func (_ Unimplemented) UpdateMinecraft(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a build from a Minecraft version
// (DELETE /minecraft/{minecraft_id}/builds)
func (_ Unimplemented) DeleteMinecraftFromBuild(w http.ResponseWriter, r *http.Request, minecraftId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch the builds attached to a Minecraft version
// (GET /minecraft/{minecraft_id}/builds)
func (_ Unimplemented) ListMinecraftBuilds(w http.ResponseWriter, r *http.Request, minecraftId string, params ListMinecraftBuildsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a build to a Minecraft version
// (POST /minecraft/{minecraft_id}/builds)
func (_ Unimplemented) AttachMinecraftToBuild(w http.ResponseWriter, r *http.Request, minecraftId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all available mods
// (GET /mods)
func (_ Unimplemented) ListMods(w http.ResponseWriter, r *http.Request, params ListModsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new mod
// (POST /mods)
func (_ Unimplemented) CreateMod(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific mod
// (DELETE /mods/{mod_id})
func (_ Unimplemented) DeleteMod(w http.ResponseWriter, r *http.Request, modId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific mod
// (GET /mods/{mod_id})
func (_ Unimplemented) ShowMod(w http.ResponseWriter, r *http.Request, modId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a specific mod
// (PUT /mods/{mod_id})
func (_ Unimplemented) UpdateMod(w http.ResponseWriter, r *http.Request, modId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a team from mod
// (DELETE /mods/{mod_id}/teams)
func (_ Unimplemented) DeleteModFromTeam(w http.ResponseWriter, r *http.Request, modId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all teams attached to mod
// (GET /mods/{mod_id}/teams)
func (_ Unimplemented) ListModTeams(w http.ResponseWriter, r *http.Request, modId string, params ListModTeamsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a team to mod
// (POST /mods/{mod_id}/teams)
func (_ Unimplemented) AttachModToTeam(w http.ResponseWriter, r *http.Request, modId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update team perms for mod
// (PUT /mods/{mod_id}/teams)
func (_ Unimplemented) PermitModTeam(w http.ResponseWriter, r *http.Request, modId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a user from mod
// (DELETE /mods/{mod_id}/users)
func (_ Unimplemented) DeleteModFromUser(w http.ResponseWriter, r *http.Request, modId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all users attached to mod
// (GET /mods/{mod_id}/users)
func (_ Unimplemented) ListModUsers(w http.ResponseWriter, r *http.Request, modId string, params ListModUsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a user to mod
// (POST /mods/{mod_id}/users)
func (_ Unimplemented) AttachModToUser(w http.ResponseWriter, r *http.Request, modId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update user perms for mod
// (PUT /mods/{mod_id}/users)
func (_ Unimplemented) PermitModUser(w http.ResponseWriter, r *http.Request, modId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all available versions for a mod
// (GET /mods/{mod_id}/versions)
func (_ Unimplemented) ListVersions(w http.ResponseWriter, r *http.Request, modId string, params ListVersionsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new version for a mod
// (POST /mods/{mod_id}/versions)
func (_ Unimplemented) CreateVersion(w http.ResponseWriter, r *http.Request, modId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific version for a mod
// (DELETE /mods/{mod_id}/versions/{version_id})
func (_ Unimplemented) DeleteVersion(w http.ResponseWriter, r *http.Request, modId string, versionId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific version for a mod
// (GET /mods/{mod_id}/versions/{version_id})
func (_ Unimplemented) ShowVersion(w http.ResponseWriter, r *http.Request, modId string, versionId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a specific version for a mod
// (PUT /mods/{mod_id}/versions/{version_id})
func (_ Unimplemented) UpdateVersion(w http.ResponseWriter, r *http.Request, modId string, versionId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a build from a version
// (DELETE /mods/{mod_id}/versions/{version_id}/builds)
func (_ Unimplemented) DeleteVersionFromBuild(w http.ResponseWriter, r *http.Request, modId string, versionId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all builds attached to version
// (GET /mods/{mod_id}/versions/{version_id}/builds)
func (_ Unimplemented) ListVersionBuilds(w http.ResponseWriter, r *http.Request, modId string, versionId string, params ListVersionBuildsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a build to a version
// (POST /mods/{mod_id}/versions/{version_id}/builds)
func (_ Unimplemented) AttachVersionToBuild(w http.ResponseWriter, r *http.Request, modId string, versionId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch the available Neoforge versions
// (GET /neoforge)
func (_ Unimplemented) ListNeoforges(w http.ResponseWriter, r *http.Request, params ListNeoforgesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the available Neoforge versions
// (PUT /neoforge)
func (_ Unimplemented) UpdateNeoforge(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a build from a Neoforge version
// (DELETE /neoforge/{neoforge_id}/builds)
func (_ Unimplemented) DeleteNeoforgeFromBuild(w http.ResponseWriter, r *http.Request, neoforgeId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch the builds attached to a Neoforge version
// (GET /neoforge/{neoforge_id}/builds)
func (_ Unimplemented) ListNeoforgeBuilds(w http.ResponseWriter, r *http.Request, neoforgeId string, params ListNeoforgeBuildsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a build to a Neoforge version
// (POST /neoforge/{neoforge_id}/builds)
func (_ Unimplemented) AttachNeoforgeToBuild(w http.ResponseWriter, r *http.Request, neoforgeId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all available packs
// (GET /packs)
func (_ Unimplemented) ListPacks(w http.ResponseWriter, r *http.Request, params ListPacksParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new pack
// (POST /packs)
func (_ Unimplemented) CreatePack(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific pack
// (DELETE /packs/{pack_id})
func (_ Unimplemented) DeletePack(w http.ResponseWriter, r *http.Request, packId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific pack
// (GET /packs/{pack_id})
func (_ Unimplemented) ShowPack(w http.ResponseWriter, r *http.Request, packId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a specific pack
// (PUT /packs/{pack_id})
func (_ Unimplemented) UpdatePack(w http.ResponseWriter, r *http.Request, packId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all available builds for a pack
// (GET /packs/{pack_id}/builds)
func (_ Unimplemented) ListBuilds(w http.ResponseWriter, r *http.Request, packId string, params ListBuildsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new build for a pack
// (POST /packs/{pack_id}/builds)
func (_ Unimplemented) CreateBuild(w http.ResponseWriter, r *http.Request, packId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific build for a pack
// (DELETE /packs/{pack_id}/builds/{build_id})
func (_ Unimplemented) DeleteBuild(w http.ResponseWriter, r *http.Request, packId string, buildId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific build for a pack
// (GET /packs/{pack_id}/builds/{build_id})
func (_ Unimplemented) ShowBuild(w http.ResponseWriter, r *http.Request, packId string, buildId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a specific build for a pack
// (PUT /packs/{pack_id}/builds/{build_id})
func (_ Unimplemented) UpdateBuild(w http.ResponseWriter, r *http.Request, packId string, buildId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a version from a build
// (DELETE /packs/{pack_id}/builds/{build_id}/versions)
func (_ Unimplemented) DeleteBuildFromVersion(w http.ResponseWriter, r *http.Request, packId string, buildId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all versions attached to build
// (GET /packs/{pack_id}/builds/{build_id}/versions)
func (_ Unimplemented) ListBuildVersions(w http.ResponseWriter, r *http.Request, packId string, buildId string, params ListBuildVersionsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a version to a build
// (POST /packs/{pack_id}/builds/{build_id}/versions)
func (_ Unimplemented) AttachBuildToVersion(w http.ResponseWriter, r *http.Request, packId string, buildId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a team from pack
// (DELETE /packs/{pack_id}/teams)
func (_ Unimplemented) DeletePackFromTeam(w http.ResponseWriter, r *http.Request, packId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all teams attached to pack
// (GET /packs/{pack_id}/teams)
func (_ Unimplemented) ListPackTeams(w http.ResponseWriter, r *http.Request, packId string, params ListPackTeamsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a team to pack
// (POST /packs/{pack_id}/teams)
func (_ Unimplemented) AttachPackToTeam(w http.ResponseWriter, r *http.Request, packId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update team perms for pack
// (PUT /packs/{pack_id}/teams)
func (_ Unimplemented) PermitPackTeam(w http.ResponseWriter, r *http.Request, packId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a user from pack
// (DELETE /packs/{pack_id}/users)
func (_ Unimplemented) DeletePackFromUser(w http.ResponseWriter, r *http.Request, packId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all users attached to pack
// (GET /packs/{pack_id}/users)
func (_ Unimplemented) ListPackUsers(w http.ResponseWriter, r *http.Request, packId string, params ListPackUsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a user to pack
// (POST /packs/{pack_id}/users)
func (_ Unimplemented) AttachPackToUser(w http.ResponseWriter, r *http.Request, packId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update user perms for pack
// (PUT /packs/{pack_id}/users)
func (_ Unimplemented) PermitPackUser(w http.ResponseWriter, r *http.Request, packId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch profile details of the personal account
// (GET /profile/self)
func (_ Unimplemented) ShowProfile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update your own profile information
// (PUT /profile/self)
func (_ Unimplemented) UpdateProfile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve an unlimited auth token
// (GET /profile/token)
func (_ Unimplemented) TokenProfile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch the available Quilt versions
// (GET /quilt)
func (_ Unimplemented) ListQuilts(w http.ResponseWriter, r *http.Request, params ListQuiltsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the available Quilt versions
// (PUT /quilt)
func (_ Unimplemented) UpdateQuilt(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a build from a Quilt version
// (DELETE /quilt/{quilt_id}/builds)
func (_ Unimplemented) DeleteQuiltFromBuild(w http.ResponseWriter, r *http.Request, quiltId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch the builds attached to a Quilt version
// (GET /quilt/{quilt_id}/builds)
func (_ Unimplemented) ListQuiltBuilds(w http.ResponseWriter, r *http.Request, quiltId string, params ListQuiltBuildsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a build to a Quilt version
// (POST /quilt/{quilt_id}/builds)
func (_ Unimplemented) AttachQuiltToBuild(w http.ResponseWriter, r *http.Request, quiltId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all available teams
// (GET /teams)
func (_ Unimplemented) ListTeams(w http.ResponseWriter, r *http.Request, params ListTeamsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new team
// (POST /teams)
func (_ Unimplemented) CreateTeam(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific team
// (DELETE /teams/{team_id})
func (_ Unimplemented) DeleteTeam(w http.ResponseWriter, r *http.Request, teamId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific team
// (GET /teams/{team_id})
func (_ Unimplemented) ShowTeam(w http.ResponseWriter, r *http.Request, teamId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a specific team
// (PUT /teams/{team_id})
func (_ Unimplemented) UpdateTeam(w http.ResponseWriter, r *http.Request, teamId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a mod from team
// (DELETE /teams/{team_id}/mods)
func (_ Unimplemented) DeleteTeamFromMod(w http.ResponseWriter, r *http.Request, teamId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all mods attached to team
// (GET /teams/{team_id}/mods)
func (_ Unimplemented) ListTeamMods(w http.ResponseWriter, r *http.Request, teamId string, params ListTeamModsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a mod to team
// (POST /teams/{team_id}/mods)
func (_ Unimplemented) AttachTeamToMod(w http.ResponseWriter, r *http.Request, teamId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update mod perms for team
// (PUT /teams/{team_id}/mods)
func (_ Unimplemented) PermitTeamMod(w http.ResponseWriter, r *http.Request, teamId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a pack from team
// (DELETE /teams/{team_id}/packs)
func (_ Unimplemented) DeleteTeamFromPack(w http.ResponseWriter, r *http.Request, teamId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all packs attached to team
// (GET /teams/{team_id}/packs)
func (_ Unimplemented) ListTeamPacks(w http.ResponseWriter, r *http.Request, teamId string, params ListTeamPacksParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a pack to team
// (POST /teams/{team_id}/packs)
func (_ Unimplemented) AttachTeamToPack(w http.ResponseWriter, r *http.Request, teamId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update pack perms for team
// (PUT /teams/{team_id}/packs)
func (_ Unimplemented) PermitTeamPack(w http.ResponseWriter, r *http.Request, teamId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a user from team
// (DELETE /teams/{team_id}/users)
func (_ Unimplemented) DeleteTeamFromUser(w http.ResponseWriter, r *http.Request, teamId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all users attached to team
// (GET /teams/{team_id}/users)
func (_ Unimplemented) ListTeamUsers(w http.ResponseWriter, r *http.Request, teamId string, params ListTeamUsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a user to team
// (POST /teams/{team_id}/users)
func (_ Unimplemented) AttachTeamToUser(w http.ResponseWriter, r *http.Request, teamId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update user perms for team
// (PUT /teams/{team_id}/users)
func (_ Unimplemented) PermitTeamUser(w http.ResponseWriter, r *http.Request, teamId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all available users
// (GET /users)
func (_ Unimplemented) ListUsers(w http.ResponseWriter, r *http.Request, params ListUsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new user
// (POST /users)
func (_ Unimplemented) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific user
// (DELETE /users/{user_id})
func (_ Unimplemented) DeleteUser(w http.ResponseWriter, r *http.Request, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch a specific user
// (GET /users/{user_id})
func (_ Unimplemented) ShowUser(w http.ResponseWriter, r *http.Request, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a specific user
// (PUT /users/{user_id})
func (_ Unimplemented) UpdateUser(w http.ResponseWriter, r *http.Request, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a mod from user
// (DELETE /users/{user_id}/mods)
func (_ Unimplemented) DeleteUserFromMod(w http.ResponseWriter, r *http.Request, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all mods attached to user
// (GET /users/{user_id}/mods)
func (_ Unimplemented) ListUserMods(w http.ResponseWriter, r *http.Request, userId string, params ListUserModsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a mod to user
// (POST /users/{user_id}/mods)
func (_ Unimplemented) AttachUserToMod(w http.ResponseWriter, r *http.Request, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update mod perms for user
// (PUT /users/{user_id}/mods)
func (_ Unimplemented) PermitUserMod(w http.ResponseWriter, r *http.Request, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a pack from user
// (DELETE /users/{user_id}/packs)
func (_ Unimplemented) DeleteUserFromPack(w http.ResponseWriter, r *http.Request, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all packs attached to user
// (GET /users/{user_id}/packs)
func (_ Unimplemented) ListUserPacks(w http.ResponseWriter, r *http.Request, userId string, params ListUserPacksParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a pack to user
// (POST /users/{user_id}/packs)
func (_ Unimplemented) AttachUserToPack(w http.ResponseWriter, r *http.Request, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update pack perms for user
// (PUT /users/{user_id}/packs)
func (_ Unimplemented) PermitUserPack(w http.ResponseWriter, r *http.Request, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unlink a team from user
// (DELETE /users/{user_id}/teams)
func (_ Unimplemented) DeleteUserFromTeam(w http.ResponseWriter, r *http.Request, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fetch all teams attached to user
// (GET /users/{user_id}/teams)
func (_ Unimplemented) ListUserTeams(w http.ResponseWriter, r *http.Request, userId string, params ListUserTeamsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Attach a team to user
// (POST /users/{user_id}/teams)
func (_ Unimplemented) AttachUserToTeam(w http.ResponseWriter, r *http.Request, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update team perms for user
// (PUT /users/{user_id}/teams)
func (_ Unimplemented) PermitUserTeam(w http.ResponseWriter, r *http.Request, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// LoginAuth operation middleware
func (siw *ServerInterfaceWrapper) LoginAuth(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginAuth(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ExternalProviders operation middleware
func (siw *ServerInterfaceWrapper) ExternalProviders(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExternalProviders(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RefreshAuth operation middleware
func (siw *ServerInterfaceWrapper) RefreshAuth(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RefreshAuth(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// VerifyAuth operation middleware
func (siw *ServerInterfaceWrapper) VerifyAuth(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VerifyAuth(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ExternalCallback operation middleware
func (siw *ServerInterfaceWrapper) ExternalCallback(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider string

	err = runtime.BindStyledParameterWithOptions("simple", "provider", chi.URLParam(r, "provider"), &provider, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "provider", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ExternalCallbackParams

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	// ------------- Optional query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, false, "code", r.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExternalCallback(w, r, provider, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ExternalInitialize operation middleware
func (siw *ServerInterfaceWrapper) ExternalInitialize(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider string

	err = runtime.BindStyledParameterWithOptions("simple", "provider", chi.URLParam(r, "provider"), &provider, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "provider", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ExternalInitializeParams

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExternalInitialize(w, r, provider, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListFabrics operation middleware
func (siw *ServerInterfaceWrapper) ListFabrics(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFabricsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFabrics(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateFabric operation middleware
func (siw *ServerInterfaceWrapper) UpdateFabric(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateFabric(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteFabricFromBuild operation middleware
func (siw *ServerInterfaceWrapper) DeleteFabricFromBuild(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fabric_id" -------------
	var fabricId string

	err = runtime.BindStyledParameterWithOptions("simple", "fabric_id", chi.URLParam(r, "fabric_id"), &fabricId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fabric_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFabricFromBuild(w, r, fabricId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListFabricBuilds operation middleware
func (siw *ServerInterfaceWrapper) ListFabricBuilds(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fabric_id" -------------
	var fabricId string

	err = runtime.BindStyledParameterWithOptions("simple", "fabric_id", chi.URLParam(r, "fabric_id"), &fabricId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fabric_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFabricBuildsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFabricBuilds(w, r, fabricId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachFabricToBuild operation middleware
func (siw *ServerInterfaceWrapper) AttachFabricToBuild(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fabric_id" -------------
	var fabricId string

	err = runtime.BindStyledParameterWithOptions("simple", "fabric_id", chi.URLParam(r, "fabric_id"), &fabricId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fabric_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachFabricToBuild(w, r, fabricId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListForges operation middleware
func (siw *ServerInterfaceWrapper) ListForges(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListForgesParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListForges(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateForge operation middleware
func (siw *ServerInterfaceWrapper) UpdateForge(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateForge(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteForgeFromBuild operation middleware
func (siw *ServerInterfaceWrapper) DeleteForgeFromBuild(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "forge_id" -------------
	var forgeId string

	err = runtime.BindStyledParameterWithOptions("simple", "forge_id", chi.URLParam(r, "forge_id"), &forgeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "forge_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteForgeFromBuild(w, r, forgeId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListForgeBuilds operation middleware
func (siw *ServerInterfaceWrapper) ListForgeBuilds(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "forge_id" -------------
	var forgeId string

	err = runtime.BindStyledParameterWithOptions("simple", "forge_id", chi.URLParam(r, "forge_id"), &forgeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "forge_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListForgeBuildsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListForgeBuilds(w, r, forgeId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachForgeToBuild operation middleware
func (siw *ServerInterfaceWrapper) AttachForgeToBuild(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "forge_id" -------------
	var forgeId string

	err = runtime.BindStyledParameterWithOptions("simple", "forge_id", chi.URLParam(r, "forge_id"), &forgeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "forge_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachForgeToBuild(w, r, forgeId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListMinecrafts operation middleware
func (siw *ServerInterfaceWrapper) ListMinecrafts(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMinecraftsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMinecrafts(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateMinecraft operation middleware
func (siw *ServerInterfaceWrapper) UpdateMinecraft(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateMinecraft(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteMinecraftFromBuild operation middleware
func (siw *ServerInterfaceWrapper) DeleteMinecraftFromBuild(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "minecraft_id" -------------
	var minecraftId string

	err = runtime.BindStyledParameterWithOptions("simple", "minecraft_id", chi.URLParam(r, "minecraft_id"), &minecraftId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "minecraft_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMinecraftFromBuild(w, r, minecraftId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListMinecraftBuilds operation middleware
func (siw *ServerInterfaceWrapper) ListMinecraftBuilds(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "minecraft_id" -------------
	var minecraftId string

	err = runtime.BindStyledParameterWithOptions("simple", "minecraft_id", chi.URLParam(r, "minecraft_id"), &minecraftId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "minecraft_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMinecraftBuildsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMinecraftBuilds(w, r, minecraftId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachMinecraftToBuild operation middleware
func (siw *ServerInterfaceWrapper) AttachMinecraftToBuild(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "minecraft_id" -------------
	var minecraftId string

	err = runtime.BindStyledParameterWithOptions("simple", "minecraft_id", chi.URLParam(r, "minecraft_id"), &minecraftId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "minecraft_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachMinecraftToBuild(w, r, minecraftId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListMods operation middleware
func (siw *ServerInterfaceWrapper) ListMods(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListModsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMods(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateMod operation middleware
func (siw *ServerInterfaceWrapper) CreateMod(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMod(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteMod operation middleware
func (siw *ServerInterfaceWrapper) DeleteMod(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "mod_id" -------------
	var modId string

	err = runtime.BindStyledParameterWithOptions("simple", "mod_id", chi.URLParam(r, "mod_id"), &modId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mod_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMod(w, r, modId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowMod operation middleware
func (siw *ServerInterfaceWrapper) ShowMod(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "mod_id" -------------
	var modId string

	err = runtime.BindStyledParameterWithOptions("simple", "mod_id", chi.URLParam(r, "mod_id"), &modId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mod_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowMod(w, r, modId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateMod operation middleware
func (siw *ServerInterfaceWrapper) UpdateMod(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "mod_id" -------------
	var modId string

	err = runtime.BindStyledParameterWithOptions("simple", "mod_id", chi.URLParam(r, "mod_id"), &modId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mod_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateMod(w, r, modId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteModFromTeam operation middleware
func (siw *ServerInterfaceWrapper) DeleteModFromTeam(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "mod_id" -------------
	var modId string

	err = runtime.BindStyledParameterWithOptions("simple", "mod_id", chi.URLParam(r, "mod_id"), &modId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mod_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteModFromTeam(w, r, modId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListModTeams operation middleware
func (siw *ServerInterfaceWrapper) ListModTeams(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "mod_id" -------------
	var modId string

	err = runtime.BindStyledParameterWithOptions("simple", "mod_id", chi.URLParam(r, "mod_id"), &modId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mod_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListModTeamsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListModTeams(w, r, modId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachModToTeam operation middleware
func (siw *ServerInterfaceWrapper) AttachModToTeam(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "mod_id" -------------
	var modId string

	err = runtime.BindStyledParameterWithOptions("simple", "mod_id", chi.URLParam(r, "mod_id"), &modId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mod_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachModToTeam(w, r, modId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PermitModTeam operation middleware
func (siw *ServerInterfaceWrapper) PermitModTeam(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "mod_id" -------------
	var modId string

	err = runtime.BindStyledParameterWithOptions("simple", "mod_id", chi.URLParam(r, "mod_id"), &modId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mod_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PermitModTeam(w, r, modId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteModFromUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteModFromUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "mod_id" -------------
	var modId string

	err = runtime.BindStyledParameterWithOptions("simple", "mod_id", chi.URLParam(r, "mod_id"), &modId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mod_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteModFromUser(w, r, modId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListModUsers operation middleware
func (siw *ServerInterfaceWrapper) ListModUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "mod_id" -------------
	var modId string

	err = runtime.BindStyledParameterWithOptions("simple", "mod_id", chi.URLParam(r, "mod_id"), &modId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mod_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListModUsersParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListModUsers(w, r, modId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachModToUser operation middleware
func (siw *ServerInterfaceWrapper) AttachModToUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "mod_id" -------------
	var modId string

	err = runtime.BindStyledParameterWithOptions("simple", "mod_id", chi.URLParam(r, "mod_id"), &modId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mod_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachModToUser(w, r, modId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PermitModUser operation middleware
func (siw *ServerInterfaceWrapper) PermitModUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "mod_id" -------------
	var modId string

	err = runtime.BindStyledParameterWithOptions("simple", "mod_id", chi.URLParam(r, "mod_id"), &modId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mod_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PermitModUser(w, r, modId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListVersions operation middleware
func (siw *ServerInterfaceWrapper) ListVersions(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "mod_id" -------------
	var modId string

	err = runtime.BindStyledParameterWithOptions("simple", "mod_id", chi.URLParam(r, "mod_id"), &modId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mod_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListVersionsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListVersions(w, r, modId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateVersion operation middleware
func (siw *ServerInterfaceWrapper) CreateVersion(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "mod_id" -------------
	var modId string

	err = runtime.BindStyledParameterWithOptions("simple", "mod_id", chi.URLParam(r, "mod_id"), &modId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mod_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateVersion(w, r, modId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteVersion operation middleware
func (siw *ServerInterfaceWrapper) DeleteVersion(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "mod_id" -------------
	var modId string

	err = runtime.BindStyledParameterWithOptions("simple", "mod_id", chi.URLParam(r, "mod_id"), &modId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mod_id", Err: err})
		return
	}

	// ------------- Path parameter "version_id" -------------
	var versionId string

	err = runtime.BindStyledParameterWithOptions("simple", "version_id", chi.URLParam(r, "version_id"), &versionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteVersion(w, r, modId, versionId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowVersion operation middleware
func (siw *ServerInterfaceWrapper) ShowVersion(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "mod_id" -------------
	var modId string

	err = runtime.BindStyledParameterWithOptions("simple", "mod_id", chi.URLParam(r, "mod_id"), &modId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mod_id", Err: err})
		return
	}

	// ------------- Path parameter "version_id" -------------
	var versionId string

	err = runtime.BindStyledParameterWithOptions("simple", "version_id", chi.URLParam(r, "version_id"), &versionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowVersion(w, r, modId, versionId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateVersion operation middleware
func (siw *ServerInterfaceWrapper) UpdateVersion(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "mod_id" -------------
	var modId string

	err = runtime.BindStyledParameterWithOptions("simple", "mod_id", chi.URLParam(r, "mod_id"), &modId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mod_id", Err: err})
		return
	}

	// ------------- Path parameter "version_id" -------------
	var versionId string

	err = runtime.BindStyledParameterWithOptions("simple", "version_id", chi.URLParam(r, "version_id"), &versionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateVersion(w, r, modId, versionId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteVersionFromBuild operation middleware
func (siw *ServerInterfaceWrapper) DeleteVersionFromBuild(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "mod_id" -------------
	var modId string

	err = runtime.BindStyledParameterWithOptions("simple", "mod_id", chi.URLParam(r, "mod_id"), &modId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mod_id", Err: err})
		return
	}

	// ------------- Path parameter "version_id" -------------
	var versionId string

	err = runtime.BindStyledParameterWithOptions("simple", "version_id", chi.URLParam(r, "version_id"), &versionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteVersionFromBuild(w, r, modId, versionId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListVersionBuilds operation middleware
func (siw *ServerInterfaceWrapper) ListVersionBuilds(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "mod_id" -------------
	var modId string

	err = runtime.BindStyledParameterWithOptions("simple", "mod_id", chi.URLParam(r, "mod_id"), &modId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mod_id", Err: err})
		return
	}

	// ------------- Path parameter "version_id" -------------
	var versionId string

	err = runtime.BindStyledParameterWithOptions("simple", "version_id", chi.URLParam(r, "version_id"), &versionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListVersionBuildsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListVersionBuilds(w, r, modId, versionId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachVersionToBuild operation middleware
func (siw *ServerInterfaceWrapper) AttachVersionToBuild(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "mod_id" -------------
	var modId string

	err = runtime.BindStyledParameterWithOptions("simple", "mod_id", chi.URLParam(r, "mod_id"), &modId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mod_id", Err: err})
		return
	}

	// ------------- Path parameter "version_id" -------------
	var versionId string

	err = runtime.BindStyledParameterWithOptions("simple", "version_id", chi.URLParam(r, "version_id"), &versionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachVersionToBuild(w, r, modId, versionId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListNeoforges operation middleware
func (siw *ServerInterfaceWrapper) ListNeoforges(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListNeoforgesParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListNeoforges(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateNeoforge operation middleware
func (siw *ServerInterfaceWrapper) UpdateNeoforge(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateNeoforge(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteNeoforgeFromBuild operation middleware
func (siw *ServerInterfaceWrapper) DeleteNeoforgeFromBuild(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "neoforge_id" -------------
	var neoforgeId string

	err = runtime.BindStyledParameterWithOptions("simple", "neoforge_id", chi.URLParam(r, "neoforge_id"), &neoforgeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "neoforge_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteNeoforgeFromBuild(w, r, neoforgeId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListNeoforgeBuilds operation middleware
func (siw *ServerInterfaceWrapper) ListNeoforgeBuilds(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "neoforge_id" -------------
	var neoforgeId string

	err = runtime.BindStyledParameterWithOptions("simple", "neoforge_id", chi.URLParam(r, "neoforge_id"), &neoforgeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "neoforge_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListNeoforgeBuildsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListNeoforgeBuilds(w, r, neoforgeId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachNeoforgeToBuild operation middleware
func (siw *ServerInterfaceWrapper) AttachNeoforgeToBuild(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "neoforge_id" -------------
	var neoforgeId string

	err = runtime.BindStyledParameterWithOptions("simple", "neoforge_id", chi.URLParam(r, "neoforge_id"), &neoforgeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "neoforge_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachNeoforgeToBuild(w, r, neoforgeId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListPacks operation middleware
func (siw *ServerInterfaceWrapper) ListPacks(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPacksParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPacks(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreatePack operation middleware
func (siw *ServerInterfaceWrapper) CreatePack(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePack(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePack operation middleware
func (siw *ServerInterfaceWrapper) DeletePack(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "pack_id" -------------
	var packId string

	err = runtime.BindStyledParameterWithOptions("simple", "pack_id", chi.URLParam(r, "pack_id"), &packId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pack_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePack(w, r, packId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowPack operation middleware
func (siw *ServerInterfaceWrapper) ShowPack(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "pack_id" -------------
	var packId string

	err = runtime.BindStyledParameterWithOptions("simple", "pack_id", chi.URLParam(r, "pack_id"), &packId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pack_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowPack(w, r, packId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdatePack operation middleware
func (siw *ServerInterfaceWrapper) UpdatePack(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "pack_id" -------------
	var packId string

	err = runtime.BindStyledParameterWithOptions("simple", "pack_id", chi.URLParam(r, "pack_id"), &packId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pack_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePack(w, r, packId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListBuilds operation middleware
func (siw *ServerInterfaceWrapper) ListBuilds(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "pack_id" -------------
	var packId string

	err = runtime.BindStyledParameterWithOptions("simple", "pack_id", chi.URLParam(r, "pack_id"), &packId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pack_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListBuildsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListBuilds(w, r, packId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateBuild operation middleware
func (siw *ServerInterfaceWrapper) CreateBuild(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "pack_id" -------------
	var packId string

	err = runtime.BindStyledParameterWithOptions("simple", "pack_id", chi.URLParam(r, "pack_id"), &packId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pack_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateBuild(w, r, packId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteBuild operation middleware
func (siw *ServerInterfaceWrapper) DeleteBuild(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "pack_id" -------------
	var packId string

	err = runtime.BindStyledParameterWithOptions("simple", "pack_id", chi.URLParam(r, "pack_id"), &packId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pack_id", Err: err})
		return
	}

	// ------------- Path parameter "build_id" -------------
	var buildId string

	err = runtime.BindStyledParameterWithOptions("simple", "build_id", chi.URLParam(r, "build_id"), &buildId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "build_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteBuild(w, r, packId, buildId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowBuild operation middleware
func (siw *ServerInterfaceWrapper) ShowBuild(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "pack_id" -------------
	var packId string

	err = runtime.BindStyledParameterWithOptions("simple", "pack_id", chi.URLParam(r, "pack_id"), &packId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pack_id", Err: err})
		return
	}

	// ------------- Path parameter "build_id" -------------
	var buildId string

	err = runtime.BindStyledParameterWithOptions("simple", "build_id", chi.URLParam(r, "build_id"), &buildId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "build_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowBuild(w, r, packId, buildId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateBuild operation middleware
func (siw *ServerInterfaceWrapper) UpdateBuild(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "pack_id" -------------
	var packId string

	err = runtime.BindStyledParameterWithOptions("simple", "pack_id", chi.URLParam(r, "pack_id"), &packId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pack_id", Err: err})
		return
	}

	// ------------- Path parameter "build_id" -------------
	var buildId string

	err = runtime.BindStyledParameterWithOptions("simple", "build_id", chi.URLParam(r, "build_id"), &buildId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "build_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateBuild(w, r, packId, buildId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteBuildFromVersion operation middleware
func (siw *ServerInterfaceWrapper) DeleteBuildFromVersion(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "pack_id" -------------
	var packId string

	err = runtime.BindStyledParameterWithOptions("simple", "pack_id", chi.URLParam(r, "pack_id"), &packId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pack_id", Err: err})
		return
	}

	// ------------- Path parameter "build_id" -------------
	var buildId string

	err = runtime.BindStyledParameterWithOptions("simple", "build_id", chi.URLParam(r, "build_id"), &buildId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "build_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteBuildFromVersion(w, r, packId, buildId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListBuildVersions operation middleware
func (siw *ServerInterfaceWrapper) ListBuildVersions(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "pack_id" -------------
	var packId string

	err = runtime.BindStyledParameterWithOptions("simple", "pack_id", chi.URLParam(r, "pack_id"), &packId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pack_id", Err: err})
		return
	}

	// ------------- Path parameter "build_id" -------------
	var buildId string

	err = runtime.BindStyledParameterWithOptions("simple", "build_id", chi.URLParam(r, "build_id"), &buildId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "build_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListBuildVersionsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListBuildVersions(w, r, packId, buildId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachBuildToVersion operation middleware
func (siw *ServerInterfaceWrapper) AttachBuildToVersion(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "pack_id" -------------
	var packId string

	err = runtime.BindStyledParameterWithOptions("simple", "pack_id", chi.URLParam(r, "pack_id"), &packId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pack_id", Err: err})
		return
	}

	// ------------- Path parameter "build_id" -------------
	var buildId string

	err = runtime.BindStyledParameterWithOptions("simple", "build_id", chi.URLParam(r, "build_id"), &buildId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "build_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachBuildToVersion(w, r, packId, buildId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePackFromTeam operation middleware
func (siw *ServerInterfaceWrapper) DeletePackFromTeam(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "pack_id" -------------
	var packId string

	err = runtime.BindStyledParameterWithOptions("simple", "pack_id", chi.URLParam(r, "pack_id"), &packId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pack_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePackFromTeam(w, r, packId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListPackTeams operation middleware
func (siw *ServerInterfaceWrapper) ListPackTeams(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "pack_id" -------------
	var packId string

	err = runtime.BindStyledParameterWithOptions("simple", "pack_id", chi.URLParam(r, "pack_id"), &packId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pack_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPackTeamsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPackTeams(w, r, packId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachPackToTeam operation middleware
func (siw *ServerInterfaceWrapper) AttachPackToTeam(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "pack_id" -------------
	var packId string

	err = runtime.BindStyledParameterWithOptions("simple", "pack_id", chi.URLParam(r, "pack_id"), &packId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pack_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachPackToTeam(w, r, packId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PermitPackTeam operation middleware
func (siw *ServerInterfaceWrapper) PermitPackTeam(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "pack_id" -------------
	var packId string

	err = runtime.BindStyledParameterWithOptions("simple", "pack_id", chi.URLParam(r, "pack_id"), &packId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pack_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PermitPackTeam(w, r, packId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePackFromUser operation middleware
func (siw *ServerInterfaceWrapper) DeletePackFromUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "pack_id" -------------
	var packId string

	err = runtime.BindStyledParameterWithOptions("simple", "pack_id", chi.URLParam(r, "pack_id"), &packId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pack_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePackFromUser(w, r, packId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListPackUsers operation middleware
func (siw *ServerInterfaceWrapper) ListPackUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "pack_id" -------------
	var packId string

	err = runtime.BindStyledParameterWithOptions("simple", "pack_id", chi.URLParam(r, "pack_id"), &packId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pack_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPackUsersParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPackUsers(w, r, packId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachPackToUser operation middleware
func (siw *ServerInterfaceWrapper) AttachPackToUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "pack_id" -------------
	var packId string

	err = runtime.BindStyledParameterWithOptions("simple", "pack_id", chi.URLParam(r, "pack_id"), &packId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pack_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachPackToUser(w, r, packId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PermitPackUser operation middleware
func (siw *ServerInterfaceWrapper) PermitPackUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "pack_id" -------------
	var packId string

	err = runtime.BindStyledParameterWithOptions("simple", "pack_id", chi.URLParam(r, "pack_id"), &packId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pack_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PermitPackUser(w, r, packId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowProfile operation middleware
func (siw *ServerInterfaceWrapper) ShowProfile(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowProfile(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProfile operation middleware
func (siw *ServerInterfaceWrapper) UpdateProfile(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProfile(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// TokenProfile operation middleware
func (siw *ServerInterfaceWrapper) TokenProfile(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TokenProfile(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListQuilts operation middleware
func (siw *ServerInterfaceWrapper) ListQuilts(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListQuiltsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListQuilts(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateQuilt operation middleware
func (siw *ServerInterfaceWrapper) UpdateQuilt(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateQuilt(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteQuiltFromBuild operation middleware
func (siw *ServerInterfaceWrapper) DeleteQuiltFromBuild(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "quilt_id" -------------
	var quiltId string

	err = runtime.BindStyledParameterWithOptions("simple", "quilt_id", chi.URLParam(r, "quilt_id"), &quiltId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "quilt_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteQuiltFromBuild(w, r, quiltId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListQuiltBuilds operation middleware
func (siw *ServerInterfaceWrapper) ListQuiltBuilds(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "quilt_id" -------------
	var quiltId string

	err = runtime.BindStyledParameterWithOptions("simple", "quilt_id", chi.URLParam(r, "quilt_id"), &quiltId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "quilt_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListQuiltBuildsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListQuiltBuilds(w, r, quiltId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachQuiltToBuild operation middleware
func (siw *ServerInterfaceWrapper) AttachQuiltToBuild(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "quilt_id" -------------
	var quiltId string

	err = runtime.BindStyledParameterWithOptions("simple", "quilt_id", chi.URLParam(r, "quilt_id"), &quiltId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "quilt_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachQuiltToBuild(w, r, quiltId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTeams operation middleware
func (siw *ServerInterfaceWrapper) ListTeams(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTeamsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTeams(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateTeam operation middleware
func (siw *ServerInterfaceWrapper) CreateTeam(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTeam(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTeam operation middleware
func (siw *ServerInterfaceWrapper) DeleteTeam(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "team_id" -------------
	var teamId string

	err = runtime.BindStyledParameterWithOptions("simple", "team_id", chi.URLParam(r, "team_id"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTeam(w, r, teamId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowTeam operation middleware
func (siw *ServerInterfaceWrapper) ShowTeam(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "team_id" -------------
	var teamId string

	err = runtime.BindStyledParameterWithOptions("simple", "team_id", chi.URLParam(r, "team_id"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowTeam(w, r, teamId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateTeam operation middleware
func (siw *ServerInterfaceWrapper) UpdateTeam(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "team_id" -------------
	var teamId string

	err = runtime.BindStyledParameterWithOptions("simple", "team_id", chi.URLParam(r, "team_id"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTeam(w, r, teamId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTeamFromMod operation middleware
func (siw *ServerInterfaceWrapper) DeleteTeamFromMod(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "team_id" -------------
	var teamId string

	err = runtime.BindStyledParameterWithOptions("simple", "team_id", chi.URLParam(r, "team_id"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTeamFromMod(w, r, teamId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTeamMods operation middleware
func (siw *ServerInterfaceWrapper) ListTeamMods(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "team_id" -------------
	var teamId string

	err = runtime.BindStyledParameterWithOptions("simple", "team_id", chi.URLParam(r, "team_id"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTeamModsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTeamMods(w, r, teamId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachTeamToMod operation middleware
func (siw *ServerInterfaceWrapper) AttachTeamToMod(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "team_id" -------------
	var teamId string

	err = runtime.BindStyledParameterWithOptions("simple", "team_id", chi.URLParam(r, "team_id"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachTeamToMod(w, r, teamId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PermitTeamMod operation middleware
func (siw *ServerInterfaceWrapper) PermitTeamMod(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "team_id" -------------
	var teamId string

	err = runtime.BindStyledParameterWithOptions("simple", "team_id", chi.URLParam(r, "team_id"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PermitTeamMod(w, r, teamId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTeamFromPack operation middleware
func (siw *ServerInterfaceWrapper) DeleteTeamFromPack(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "team_id" -------------
	var teamId string

	err = runtime.BindStyledParameterWithOptions("simple", "team_id", chi.URLParam(r, "team_id"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTeamFromPack(w, r, teamId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTeamPacks operation middleware
func (siw *ServerInterfaceWrapper) ListTeamPacks(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "team_id" -------------
	var teamId string

	err = runtime.BindStyledParameterWithOptions("simple", "team_id", chi.URLParam(r, "team_id"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTeamPacksParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTeamPacks(w, r, teamId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachTeamToPack operation middleware
func (siw *ServerInterfaceWrapper) AttachTeamToPack(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "team_id" -------------
	var teamId string

	err = runtime.BindStyledParameterWithOptions("simple", "team_id", chi.URLParam(r, "team_id"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachTeamToPack(w, r, teamId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PermitTeamPack operation middleware
func (siw *ServerInterfaceWrapper) PermitTeamPack(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "team_id" -------------
	var teamId string

	err = runtime.BindStyledParameterWithOptions("simple", "team_id", chi.URLParam(r, "team_id"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PermitTeamPack(w, r, teamId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTeamFromUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteTeamFromUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "team_id" -------------
	var teamId string

	err = runtime.BindStyledParameterWithOptions("simple", "team_id", chi.URLParam(r, "team_id"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTeamFromUser(w, r, teamId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTeamUsers operation middleware
func (siw *ServerInterfaceWrapper) ListTeamUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "team_id" -------------
	var teamId string

	err = runtime.BindStyledParameterWithOptions("simple", "team_id", chi.URLParam(r, "team_id"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTeamUsersParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTeamUsers(w, r, teamId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachTeamToUser operation middleware
func (siw *ServerInterfaceWrapper) AttachTeamToUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "team_id" -------------
	var teamId string

	err = runtime.BindStyledParameterWithOptions("simple", "team_id", chi.URLParam(r, "team_id"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachTeamToUser(w, r, teamId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PermitTeamUser operation middleware
func (siw *ServerInterfaceWrapper) PermitTeamUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "team_id" -------------
	var teamId string

	err = runtime.BindStyledParameterWithOptions("simple", "team_id", chi.URLParam(r, "team_id"), &teamId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "team_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PermitTeamUser(w, r, teamId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsersParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUsers(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r, userId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowUser operation middleware
func (siw *ServerInterfaceWrapper) ShowUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowUser(w, r, userId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r, userId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUserFromMod operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserFromMod(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUserFromMod(w, r, userId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListUserMods operation middleware
func (siw *ServerInterfaceWrapper) ListUserMods(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUserModsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUserMods(w, r, userId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachUserToMod operation middleware
func (siw *ServerInterfaceWrapper) AttachUserToMod(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachUserToMod(w, r, userId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PermitUserMod operation middleware
func (siw *ServerInterfaceWrapper) PermitUserMod(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PermitUserMod(w, r, userId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUserFromPack operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserFromPack(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUserFromPack(w, r, userId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListUserPacks operation middleware
func (siw *ServerInterfaceWrapper) ListUserPacks(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUserPacksParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUserPacks(w, r, userId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachUserToPack operation middleware
func (siw *ServerInterfaceWrapper) AttachUserToPack(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachUserToPack(w, r, userId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PermitUserPack operation middleware
func (siw *ServerInterfaceWrapper) PermitUserPack(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PermitUserPack(w, r, userId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUserFromTeam operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserFromTeam(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUserFromTeam(w, r, userId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListUserTeams operation middleware
func (siw *ServerInterfaceWrapper) ListUserTeams(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUserTeamsParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUserTeams(w, r, userId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AttachUserToTeam operation middleware
func (siw *ServerInterfaceWrapper) AttachUserToTeam(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AttachUserToTeam(w, r, userId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PermitUserTeam operation middleware
func (siw *ServerInterfaceWrapper) PermitUserTeam(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, HeaderScopes, []string{})

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	ctx = context.WithValue(ctx, BasicScopes, []string{})

	ctx = context.WithValue(ctx, CookieScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PermitUserTeam(w, r, userId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/login", wrapper.LoginAuth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/providers", wrapper.ExternalProviders)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/refresh", wrapper.RefreshAuth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/verify", wrapper.VerifyAuth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/{provider}/callback", wrapper.ExternalCallback)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/{provider}/initialize", wrapper.ExternalInitialize)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/fabric", wrapper.ListFabrics)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/fabric", wrapper.UpdateFabric)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/fabric/{fabric_id}/builds", wrapper.DeleteFabricFromBuild)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/fabric/{fabric_id}/builds", wrapper.ListFabricBuilds)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/fabric/{fabric_id}/builds", wrapper.AttachFabricToBuild)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/forge", wrapper.ListForges)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/forge", wrapper.UpdateForge)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/forge/{forge_id}/builds", wrapper.DeleteForgeFromBuild)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/forge/{forge_id}/builds", wrapper.ListForgeBuilds)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/forge/{forge_id}/builds", wrapper.AttachForgeToBuild)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/minecraft", wrapper.ListMinecrafts)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/minecraft", wrapper.UpdateMinecraft)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/minecraft/{minecraft_id}/builds", wrapper.DeleteMinecraftFromBuild)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/minecraft/{minecraft_id}/builds", wrapper.ListMinecraftBuilds)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/minecraft/{minecraft_id}/builds", wrapper.AttachMinecraftToBuild)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/mods", wrapper.ListMods)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/mods", wrapper.CreateMod)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/mods/{mod_id}", wrapper.DeleteMod)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/mods/{mod_id}", wrapper.ShowMod)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/mods/{mod_id}", wrapper.UpdateMod)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/mods/{mod_id}/teams", wrapper.DeleteModFromTeam)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/mods/{mod_id}/teams", wrapper.ListModTeams)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/mods/{mod_id}/teams", wrapper.AttachModToTeam)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/mods/{mod_id}/teams", wrapper.PermitModTeam)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/mods/{mod_id}/users", wrapper.DeleteModFromUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/mods/{mod_id}/users", wrapper.ListModUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/mods/{mod_id}/users", wrapper.AttachModToUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/mods/{mod_id}/users", wrapper.PermitModUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/mods/{mod_id}/versions", wrapper.ListVersions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/mods/{mod_id}/versions", wrapper.CreateVersion)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/mods/{mod_id}/versions/{version_id}", wrapper.DeleteVersion)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/mods/{mod_id}/versions/{version_id}", wrapper.ShowVersion)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/mods/{mod_id}/versions/{version_id}", wrapper.UpdateVersion)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/mods/{mod_id}/versions/{version_id}/builds", wrapper.DeleteVersionFromBuild)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/mods/{mod_id}/versions/{version_id}/builds", wrapper.ListVersionBuilds)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/mods/{mod_id}/versions/{version_id}/builds", wrapper.AttachVersionToBuild)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/neoforge", wrapper.ListNeoforges)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/neoforge", wrapper.UpdateNeoforge)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/neoforge/{neoforge_id}/builds", wrapper.DeleteNeoforgeFromBuild)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/neoforge/{neoforge_id}/builds", wrapper.ListNeoforgeBuilds)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/neoforge/{neoforge_id}/builds", wrapper.AttachNeoforgeToBuild)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/packs", wrapper.ListPacks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/packs", wrapper.CreatePack)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/packs/{pack_id}", wrapper.DeletePack)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/packs/{pack_id}", wrapper.ShowPack)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/packs/{pack_id}", wrapper.UpdatePack)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/packs/{pack_id}/builds", wrapper.ListBuilds)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/packs/{pack_id}/builds", wrapper.CreateBuild)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/packs/{pack_id}/builds/{build_id}", wrapper.DeleteBuild)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/packs/{pack_id}/builds/{build_id}", wrapper.ShowBuild)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/packs/{pack_id}/builds/{build_id}", wrapper.UpdateBuild)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/packs/{pack_id}/builds/{build_id}/versions", wrapper.DeleteBuildFromVersion)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/packs/{pack_id}/builds/{build_id}/versions", wrapper.ListBuildVersions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/packs/{pack_id}/builds/{build_id}/versions", wrapper.AttachBuildToVersion)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/packs/{pack_id}/teams", wrapper.DeletePackFromTeam)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/packs/{pack_id}/teams", wrapper.ListPackTeams)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/packs/{pack_id}/teams", wrapper.AttachPackToTeam)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/packs/{pack_id}/teams", wrapper.PermitPackTeam)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/packs/{pack_id}/users", wrapper.DeletePackFromUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/packs/{pack_id}/users", wrapper.ListPackUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/packs/{pack_id}/users", wrapper.AttachPackToUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/packs/{pack_id}/users", wrapper.PermitPackUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/profile/self", wrapper.ShowProfile)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/profile/self", wrapper.UpdateProfile)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/profile/token", wrapper.TokenProfile)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/quilt", wrapper.ListQuilts)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/quilt", wrapper.UpdateQuilt)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/quilt/{quilt_id}/builds", wrapper.DeleteQuiltFromBuild)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/quilt/{quilt_id}/builds", wrapper.ListQuiltBuilds)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/quilt/{quilt_id}/builds", wrapper.AttachQuiltToBuild)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/teams", wrapper.ListTeams)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/teams", wrapper.CreateTeam)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/teams/{team_id}", wrapper.DeleteTeam)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/teams/{team_id}", wrapper.ShowTeam)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/teams/{team_id}", wrapper.UpdateTeam)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/teams/{team_id}/mods", wrapper.DeleteTeamFromMod)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/teams/{team_id}/mods", wrapper.ListTeamMods)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/teams/{team_id}/mods", wrapper.AttachTeamToMod)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/teams/{team_id}/mods", wrapper.PermitTeamMod)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/teams/{team_id}/packs", wrapper.DeleteTeamFromPack)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/teams/{team_id}/packs", wrapper.ListTeamPacks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/teams/{team_id}/packs", wrapper.AttachTeamToPack)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/teams/{team_id}/packs", wrapper.PermitTeamPack)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/teams/{team_id}/users", wrapper.DeleteTeamFromUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/teams/{team_id}/users", wrapper.ListTeamUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/teams/{team_id}/users", wrapper.AttachTeamToUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/teams/{team_id}/users", wrapper.PermitTeamUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users", wrapper.ListUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/{user_id}", wrapper.DeleteUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{user_id}", wrapper.ShowUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/users/{user_id}", wrapper.UpdateUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/{user_id}/mods", wrapper.DeleteUserFromMod)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{user_id}/mods", wrapper.ListUserMods)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/{user_id}/mods", wrapper.AttachUserToMod)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/users/{user_id}/mods", wrapper.PermitUserMod)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/{user_id}/packs", wrapper.DeleteUserFromPack)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{user_id}/packs", wrapper.ListUserPacks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/{user_id}/packs", wrapper.AttachUserToPack)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/users/{user_id}/packs", wrapper.PermitUserPack)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/{user_id}/teams", wrapper.DeleteUserFromTeam)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{user_id}/teams", wrapper.ListUserTeams)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/{user_id}/teams", wrapper.AttachUserToTeam)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/users/{user_id}/teams", wrapper.PermitUserTeam)
	})

	return r
}

type LoginAuthRequestObject struct {
	Body *LoginAuthJSONRequestBody
}

type LoginAuthResponseObject interface {
	VisitLoginAuthResponse(w http.ResponseWriter) error
}

type LoginAuth200JSONResponse AuthToken

func (response LoginAuth200JSONResponse) VisitLoginAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoginAuth401JSONResponse Notification

func (response LoginAuth401JSONResponse) VisitLoginAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type LoginAuth500JSONResponse Notification

func (response LoginAuth500JSONResponse) VisitLoginAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type LoginAuthdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response LoginAuthdefaultJSONResponse) VisitLoginAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ExternalProvidersRequestObject struct {
}

type ExternalProvidersResponseObject interface {
	VisitExternalProvidersResponse(w http.ResponseWriter) error
}

type ExternalProviders200JSONResponse Providers

func (response ExternalProviders200JSONResponse) VisitExternalProvidersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ExternalProviders500JSONResponse Notification

func (response ExternalProviders500JSONResponse) VisitExternalProvidersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ExternalProvidersdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ExternalProvidersdefaultJSONResponse) VisitExternalProvidersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RefreshAuthRequestObject struct {
}

type RefreshAuthResponseObject interface {
	VisitRefreshAuthResponse(w http.ResponseWriter) error
}

type RefreshAuth200JSONResponse AuthToken

func (response RefreshAuth200JSONResponse) VisitRefreshAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RefreshAuth401JSONResponse Notification

func (response RefreshAuth401JSONResponse) VisitRefreshAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RefreshAuth500JSONResponse Notification

func (response RefreshAuth500JSONResponse) VisitRefreshAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RefreshAuthdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response RefreshAuthdefaultJSONResponse) VisitRefreshAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyAuthRequestObject struct {
}

type VerifyAuthResponseObject interface {
	VisitVerifyAuthResponse(w http.ResponseWriter) error
}

type VerifyAuth200JSONResponse AuthVerify

func (response VerifyAuth200JSONResponse) VisitVerifyAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifyAuth401JSONResponse Notification

func (response VerifyAuth401JSONResponse) VisitVerifyAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type VerifyAuth500JSONResponse Notification

func (response VerifyAuth500JSONResponse) VisitVerifyAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type VerifyAuthdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response VerifyAuthdefaultJSONResponse) VisitVerifyAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ExternalCallbackRequestObject struct {
	Provider string `json:"provider"`
	Params   ExternalCallbackParams
}

type ExternalCallbackResponseObject interface {
	VisitExternalCallbackResponse(w http.ResponseWriter) error
}

type ExternalCallback307Response struct {
}

func (response ExternalCallback307Response) VisitExternalCallbackResponse(w http.ResponseWriter) error {
	w.WriteHeader(307)
	return nil
}

type ExternalCallback404JSONResponse Notification

func (response ExternalCallback404JSONResponse) VisitExternalCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ExternalCallback412JSONResponse Notification

func (response ExternalCallback412JSONResponse) VisitExternalCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type ExternalCallbackdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ExternalCallbackdefaultJSONResponse) VisitExternalCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ExternalInitializeRequestObject struct {
	Provider string `json:"provider"`
	Params   ExternalInitializeParams
}

type ExternalInitializeResponseObject interface {
	VisitExternalInitializeResponse(w http.ResponseWriter) error
}

type ExternalInitialize307Response struct {
}

func (response ExternalInitialize307Response) VisitExternalInitializeResponse(w http.ResponseWriter) error {
	w.WriteHeader(307)
	return nil
}

type ExternalInitialize404JSONResponse Notification

func (response ExternalInitialize404JSONResponse) VisitExternalInitializeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ExternalInitialize412JSONResponse Notification

func (response ExternalInitialize412JSONResponse) VisitExternalInitializeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type ExternalInitializedefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ExternalInitializedefaultJSONResponse) VisitExternalInitializeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListFabricsRequestObject struct {
	Params ListFabricsParams
}

type ListFabricsResponseObject interface {
	VisitListFabricsResponse(w http.ResponseWriter) error
}

type ListFabrics200JSONResponse Fabrics

func (response ListFabrics200JSONResponse) VisitListFabricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListFabrics403JSONResponse Notification

func (response ListFabrics403JSONResponse) VisitListFabricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListFabrics500JSONResponse Notification

func (response ListFabrics500JSONResponse) VisitListFabricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListFabricsdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ListFabricsdefaultJSONResponse) VisitListFabricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateFabricRequestObject struct {
}

type UpdateFabricResponseObject interface {
	VisitUpdateFabricResponse(w http.ResponseWriter) error
}

type UpdateFabric200JSONResponse Notification

func (response UpdateFabric200JSONResponse) VisitUpdateFabricResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFabric403JSONResponse Notification

func (response UpdateFabric403JSONResponse) VisitUpdateFabricResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFabric500JSONResponse Notification

func (response UpdateFabric500JSONResponse) VisitUpdateFabricResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFabric503JSONResponse Notification

func (response UpdateFabric503JSONResponse) VisitUpdateFabricResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFabricdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response UpdateFabricdefaultJSONResponse) VisitUpdateFabricResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteFabricFromBuildRequestObject struct {
	FabricId string `json:"fabric_id"`
	Body     *DeleteFabricFromBuildJSONRequestBody
}

type DeleteFabricFromBuildResponseObject interface {
	VisitDeleteFabricFromBuildResponse(w http.ResponseWriter) error
}

type DeleteFabricFromBuild200JSONResponse Notification

func (response DeleteFabricFromBuild200JSONResponse) VisitDeleteFabricFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFabricFromBuild403JSONResponse Notification

func (response DeleteFabricFromBuild403JSONResponse) VisitDeleteFabricFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFabricFromBuild404JSONResponse Notification

func (response DeleteFabricFromBuild404JSONResponse) VisitDeleteFabricFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFabricFromBuild412JSONResponse Notification

func (response DeleteFabricFromBuild412JSONResponse) VisitDeleteFabricFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFabricFromBuild500JSONResponse Notification

func (response DeleteFabricFromBuild500JSONResponse) VisitDeleteFabricFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFabricFromBuilddefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response DeleteFabricFromBuilddefaultJSONResponse) VisitDeleteFabricFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListFabricBuildsRequestObject struct {
	FabricId string `json:"fabric_id"`
	Params   ListFabricBuildsParams
}

type ListFabricBuildsResponseObject interface {
	VisitListFabricBuildsResponse(w http.ResponseWriter) error
}

type ListFabricBuilds200JSONResponse FabricBuilds

func (response ListFabricBuilds200JSONResponse) VisitListFabricBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListFabricBuilds403JSONResponse Notification

func (response ListFabricBuilds403JSONResponse) VisitListFabricBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListFabricBuilds404JSONResponse Notification

func (response ListFabricBuilds404JSONResponse) VisitListFabricBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListFabricBuilds500JSONResponse Notification

func (response ListFabricBuilds500JSONResponse) VisitListFabricBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListFabricBuildsdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ListFabricBuildsdefaultJSONResponse) VisitListFabricBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AttachFabricToBuildRequestObject struct {
	FabricId string `json:"fabric_id"`
	Body     *AttachFabricToBuildJSONRequestBody
}

type AttachFabricToBuildResponseObject interface {
	VisitAttachFabricToBuildResponse(w http.ResponseWriter) error
}

type AttachFabricToBuild200JSONResponse Notification

func (response AttachFabricToBuild200JSONResponse) VisitAttachFabricToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachFabricToBuild403JSONResponse Notification

func (response AttachFabricToBuild403JSONResponse) VisitAttachFabricToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachFabricToBuild404JSONResponse Notification

func (response AttachFabricToBuild404JSONResponse) VisitAttachFabricToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachFabricToBuild412JSONResponse Notification

func (response AttachFabricToBuild412JSONResponse) VisitAttachFabricToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachFabricToBuild422JSONResponse Notification

func (response AttachFabricToBuild422JSONResponse) VisitAttachFabricToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachFabricToBuild500JSONResponse Notification

func (response AttachFabricToBuild500JSONResponse) VisitAttachFabricToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachFabricToBuilddefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response AttachFabricToBuilddefaultJSONResponse) VisitAttachFabricToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListForgesRequestObject struct {
	Params ListForgesParams
}

type ListForgesResponseObject interface {
	VisitListForgesResponse(w http.ResponseWriter) error
}

type ListForges200JSONResponse Forges

func (response ListForges200JSONResponse) VisitListForgesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListForges403JSONResponse Notification

func (response ListForges403JSONResponse) VisitListForgesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListForges500JSONResponse Notification

func (response ListForges500JSONResponse) VisitListForgesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListForgesdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ListForgesdefaultJSONResponse) VisitListForgesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateForgeRequestObject struct {
}

type UpdateForgeResponseObject interface {
	VisitUpdateForgeResponse(w http.ResponseWriter) error
}

type UpdateForge200JSONResponse Notification

func (response UpdateForge200JSONResponse) VisitUpdateForgeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateForge403JSONResponse Notification

func (response UpdateForge403JSONResponse) VisitUpdateForgeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateForge500JSONResponse Notification

func (response UpdateForge500JSONResponse) VisitUpdateForgeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateForge503JSONResponse Notification

func (response UpdateForge503JSONResponse) VisitUpdateForgeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type UpdateForgedefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response UpdateForgedefaultJSONResponse) VisitUpdateForgeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteForgeFromBuildRequestObject struct {
	ForgeId string `json:"forge_id"`
	Body    *DeleteForgeFromBuildJSONRequestBody
}

type DeleteForgeFromBuildResponseObject interface {
	VisitDeleteForgeFromBuildResponse(w http.ResponseWriter) error
}

type DeleteForgeFromBuild200JSONResponse Notification

func (response DeleteForgeFromBuild200JSONResponse) VisitDeleteForgeFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteForgeFromBuild403JSONResponse Notification

func (response DeleteForgeFromBuild403JSONResponse) VisitDeleteForgeFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteForgeFromBuild404JSONResponse Notification

func (response DeleteForgeFromBuild404JSONResponse) VisitDeleteForgeFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteForgeFromBuild412JSONResponse Notification

func (response DeleteForgeFromBuild412JSONResponse) VisitDeleteForgeFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeleteForgeFromBuild500JSONResponse Notification

func (response DeleteForgeFromBuild500JSONResponse) VisitDeleteForgeFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteForgeFromBuilddefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response DeleteForgeFromBuilddefaultJSONResponse) VisitDeleteForgeFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListForgeBuildsRequestObject struct {
	ForgeId string `json:"forge_id"`
	Params  ListForgeBuildsParams
}

type ListForgeBuildsResponseObject interface {
	VisitListForgeBuildsResponse(w http.ResponseWriter) error
}

type ListForgeBuilds200JSONResponse ForgeBuilds

func (response ListForgeBuilds200JSONResponse) VisitListForgeBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListForgeBuilds403JSONResponse Notification

func (response ListForgeBuilds403JSONResponse) VisitListForgeBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListForgeBuilds404JSONResponse Notification

func (response ListForgeBuilds404JSONResponse) VisitListForgeBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListForgeBuilds500JSONResponse Notification

func (response ListForgeBuilds500JSONResponse) VisitListForgeBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListForgeBuildsdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ListForgeBuildsdefaultJSONResponse) VisitListForgeBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AttachForgeToBuildRequestObject struct {
	ForgeId string `json:"forge_id"`
	Body    *AttachForgeToBuildJSONRequestBody
}

type AttachForgeToBuildResponseObject interface {
	VisitAttachForgeToBuildResponse(w http.ResponseWriter) error
}

type AttachForgeToBuild200JSONResponse Notification

func (response AttachForgeToBuild200JSONResponse) VisitAttachForgeToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachForgeToBuild403JSONResponse Notification

func (response AttachForgeToBuild403JSONResponse) VisitAttachForgeToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachForgeToBuild404JSONResponse Notification

func (response AttachForgeToBuild404JSONResponse) VisitAttachForgeToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachForgeToBuild412JSONResponse Notification

func (response AttachForgeToBuild412JSONResponse) VisitAttachForgeToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachForgeToBuild422JSONResponse Notification

func (response AttachForgeToBuild422JSONResponse) VisitAttachForgeToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachForgeToBuild500JSONResponse Notification

func (response AttachForgeToBuild500JSONResponse) VisitAttachForgeToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachForgeToBuilddefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response AttachForgeToBuilddefaultJSONResponse) VisitAttachForgeToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListMinecraftsRequestObject struct {
	Params ListMinecraftsParams
}

type ListMinecraftsResponseObject interface {
	VisitListMinecraftsResponse(w http.ResponseWriter) error
}

type ListMinecrafts200JSONResponse Minecrafts

func (response ListMinecrafts200JSONResponse) VisitListMinecraftsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListMinecrafts403JSONResponse Notification

func (response ListMinecrafts403JSONResponse) VisitListMinecraftsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListMinecrafts500JSONResponse Notification

func (response ListMinecrafts500JSONResponse) VisitListMinecraftsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListMinecraftsdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ListMinecraftsdefaultJSONResponse) VisitListMinecraftsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateMinecraftRequestObject struct {
}

type UpdateMinecraftResponseObject interface {
	VisitUpdateMinecraftResponse(w http.ResponseWriter) error
}

type UpdateMinecraft200JSONResponse Notification

func (response UpdateMinecraft200JSONResponse) VisitUpdateMinecraftResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMinecraft403JSONResponse Notification

func (response UpdateMinecraft403JSONResponse) VisitUpdateMinecraftResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMinecraft500JSONResponse Notification

func (response UpdateMinecraft500JSONResponse) VisitUpdateMinecraftResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMinecraft503JSONResponse Notification

func (response UpdateMinecraft503JSONResponse) VisitUpdateMinecraftResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMinecraftdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response UpdateMinecraftdefaultJSONResponse) VisitUpdateMinecraftResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteMinecraftFromBuildRequestObject struct {
	MinecraftId string `json:"minecraft_id"`
	Body        *DeleteMinecraftFromBuildJSONRequestBody
}

type DeleteMinecraftFromBuildResponseObject interface {
	VisitDeleteMinecraftFromBuildResponse(w http.ResponseWriter) error
}

type DeleteMinecraftFromBuild200JSONResponse Notification

func (response DeleteMinecraftFromBuild200JSONResponse) VisitDeleteMinecraftFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMinecraftFromBuild403JSONResponse Notification

func (response DeleteMinecraftFromBuild403JSONResponse) VisitDeleteMinecraftFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMinecraftFromBuild404JSONResponse Notification

func (response DeleteMinecraftFromBuild404JSONResponse) VisitDeleteMinecraftFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMinecraftFromBuild412JSONResponse Notification

func (response DeleteMinecraftFromBuild412JSONResponse) VisitDeleteMinecraftFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMinecraftFromBuild500JSONResponse Notification

func (response DeleteMinecraftFromBuild500JSONResponse) VisitDeleteMinecraftFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMinecraftFromBuilddefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response DeleteMinecraftFromBuilddefaultJSONResponse) VisitDeleteMinecraftFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListMinecraftBuildsRequestObject struct {
	MinecraftId string `json:"minecraft_id"`
	Params      ListMinecraftBuildsParams
}

type ListMinecraftBuildsResponseObject interface {
	VisitListMinecraftBuildsResponse(w http.ResponseWriter) error
}

type ListMinecraftBuilds200JSONResponse MinecraftBuilds

func (response ListMinecraftBuilds200JSONResponse) VisitListMinecraftBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListMinecraftBuilds403JSONResponse Notification

func (response ListMinecraftBuilds403JSONResponse) VisitListMinecraftBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListMinecraftBuilds404JSONResponse Notification

func (response ListMinecraftBuilds404JSONResponse) VisitListMinecraftBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListMinecraftBuilds500JSONResponse Notification

func (response ListMinecraftBuilds500JSONResponse) VisitListMinecraftBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListMinecraftBuildsdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ListMinecraftBuildsdefaultJSONResponse) VisitListMinecraftBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AttachMinecraftToBuildRequestObject struct {
	MinecraftId string `json:"minecraft_id"`
	Body        *AttachMinecraftToBuildJSONRequestBody
}

type AttachMinecraftToBuildResponseObject interface {
	VisitAttachMinecraftToBuildResponse(w http.ResponseWriter) error
}

type AttachMinecraftToBuild200JSONResponse Notification

func (response AttachMinecraftToBuild200JSONResponse) VisitAttachMinecraftToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachMinecraftToBuild403JSONResponse Notification

func (response AttachMinecraftToBuild403JSONResponse) VisitAttachMinecraftToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachMinecraftToBuild404JSONResponse Notification

func (response AttachMinecraftToBuild404JSONResponse) VisitAttachMinecraftToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachMinecraftToBuild412JSONResponse Notification

func (response AttachMinecraftToBuild412JSONResponse) VisitAttachMinecraftToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachMinecraftToBuild422JSONResponse Notification

func (response AttachMinecraftToBuild422JSONResponse) VisitAttachMinecraftToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachMinecraftToBuild500JSONResponse Notification

func (response AttachMinecraftToBuild500JSONResponse) VisitAttachMinecraftToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachMinecraftToBuilddefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response AttachMinecraftToBuilddefaultJSONResponse) VisitAttachMinecraftToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListModsRequestObject struct {
	Params ListModsParams
}

type ListModsResponseObject interface {
	VisitListModsResponse(w http.ResponseWriter) error
}

type ListMods200JSONResponse Mods

func (response ListMods200JSONResponse) VisitListModsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListMods403JSONResponse Notification

func (response ListMods403JSONResponse) VisitListModsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListMods500JSONResponse Notification

func (response ListMods500JSONResponse) VisitListModsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListModsdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ListModsdefaultJSONResponse) VisitListModsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateModRequestObject struct {
	Body *CreateModJSONRequestBody
}

type CreateModResponseObject interface {
	VisitCreateModResponse(w http.ResponseWriter) error
}

type CreateMod200JSONResponse Mod

func (response CreateMod200JSONResponse) VisitCreateModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateMod403JSONResponse Notification

func (response CreateMod403JSONResponse) VisitCreateModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateMod422JSONResponse Notification

func (response CreateMod422JSONResponse) VisitCreateModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateMod500JSONResponse Notification

func (response CreateMod500JSONResponse) VisitCreateModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateModdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response CreateModdefaultJSONResponse) VisitCreateModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteModRequestObject struct {
	ModId string `json:"mod_id"`
}

type DeleteModResponseObject interface {
	VisitDeleteModResponse(w http.ResponseWriter) error
}

type DeleteMod200JSONResponse Notification

func (response DeleteMod200JSONResponse) VisitDeleteModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMod400JSONResponse Notification

func (response DeleteMod400JSONResponse) VisitDeleteModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMod403JSONResponse Notification

func (response DeleteMod403JSONResponse) VisitDeleteModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMod404JSONResponse Notification

func (response DeleteMod404JSONResponse) VisitDeleteModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMod500JSONResponse Notification

func (response DeleteMod500JSONResponse) VisitDeleteModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteModdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response DeleteModdefaultJSONResponse) VisitDeleteModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ShowModRequestObject struct {
	ModId string `json:"mod_id"`
}

type ShowModResponseObject interface {
	VisitShowModResponse(w http.ResponseWriter) error
}

type ShowMod200JSONResponse Mod

func (response ShowMod200JSONResponse) VisitShowModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowMod403JSONResponse Notification

func (response ShowMod403JSONResponse) VisitShowModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowMod404JSONResponse Notification

func (response ShowMod404JSONResponse) VisitShowModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowMod500JSONResponse Notification

func (response ShowMod500JSONResponse) VisitShowModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowModdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ShowModdefaultJSONResponse) VisitShowModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateModRequestObject struct {
	ModId string `json:"mod_id"`
	Body  *UpdateModJSONRequestBody
}

type UpdateModResponseObject interface {
	VisitUpdateModResponse(w http.ResponseWriter) error
}

type UpdateMod200JSONResponse Mod

func (response UpdateMod200JSONResponse) VisitUpdateModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMod403JSONResponse Notification

func (response UpdateMod403JSONResponse) VisitUpdateModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMod404JSONResponse Notification

func (response UpdateMod404JSONResponse) VisitUpdateModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMod422JSONResponse Notification

func (response UpdateMod422JSONResponse) VisitUpdateModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMod500JSONResponse Notification

func (response UpdateMod500JSONResponse) VisitUpdateModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateModdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response UpdateModdefaultJSONResponse) VisitUpdateModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteModFromTeamRequestObject struct {
	ModId string `json:"mod_id"`
	Body  *DeleteModFromTeamJSONRequestBody
}

type DeleteModFromTeamResponseObject interface {
	VisitDeleteModFromTeamResponse(w http.ResponseWriter) error
}

type DeleteModFromTeam200JSONResponse Notification

func (response DeleteModFromTeam200JSONResponse) VisitDeleteModFromTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteModFromTeam403JSONResponse Notification

func (response DeleteModFromTeam403JSONResponse) VisitDeleteModFromTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteModFromTeam404JSONResponse Notification

func (response DeleteModFromTeam404JSONResponse) VisitDeleteModFromTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteModFromTeam412JSONResponse Notification

func (response DeleteModFromTeam412JSONResponse) VisitDeleteModFromTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeleteModFromTeam500JSONResponse Notification

func (response DeleteModFromTeam500JSONResponse) VisitDeleteModFromTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteModFromTeamdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response DeleteModFromTeamdefaultJSONResponse) VisitDeleteModFromTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListModTeamsRequestObject struct {
	ModId  string `json:"mod_id"`
	Params ListModTeamsParams
}

type ListModTeamsResponseObject interface {
	VisitListModTeamsResponse(w http.ResponseWriter) error
}

type ListModTeams200JSONResponse ModTeams

func (response ListModTeams200JSONResponse) VisitListModTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListModTeams403JSONResponse Notification

func (response ListModTeams403JSONResponse) VisitListModTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListModTeams404JSONResponse Notification

func (response ListModTeams404JSONResponse) VisitListModTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListModTeams500JSONResponse Notification

func (response ListModTeams500JSONResponse) VisitListModTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListModTeamsdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ListModTeamsdefaultJSONResponse) VisitListModTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AttachModToTeamRequestObject struct {
	ModId string `json:"mod_id"`
	Body  *AttachModToTeamJSONRequestBody
}

type AttachModToTeamResponseObject interface {
	VisitAttachModToTeamResponse(w http.ResponseWriter) error
}

type AttachModToTeam200JSONResponse Notification

func (response AttachModToTeam200JSONResponse) VisitAttachModToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachModToTeam403JSONResponse Notification

func (response AttachModToTeam403JSONResponse) VisitAttachModToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachModToTeam404JSONResponse Notification

func (response AttachModToTeam404JSONResponse) VisitAttachModToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachModToTeam412JSONResponse Notification

func (response AttachModToTeam412JSONResponse) VisitAttachModToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachModToTeam422JSONResponse Notification

func (response AttachModToTeam422JSONResponse) VisitAttachModToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachModToTeam500JSONResponse Notification

func (response AttachModToTeam500JSONResponse) VisitAttachModToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachModToTeamdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response AttachModToTeamdefaultJSONResponse) VisitAttachModToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PermitModTeamRequestObject struct {
	ModId string `json:"mod_id"`
	Body  *PermitModTeamJSONRequestBody
}

type PermitModTeamResponseObject interface {
	VisitPermitModTeamResponse(w http.ResponseWriter) error
}

type PermitModTeam200JSONResponse Notification

func (response PermitModTeam200JSONResponse) VisitPermitModTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PermitModTeam403JSONResponse Notification

func (response PermitModTeam403JSONResponse) VisitPermitModTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PermitModTeam404JSONResponse Notification

func (response PermitModTeam404JSONResponse) VisitPermitModTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PermitModTeam412JSONResponse Notification

func (response PermitModTeam412JSONResponse) VisitPermitModTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type PermitModTeam422JSONResponse Notification

func (response PermitModTeam422JSONResponse) VisitPermitModTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PermitModTeam500JSONResponse Notification

func (response PermitModTeam500JSONResponse) VisitPermitModTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PermitModTeamdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response PermitModTeamdefaultJSONResponse) VisitPermitModTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteModFromUserRequestObject struct {
	ModId string `json:"mod_id"`
	Body  *DeleteModFromUserJSONRequestBody
}

type DeleteModFromUserResponseObject interface {
	VisitDeleteModFromUserResponse(w http.ResponseWriter) error
}

type DeleteModFromUser200JSONResponse Notification

func (response DeleteModFromUser200JSONResponse) VisitDeleteModFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteModFromUser403JSONResponse Notification

func (response DeleteModFromUser403JSONResponse) VisitDeleteModFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteModFromUser404JSONResponse Notification

func (response DeleteModFromUser404JSONResponse) VisitDeleteModFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteModFromUser412JSONResponse Notification

func (response DeleteModFromUser412JSONResponse) VisitDeleteModFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeleteModFromUser500JSONResponse Notification

func (response DeleteModFromUser500JSONResponse) VisitDeleteModFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteModFromUserdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response DeleteModFromUserdefaultJSONResponse) VisitDeleteModFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListModUsersRequestObject struct {
	ModId  string `json:"mod_id"`
	Params ListModUsersParams
}

type ListModUsersResponseObject interface {
	VisitListModUsersResponse(w http.ResponseWriter) error
}

type ListModUsers200JSONResponse ModUsers

func (response ListModUsers200JSONResponse) VisitListModUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListModUsers403JSONResponse Notification

func (response ListModUsers403JSONResponse) VisitListModUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListModUsers404JSONResponse Notification

func (response ListModUsers404JSONResponse) VisitListModUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListModUsers500JSONResponse Notification

func (response ListModUsers500JSONResponse) VisitListModUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListModUsersdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ListModUsersdefaultJSONResponse) VisitListModUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AttachModToUserRequestObject struct {
	ModId string `json:"mod_id"`
	Body  *AttachModToUserJSONRequestBody
}

type AttachModToUserResponseObject interface {
	VisitAttachModToUserResponse(w http.ResponseWriter) error
}

type AttachModToUser200JSONResponse Notification

func (response AttachModToUser200JSONResponse) VisitAttachModToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachModToUser403JSONResponse Notification

func (response AttachModToUser403JSONResponse) VisitAttachModToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachModToUser404JSONResponse Notification

func (response AttachModToUser404JSONResponse) VisitAttachModToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachModToUser412JSONResponse Notification

func (response AttachModToUser412JSONResponse) VisitAttachModToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachModToUser422JSONResponse Notification

func (response AttachModToUser422JSONResponse) VisitAttachModToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachModToUser500JSONResponse Notification

func (response AttachModToUser500JSONResponse) VisitAttachModToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachModToUserdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response AttachModToUserdefaultJSONResponse) VisitAttachModToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PermitModUserRequestObject struct {
	ModId string `json:"mod_id"`
	Body  *PermitModUserJSONRequestBody
}

type PermitModUserResponseObject interface {
	VisitPermitModUserResponse(w http.ResponseWriter) error
}

type PermitModUser200JSONResponse Notification

func (response PermitModUser200JSONResponse) VisitPermitModUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PermitModUser403JSONResponse Notification

func (response PermitModUser403JSONResponse) VisitPermitModUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PermitModUser404JSONResponse Notification

func (response PermitModUser404JSONResponse) VisitPermitModUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PermitModUser412JSONResponse Notification

func (response PermitModUser412JSONResponse) VisitPermitModUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type PermitModUser422JSONResponse Notification

func (response PermitModUser422JSONResponse) VisitPermitModUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PermitModUser500JSONResponse Notification

func (response PermitModUser500JSONResponse) VisitPermitModUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PermitModUserdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response PermitModUserdefaultJSONResponse) VisitPermitModUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListVersionsRequestObject struct {
	ModId  string `json:"mod_id"`
	Params ListVersionsParams
}

type ListVersionsResponseObject interface {
	VisitListVersionsResponse(w http.ResponseWriter) error
}

type ListVersions200JSONResponse Versions

func (response ListVersions200JSONResponse) VisitListVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListVersions403JSONResponse Notification

func (response ListVersions403JSONResponse) VisitListVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListVersions404JSONResponse Notification

func (response ListVersions404JSONResponse) VisitListVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListVersions500JSONResponse Notification

func (response ListVersions500JSONResponse) VisitListVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListVersionsdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ListVersionsdefaultJSONResponse) VisitListVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateVersionRequestObject struct {
	ModId string `json:"mod_id"`
	Body  *CreateVersionJSONRequestBody
}

type CreateVersionResponseObject interface {
	VisitCreateVersionResponse(w http.ResponseWriter) error
}

type CreateVersion200JSONResponse Version

func (response CreateVersion200JSONResponse) VisitCreateVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateVersion403JSONResponse Notification

func (response CreateVersion403JSONResponse) VisitCreateVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateVersion404JSONResponse Notification

func (response CreateVersion404JSONResponse) VisitCreateVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateVersion422JSONResponse Notification

func (response CreateVersion422JSONResponse) VisitCreateVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateVersion500JSONResponse Notification

func (response CreateVersion500JSONResponse) VisitCreateVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateVersiondefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response CreateVersiondefaultJSONResponse) VisitCreateVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteVersionRequestObject struct {
	ModId     string `json:"mod_id"`
	VersionId string `json:"version_id"`
}

type DeleteVersionResponseObject interface {
	VisitDeleteVersionResponse(w http.ResponseWriter) error
}

type DeleteVersion200JSONResponse Notification

func (response DeleteVersion200JSONResponse) VisitDeleteVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteVersion400JSONResponse Notification

func (response DeleteVersion400JSONResponse) VisitDeleteVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteVersion403JSONResponse Notification

func (response DeleteVersion403JSONResponse) VisitDeleteVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteVersion404JSONResponse Notification

func (response DeleteVersion404JSONResponse) VisitDeleteVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteVersion500JSONResponse Notification

func (response DeleteVersion500JSONResponse) VisitDeleteVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteVersiondefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response DeleteVersiondefaultJSONResponse) VisitDeleteVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ShowVersionRequestObject struct {
	ModId     string `json:"mod_id"`
	VersionId string `json:"version_id"`
}

type ShowVersionResponseObject interface {
	VisitShowVersionResponse(w http.ResponseWriter) error
}

type ShowVersion200JSONResponse Version

func (response ShowVersion200JSONResponse) VisitShowVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowVersion403JSONResponse Notification

func (response ShowVersion403JSONResponse) VisitShowVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowVersion404JSONResponse Notification

func (response ShowVersion404JSONResponse) VisitShowVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowVersion500JSONResponse Notification

func (response ShowVersion500JSONResponse) VisitShowVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowVersiondefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ShowVersiondefaultJSONResponse) VisitShowVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateVersionRequestObject struct {
	ModId     string `json:"mod_id"`
	VersionId string `json:"version_id"`
	Body      *UpdateVersionJSONRequestBody
}

type UpdateVersionResponseObject interface {
	VisitUpdateVersionResponse(w http.ResponseWriter) error
}

type UpdateVersion200JSONResponse Version

func (response UpdateVersion200JSONResponse) VisitUpdateVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateVersion403JSONResponse Notification

func (response UpdateVersion403JSONResponse) VisitUpdateVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateVersion404JSONResponse Notification

func (response UpdateVersion404JSONResponse) VisitUpdateVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateVersion422JSONResponse Notification

func (response UpdateVersion422JSONResponse) VisitUpdateVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateVersion500JSONResponse Notification

func (response UpdateVersion500JSONResponse) VisitUpdateVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateVersiondefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response UpdateVersiondefaultJSONResponse) VisitUpdateVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteVersionFromBuildRequestObject struct {
	ModId     string `json:"mod_id"`
	VersionId string `json:"version_id"`
	Body      *DeleteVersionFromBuildJSONRequestBody
}

type DeleteVersionFromBuildResponseObject interface {
	VisitDeleteVersionFromBuildResponse(w http.ResponseWriter) error
}

type DeleteVersionFromBuild200JSONResponse Notification

func (response DeleteVersionFromBuild200JSONResponse) VisitDeleteVersionFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteVersionFromBuild403JSONResponse Notification

func (response DeleteVersionFromBuild403JSONResponse) VisitDeleteVersionFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteVersionFromBuild404JSONResponse Notification

func (response DeleteVersionFromBuild404JSONResponse) VisitDeleteVersionFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteVersionFromBuild412JSONResponse Notification

func (response DeleteVersionFromBuild412JSONResponse) VisitDeleteVersionFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeleteVersionFromBuild500JSONResponse Notification

func (response DeleteVersionFromBuild500JSONResponse) VisitDeleteVersionFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteVersionFromBuilddefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response DeleteVersionFromBuilddefaultJSONResponse) VisitDeleteVersionFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListVersionBuildsRequestObject struct {
	ModId     string `json:"mod_id"`
	VersionId string `json:"version_id"`
	Params    ListVersionBuildsParams
}

type ListVersionBuildsResponseObject interface {
	VisitListVersionBuildsResponse(w http.ResponseWriter) error
}

type ListVersionBuilds200JSONResponse VersionBuilds

func (response ListVersionBuilds200JSONResponse) VisitListVersionBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListVersionBuilds403JSONResponse Notification

func (response ListVersionBuilds403JSONResponse) VisitListVersionBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListVersionBuilds404JSONResponse Notification

func (response ListVersionBuilds404JSONResponse) VisitListVersionBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListVersionBuilds500JSONResponse Notification

func (response ListVersionBuilds500JSONResponse) VisitListVersionBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListVersionBuildsdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ListVersionBuildsdefaultJSONResponse) VisitListVersionBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AttachVersionToBuildRequestObject struct {
	ModId     string `json:"mod_id"`
	VersionId string `json:"version_id"`
	Body      *AttachVersionToBuildJSONRequestBody
}

type AttachVersionToBuildResponseObject interface {
	VisitAttachVersionToBuildResponse(w http.ResponseWriter) error
}

type AttachVersionToBuild200JSONResponse Notification

func (response AttachVersionToBuild200JSONResponse) VisitAttachVersionToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachVersionToBuild403JSONResponse Notification

func (response AttachVersionToBuild403JSONResponse) VisitAttachVersionToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachVersionToBuild404JSONResponse Notification

func (response AttachVersionToBuild404JSONResponse) VisitAttachVersionToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachVersionToBuild412JSONResponse Notification

func (response AttachVersionToBuild412JSONResponse) VisitAttachVersionToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachVersionToBuild422JSONResponse Notification

func (response AttachVersionToBuild422JSONResponse) VisitAttachVersionToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachVersionToBuild500JSONResponse Notification

func (response AttachVersionToBuild500JSONResponse) VisitAttachVersionToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachVersionToBuilddefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response AttachVersionToBuilddefaultJSONResponse) VisitAttachVersionToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListNeoforgesRequestObject struct {
	Params ListNeoforgesParams
}

type ListNeoforgesResponseObject interface {
	VisitListNeoforgesResponse(w http.ResponseWriter) error
}

type ListNeoforges200JSONResponse Neoforges

func (response ListNeoforges200JSONResponse) VisitListNeoforgesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListNeoforges403JSONResponse Notification

func (response ListNeoforges403JSONResponse) VisitListNeoforgesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListNeoforges500JSONResponse Notification

func (response ListNeoforges500JSONResponse) VisitListNeoforgesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListNeoforgesdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ListNeoforgesdefaultJSONResponse) VisitListNeoforgesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateNeoforgeRequestObject struct {
}

type UpdateNeoforgeResponseObject interface {
	VisitUpdateNeoforgeResponse(w http.ResponseWriter) error
}

type UpdateNeoforge200JSONResponse Notification

func (response UpdateNeoforge200JSONResponse) VisitUpdateNeoforgeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNeoforge403JSONResponse Notification

func (response UpdateNeoforge403JSONResponse) VisitUpdateNeoforgeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNeoforge500JSONResponse Notification

func (response UpdateNeoforge500JSONResponse) VisitUpdateNeoforgeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNeoforge503JSONResponse Notification

func (response UpdateNeoforge503JSONResponse) VisitUpdateNeoforgeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type UpdateNeoforgedefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response UpdateNeoforgedefaultJSONResponse) VisitUpdateNeoforgeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteNeoforgeFromBuildRequestObject struct {
	NeoforgeId string `json:"neoforge_id"`
	Body       *DeleteNeoforgeFromBuildJSONRequestBody
}

type DeleteNeoforgeFromBuildResponseObject interface {
	VisitDeleteNeoforgeFromBuildResponse(w http.ResponseWriter) error
}

type DeleteNeoforgeFromBuild200JSONResponse Notification

func (response DeleteNeoforgeFromBuild200JSONResponse) VisitDeleteNeoforgeFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNeoforgeFromBuild403JSONResponse Notification

func (response DeleteNeoforgeFromBuild403JSONResponse) VisitDeleteNeoforgeFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNeoforgeFromBuild404JSONResponse Notification

func (response DeleteNeoforgeFromBuild404JSONResponse) VisitDeleteNeoforgeFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNeoforgeFromBuild412JSONResponse Notification

func (response DeleteNeoforgeFromBuild412JSONResponse) VisitDeleteNeoforgeFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNeoforgeFromBuild500JSONResponse Notification

func (response DeleteNeoforgeFromBuild500JSONResponse) VisitDeleteNeoforgeFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteNeoforgeFromBuilddefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response DeleteNeoforgeFromBuilddefaultJSONResponse) VisitDeleteNeoforgeFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListNeoforgeBuildsRequestObject struct {
	NeoforgeId string `json:"neoforge_id"`
	Params     ListNeoforgeBuildsParams
}

type ListNeoforgeBuildsResponseObject interface {
	VisitListNeoforgeBuildsResponse(w http.ResponseWriter) error
}

type ListNeoforgeBuilds200JSONResponse NeoforgeBuilds

func (response ListNeoforgeBuilds200JSONResponse) VisitListNeoforgeBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListNeoforgeBuilds403JSONResponse Notification

func (response ListNeoforgeBuilds403JSONResponse) VisitListNeoforgeBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListNeoforgeBuilds404JSONResponse Notification

func (response ListNeoforgeBuilds404JSONResponse) VisitListNeoforgeBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListNeoforgeBuilds500JSONResponse Notification

func (response ListNeoforgeBuilds500JSONResponse) VisitListNeoforgeBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListNeoforgeBuildsdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ListNeoforgeBuildsdefaultJSONResponse) VisitListNeoforgeBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AttachNeoforgeToBuildRequestObject struct {
	NeoforgeId string `json:"neoforge_id"`
	Body       *AttachNeoforgeToBuildJSONRequestBody
}

type AttachNeoforgeToBuildResponseObject interface {
	VisitAttachNeoforgeToBuildResponse(w http.ResponseWriter) error
}

type AttachNeoforgeToBuild200JSONResponse Notification

func (response AttachNeoforgeToBuild200JSONResponse) VisitAttachNeoforgeToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachNeoforgeToBuild403JSONResponse Notification

func (response AttachNeoforgeToBuild403JSONResponse) VisitAttachNeoforgeToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachNeoforgeToBuild404JSONResponse Notification

func (response AttachNeoforgeToBuild404JSONResponse) VisitAttachNeoforgeToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachNeoforgeToBuild412JSONResponse Notification

func (response AttachNeoforgeToBuild412JSONResponse) VisitAttachNeoforgeToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachNeoforgeToBuild422JSONResponse Notification

func (response AttachNeoforgeToBuild422JSONResponse) VisitAttachNeoforgeToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachNeoforgeToBuild500JSONResponse Notification

func (response AttachNeoforgeToBuild500JSONResponse) VisitAttachNeoforgeToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachNeoforgeToBuilddefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response AttachNeoforgeToBuilddefaultJSONResponse) VisitAttachNeoforgeToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListPacksRequestObject struct {
	Params ListPacksParams
}

type ListPacksResponseObject interface {
	VisitListPacksResponse(w http.ResponseWriter) error
}

type ListPacks200JSONResponse Packs

func (response ListPacks200JSONResponse) VisitListPacksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListPacks403JSONResponse Notification

func (response ListPacks403JSONResponse) VisitListPacksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListPacks500JSONResponse Notification

func (response ListPacks500JSONResponse) VisitListPacksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListPacksdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ListPacksdefaultJSONResponse) VisitListPacksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreatePackRequestObject struct {
	Body *CreatePackJSONRequestBody
}

type CreatePackResponseObject interface {
	VisitCreatePackResponse(w http.ResponseWriter) error
}

type CreatePack200JSONResponse Pack

func (response CreatePack200JSONResponse) VisitCreatePackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreatePack403JSONResponse Notification

func (response CreatePack403JSONResponse) VisitCreatePackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreatePack422JSONResponse Notification

func (response CreatePack422JSONResponse) VisitCreatePackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreatePack500JSONResponse Notification

func (response CreatePack500JSONResponse) VisitCreatePackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreatePackdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response CreatePackdefaultJSONResponse) VisitCreatePackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeletePackRequestObject struct {
	PackId string `json:"pack_id"`
}

type DeletePackResponseObject interface {
	VisitDeletePackResponse(w http.ResponseWriter) error
}

type DeletePack200JSONResponse Notification

func (response DeletePack200JSONResponse) VisitDeletePackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeletePack400JSONResponse Notification

func (response DeletePack400JSONResponse) VisitDeletePackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeletePack403JSONResponse Notification

func (response DeletePack403JSONResponse) VisitDeletePackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeletePack404JSONResponse Notification

func (response DeletePack404JSONResponse) VisitDeletePackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeletePack500JSONResponse Notification

func (response DeletePack500JSONResponse) VisitDeletePackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeletePackdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response DeletePackdefaultJSONResponse) VisitDeletePackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ShowPackRequestObject struct {
	PackId string `json:"pack_id"`
}

type ShowPackResponseObject interface {
	VisitShowPackResponse(w http.ResponseWriter) error
}

type ShowPack200JSONResponse Pack

func (response ShowPack200JSONResponse) VisitShowPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowPack403JSONResponse Notification

func (response ShowPack403JSONResponse) VisitShowPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowPack404JSONResponse Notification

func (response ShowPack404JSONResponse) VisitShowPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowPack500JSONResponse Notification

func (response ShowPack500JSONResponse) VisitShowPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowPackdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ShowPackdefaultJSONResponse) VisitShowPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdatePackRequestObject struct {
	PackId string `json:"pack_id"`
	Body   *UpdatePackJSONRequestBody
}

type UpdatePackResponseObject interface {
	VisitUpdatePackResponse(w http.ResponseWriter) error
}

type UpdatePack200JSONResponse Pack

func (response UpdatePack200JSONResponse) VisitUpdatePackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePack403JSONResponse Notification

func (response UpdatePack403JSONResponse) VisitUpdatePackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePack404JSONResponse Notification

func (response UpdatePack404JSONResponse) VisitUpdatePackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePack422JSONResponse Notification

func (response UpdatePack422JSONResponse) VisitUpdatePackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePack500JSONResponse Notification

func (response UpdatePack500JSONResponse) VisitUpdatePackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePackdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response UpdatePackdefaultJSONResponse) VisitUpdatePackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListBuildsRequestObject struct {
	PackId string `json:"pack_id"`
	Params ListBuildsParams
}

type ListBuildsResponseObject interface {
	VisitListBuildsResponse(w http.ResponseWriter) error
}

type ListBuilds200JSONResponse Builds

func (response ListBuilds200JSONResponse) VisitListBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListBuilds403JSONResponse Notification

func (response ListBuilds403JSONResponse) VisitListBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListBuilds404JSONResponse Notification

func (response ListBuilds404JSONResponse) VisitListBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListBuilds500JSONResponse Notification

func (response ListBuilds500JSONResponse) VisitListBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListBuildsdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ListBuildsdefaultJSONResponse) VisitListBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateBuildRequestObject struct {
	PackId string `json:"pack_id"`
	Body   *CreateBuildJSONRequestBody
}

type CreateBuildResponseObject interface {
	VisitCreateBuildResponse(w http.ResponseWriter) error
}

type CreateBuild200JSONResponse Build

func (response CreateBuild200JSONResponse) VisitCreateBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateBuild403JSONResponse Notification

func (response CreateBuild403JSONResponse) VisitCreateBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateBuild404JSONResponse Notification

func (response CreateBuild404JSONResponse) VisitCreateBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateBuild422JSONResponse Notification

func (response CreateBuild422JSONResponse) VisitCreateBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateBuild500JSONResponse Notification

func (response CreateBuild500JSONResponse) VisitCreateBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateBuilddefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response CreateBuilddefaultJSONResponse) VisitCreateBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteBuildRequestObject struct {
	PackId  string `json:"pack_id"`
	BuildId string `json:"build_id"`
}

type DeleteBuildResponseObject interface {
	VisitDeleteBuildResponse(w http.ResponseWriter) error
}

type DeleteBuild200JSONResponse Notification

func (response DeleteBuild200JSONResponse) VisitDeleteBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteBuild400JSONResponse Notification

func (response DeleteBuild400JSONResponse) VisitDeleteBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteBuild403JSONResponse Notification

func (response DeleteBuild403JSONResponse) VisitDeleteBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteBuild404JSONResponse Notification

func (response DeleteBuild404JSONResponse) VisitDeleteBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteBuild500JSONResponse Notification

func (response DeleteBuild500JSONResponse) VisitDeleteBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteBuilddefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response DeleteBuilddefaultJSONResponse) VisitDeleteBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ShowBuildRequestObject struct {
	PackId  string `json:"pack_id"`
	BuildId string `json:"build_id"`
}

type ShowBuildResponseObject interface {
	VisitShowBuildResponse(w http.ResponseWriter) error
}

type ShowBuild200JSONResponse Build

func (response ShowBuild200JSONResponse) VisitShowBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowBuild403JSONResponse Notification

func (response ShowBuild403JSONResponse) VisitShowBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowBuild404JSONResponse Notification

func (response ShowBuild404JSONResponse) VisitShowBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowBuild500JSONResponse Notification

func (response ShowBuild500JSONResponse) VisitShowBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowBuilddefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ShowBuilddefaultJSONResponse) VisitShowBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateBuildRequestObject struct {
	PackId  string `json:"pack_id"`
	BuildId string `json:"build_id"`
	Body    *UpdateBuildJSONRequestBody
}

type UpdateBuildResponseObject interface {
	VisitUpdateBuildResponse(w http.ResponseWriter) error
}

type UpdateBuild200JSONResponse Build

func (response UpdateBuild200JSONResponse) VisitUpdateBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateBuild403JSONResponse Notification

func (response UpdateBuild403JSONResponse) VisitUpdateBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateBuild404JSONResponse Notification

func (response UpdateBuild404JSONResponse) VisitUpdateBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateBuild422JSONResponse Notification

func (response UpdateBuild422JSONResponse) VisitUpdateBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateBuild500JSONResponse Notification

func (response UpdateBuild500JSONResponse) VisitUpdateBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateBuilddefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response UpdateBuilddefaultJSONResponse) VisitUpdateBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteBuildFromVersionRequestObject struct {
	PackId  string `json:"pack_id"`
	BuildId string `json:"build_id"`
	Body    *DeleteBuildFromVersionJSONRequestBody
}

type DeleteBuildFromVersionResponseObject interface {
	VisitDeleteBuildFromVersionResponse(w http.ResponseWriter) error
}

type DeleteBuildFromVersion200JSONResponse Notification

func (response DeleteBuildFromVersion200JSONResponse) VisitDeleteBuildFromVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteBuildFromVersion403JSONResponse Notification

func (response DeleteBuildFromVersion403JSONResponse) VisitDeleteBuildFromVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteBuildFromVersion404JSONResponse Notification

func (response DeleteBuildFromVersion404JSONResponse) VisitDeleteBuildFromVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteBuildFromVersion412JSONResponse Notification

func (response DeleteBuildFromVersion412JSONResponse) VisitDeleteBuildFromVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeleteBuildFromVersion500JSONResponse Notification

func (response DeleteBuildFromVersion500JSONResponse) VisitDeleteBuildFromVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteBuildFromVersiondefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response DeleteBuildFromVersiondefaultJSONResponse) VisitDeleteBuildFromVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListBuildVersionsRequestObject struct {
	PackId  string `json:"pack_id"`
	BuildId string `json:"build_id"`
	Params  ListBuildVersionsParams
}

type ListBuildVersionsResponseObject interface {
	VisitListBuildVersionsResponse(w http.ResponseWriter) error
}

type ListBuildVersions200JSONResponse BuildVersions

func (response ListBuildVersions200JSONResponse) VisitListBuildVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListBuildVersions403JSONResponse Notification

func (response ListBuildVersions403JSONResponse) VisitListBuildVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListBuildVersions404JSONResponse Notification

func (response ListBuildVersions404JSONResponse) VisitListBuildVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListBuildVersions500JSONResponse Notification

func (response ListBuildVersions500JSONResponse) VisitListBuildVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListBuildVersionsdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ListBuildVersionsdefaultJSONResponse) VisitListBuildVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AttachBuildToVersionRequestObject struct {
	PackId  string `json:"pack_id"`
	BuildId string `json:"build_id"`
	Body    *AttachBuildToVersionJSONRequestBody
}

type AttachBuildToVersionResponseObject interface {
	VisitAttachBuildToVersionResponse(w http.ResponseWriter) error
}

type AttachBuildToVersion200JSONResponse Notification

func (response AttachBuildToVersion200JSONResponse) VisitAttachBuildToVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachBuildToVersion403JSONResponse Notification

func (response AttachBuildToVersion403JSONResponse) VisitAttachBuildToVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachBuildToVersion404JSONResponse Notification

func (response AttachBuildToVersion404JSONResponse) VisitAttachBuildToVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachBuildToVersion412JSONResponse Notification

func (response AttachBuildToVersion412JSONResponse) VisitAttachBuildToVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachBuildToVersion422JSONResponse Notification

func (response AttachBuildToVersion422JSONResponse) VisitAttachBuildToVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachBuildToVersion500JSONResponse Notification

func (response AttachBuildToVersion500JSONResponse) VisitAttachBuildToVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachBuildToVersiondefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response AttachBuildToVersiondefaultJSONResponse) VisitAttachBuildToVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeletePackFromTeamRequestObject struct {
	PackId string `json:"pack_id"`
	Body   *DeletePackFromTeamJSONRequestBody
}

type DeletePackFromTeamResponseObject interface {
	VisitDeletePackFromTeamResponse(w http.ResponseWriter) error
}

type DeletePackFromTeam200JSONResponse Notification

func (response DeletePackFromTeam200JSONResponse) VisitDeletePackFromTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeletePackFromTeam403JSONResponse Notification

func (response DeletePackFromTeam403JSONResponse) VisitDeletePackFromTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeletePackFromTeam404JSONResponse Notification

func (response DeletePackFromTeam404JSONResponse) VisitDeletePackFromTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeletePackFromTeam412JSONResponse Notification

func (response DeletePackFromTeam412JSONResponse) VisitDeletePackFromTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeletePackFromTeam500JSONResponse Notification

func (response DeletePackFromTeam500JSONResponse) VisitDeletePackFromTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeletePackFromTeamdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response DeletePackFromTeamdefaultJSONResponse) VisitDeletePackFromTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListPackTeamsRequestObject struct {
	PackId string `json:"pack_id"`
	Params ListPackTeamsParams
}

type ListPackTeamsResponseObject interface {
	VisitListPackTeamsResponse(w http.ResponseWriter) error
}

type ListPackTeams200JSONResponse PackTeams

func (response ListPackTeams200JSONResponse) VisitListPackTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListPackTeams403JSONResponse Notification

func (response ListPackTeams403JSONResponse) VisitListPackTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListPackTeams404JSONResponse Notification

func (response ListPackTeams404JSONResponse) VisitListPackTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListPackTeams500JSONResponse Notification

func (response ListPackTeams500JSONResponse) VisitListPackTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListPackTeamsdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ListPackTeamsdefaultJSONResponse) VisitListPackTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AttachPackToTeamRequestObject struct {
	PackId string `json:"pack_id"`
	Body   *AttachPackToTeamJSONRequestBody
}

type AttachPackToTeamResponseObject interface {
	VisitAttachPackToTeamResponse(w http.ResponseWriter) error
}

type AttachPackToTeam200JSONResponse Notification

func (response AttachPackToTeam200JSONResponse) VisitAttachPackToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachPackToTeam403JSONResponse Notification

func (response AttachPackToTeam403JSONResponse) VisitAttachPackToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachPackToTeam404JSONResponse Notification

func (response AttachPackToTeam404JSONResponse) VisitAttachPackToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachPackToTeam412JSONResponse Notification

func (response AttachPackToTeam412JSONResponse) VisitAttachPackToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachPackToTeam422JSONResponse Notification

func (response AttachPackToTeam422JSONResponse) VisitAttachPackToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachPackToTeam500JSONResponse Notification

func (response AttachPackToTeam500JSONResponse) VisitAttachPackToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachPackToTeamdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response AttachPackToTeamdefaultJSONResponse) VisitAttachPackToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PermitPackTeamRequestObject struct {
	PackId string `json:"pack_id"`
	Body   *PermitPackTeamJSONRequestBody
}

type PermitPackTeamResponseObject interface {
	VisitPermitPackTeamResponse(w http.ResponseWriter) error
}

type PermitPackTeam200JSONResponse Notification

func (response PermitPackTeam200JSONResponse) VisitPermitPackTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PermitPackTeam403JSONResponse Notification

func (response PermitPackTeam403JSONResponse) VisitPermitPackTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PermitPackTeam404JSONResponse Notification

func (response PermitPackTeam404JSONResponse) VisitPermitPackTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PermitPackTeam412JSONResponse Notification

func (response PermitPackTeam412JSONResponse) VisitPermitPackTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type PermitPackTeam422JSONResponse Notification

func (response PermitPackTeam422JSONResponse) VisitPermitPackTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PermitPackTeam500JSONResponse Notification

func (response PermitPackTeam500JSONResponse) VisitPermitPackTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PermitPackTeamdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response PermitPackTeamdefaultJSONResponse) VisitPermitPackTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeletePackFromUserRequestObject struct {
	PackId string `json:"pack_id"`
	Body   *DeletePackFromUserJSONRequestBody
}

type DeletePackFromUserResponseObject interface {
	VisitDeletePackFromUserResponse(w http.ResponseWriter) error
}

type DeletePackFromUser200JSONResponse Notification

func (response DeletePackFromUser200JSONResponse) VisitDeletePackFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeletePackFromUser403JSONResponse Notification

func (response DeletePackFromUser403JSONResponse) VisitDeletePackFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeletePackFromUser404JSONResponse Notification

func (response DeletePackFromUser404JSONResponse) VisitDeletePackFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeletePackFromUser412JSONResponse Notification

func (response DeletePackFromUser412JSONResponse) VisitDeletePackFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeletePackFromUser500JSONResponse Notification

func (response DeletePackFromUser500JSONResponse) VisitDeletePackFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeletePackFromUserdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response DeletePackFromUserdefaultJSONResponse) VisitDeletePackFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListPackUsersRequestObject struct {
	PackId string `json:"pack_id"`
	Params ListPackUsersParams
}

type ListPackUsersResponseObject interface {
	VisitListPackUsersResponse(w http.ResponseWriter) error
}

type ListPackUsers200JSONResponse PackUsers

func (response ListPackUsers200JSONResponse) VisitListPackUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListPackUsers403JSONResponse Notification

func (response ListPackUsers403JSONResponse) VisitListPackUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListPackUsers404JSONResponse Notification

func (response ListPackUsers404JSONResponse) VisitListPackUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListPackUsers500JSONResponse Notification

func (response ListPackUsers500JSONResponse) VisitListPackUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListPackUsersdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ListPackUsersdefaultJSONResponse) VisitListPackUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AttachPackToUserRequestObject struct {
	PackId string `json:"pack_id"`
	Body   *AttachPackToUserJSONRequestBody
}

type AttachPackToUserResponseObject interface {
	VisitAttachPackToUserResponse(w http.ResponseWriter) error
}

type AttachPackToUser200JSONResponse Notification

func (response AttachPackToUser200JSONResponse) VisitAttachPackToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachPackToUser403JSONResponse Notification

func (response AttachPackToUser403JSONResponse) VisitAttachPackToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachPackToUser404JSONResponse Notification

func (response AttachPackToUser404JSONResponse) VisitAttachPackToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachPackToUser412JSONResponse Notification

func (response AttachPackToUser412JSONResponse) VisitAttachPackToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachPackToUser422JSONResponse Notification

func (response AttachPackToUser422JSONResponse) VisitAttachPackToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachPackToUser500JSONResponse Notification

func (response AttachPackToUser500JSONResponse) VisitAttachPackToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachPackToUserdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response AttachPackToUserdefaultJSONResponse) VisitAttachPackToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PermitPackUserRequestObject struct {
	PackId string `json:"pack_id"`
	Body   *PermitPackUserJSONRequestBody
}

type PermitPackUserResponseObject interface {
	VisitPermitPackUserResponse(w http.ResponseWriter) error
}

type PermitPackUser200JSONResponse Notification

func (response PermitPackUser200JSONResponse) VisitPermitPackUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PermitPackUser403JSONResponse Notification

func (response PermitPackUser403JSONResponse) VisitPermitPackUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PermitPackUser404JSONResponse Notification

func (response PermitPackUser404JSONResponse) VisitPermitPackUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PermitPackUser412JSONResponse Notification

func (response PermitPackUser412JSONResponse) VisitPermitPackUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type PermitPackUser422JSONResponse Notification

func (response PermitPackUser422JSONResponse) VisitPermitPackUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PermitPackUser500JSONResponse Notification

func (response PermitPackUser500JSONResponse) VisitPermitPackUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PermitPackUserdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response PermitPackUserdefaultJSONResponse) VisitPermitPackUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ShowProfileRequestObject struct {
}

type ShowProfileResponseObject interface {
	VisitShowProfileResponse(w http.ResponseWriter) error
}

type ShowProfile200JSONResponse Profile

func (response ShowProfile200JSONResponse) VisitShowProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowProfile403JSONResponse Notification

func (response ShowProfile403JSONResponse) VisitShowProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowProfile500JSONResponse Notification

func (response ShowProfile500JSONResponse) VisitShowProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowProfiledefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ShowProfiledefaultJSONResponse) VisitShowProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateProfileRequestObject struct {
	Body *UpdateProfileJSONRequestBody
}

type UpdateProfileResponseObject interface {
	VisitUpdateProfileResponse(w http.ResponseWriter) error
}

type UpdateProfile200JSONResponse Profile

func (response UpdateProfile200JSONResponse) VisitUpdateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProfile403JSONResponse Notification

func (response UpdateProfile403JSONResponse) VisitUpdateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProfile422JSONResponse Notification

func (response UpdateProfile422JSONResponse) VisitUpdateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProfile500JSONResponse Notification

func (response UpdateProfile500JSONResponse) VisitUpdateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateProfiledefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response UpdateProfiledefaultJSONResponse) VisitUpdateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type TokenProfileRequestObject struct {
}

type TokenProfileResponseObject interface {
	VisitTokenProfileResponse(w http.ResponseWriter) error
}

type TokenProfile200JSONResponse AuthToken

func (response TokenProfile200JSONResponse) VisitTokenProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TokenProfile403JSONResponse Notification

func (response TokenProfile403JSONResponse) VisitTokenProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type TokenProfile500JSONResponse Notification

func (response TokenProfile500JSONResponse) VisitTokenProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type TokenProfiledefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response TokenProfiledefaultJSONResponse) VisitTokenProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListQuiltsRequestObject struct {
	Params ListQuiltsParams
}

type ListQuiltsResponseObject interface {
	VisitListQuiltsResponse(w http.ResponseWriter) error
}

type ListQuilts200JSONResponse Quilts

func (response ListQuilts200JSONResponse) VisitListQuiltsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListQuilts403JSONResponse Notification

func (response ListQuilts403JSONResponse) VisitListQuiltsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListQuilts500JSONResponse Notification

func (response ListQuilts500JSONResponse) VisitListQuiltsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListQuiltsdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ListQuiltsdefaultJSONResponse) VisitListQuiltsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateQuiltRequestObject struct {
}

type UpdateQuiltResponseObject interface {
	VisitUpdateQuiltResponse(w http.ResponseWriter) error
}

type UpdateQuilt200JSONResponse Notification

func (response UpdateQuilt200JSONResponse) VisitUpdateQuiltResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateQuilt403JSONResponse Notification

func (response UpdateQuilt403JSONResponse) VisitUpdateQuiltResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateQuilt500JSONResponse Notification

func (response UpdateQuilt500JSONResponse) VisitUpdateQuiltResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateQuilt503JSONResponse Notification

func (response UpdateQuilt503JSONResponse) VisitUpdateQuiltResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type UpdateQuiltdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response UpdateQuiltdefaultJSONResponse) VisitUpdateQuiltResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteQuiltFromBuildRequestObject struct {
	QuiltId string `json:"quilt_id"`
	Body    *DeleteQuiltFromBuildJSONRequestBody
}

type DeleteQuiltFromBuildResponseObject interface {
	VisitDeleteQuiltFromBuildResponse(w http.ResponseWriter) error
}

type DeleteQuiltFromBuild200JSONResponse Notification

func (response DeleteQuiltFromBuild200JSONResponse) VisitDeleteQuiltFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteQuiltFromBuild403JSONResponse Notification

func (response DeleteQuiltFromBuild403JSONResponse) VisitDeleteQuiltFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteQuiltFromBuild404JSONResponse Notification

func (response DeleteQuiltFromBuild404JSONResponse) VisitDeleteQuiltFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteQuiltFromBuild412JSONResponse Notification

func (response DeleteQuiltFromBuild412JSONResponse) VisitDeleteQuiltFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeleteQuiltFromBuild500JSONResponse Notification

func (response DeleteQuiltFromBuild500JSONResponse) VisitDeleteQuiltFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteQuiltFromBuilddefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response DeleteQuiltFromBuilddefaultJSONResponse) VisitDeleteQuiltFromBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListQuiltBuildsRequestObject struct {
	QuiltId string `json:"quilt_id"`
	Params  ListQuiltBuildsParams
}

type ListQuiltBuildsResponseObject interface {
	VisitListQuiltBuildsResponse(w http.ResponseWriter) error
}

type ListQuiltBuilds200JSONResponse QuiltBuilds

func (response ListQuiltBuilds200JSONResponse) VisitListQuiltBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListQuiltBuilds403JSONResponse Notification

func (response ListQuiltBuilds403JSONResponse) VisitListQuiltBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListQuiltBuilds404JSONResponse Notification

func (response ListQuiltBuilds404JSONResponse) VisitListQuiltBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListQuiltBuilds500JSONResponse Notification

func (response ListQuiltBuilds500JSONResponse) VisitListQuiltBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListQuiltBuildsdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ListQuiltBuildsdefaultJSONResponse) VisitListQuiltBuildsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AttachQuiltToBuildRequestObject struct {
	QuiltId string `json:"quilt_id"`
	Body    *AttachQuiltToBuildJSONRequestBody
}

type AttachQuiltToBuildResponseObject interface {
	VisitAttachQuiltToBuildResponse(w http.ResponseWriter) error
}

type AttachQuiltToBuild200JSONResponse Notification

func (response AttachQuiltToBuild200JSONResponse) VisitAttachQuiltToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachQuiltToBuild403JSONResponse Notification

func (response AttachQuiltToBuild403JSONResponse) VisitAttachQuiltToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachQuiltToBuild404JSONResponse Notification

func (response AttachQuiltToBuild404JSONResponse) VisitAttachQuiltToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachQuiltToBuild412JSONResponse Notification

func (response AttachQuiltToBuild412JSONResponse) VisitAttachQuiltToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachQuiltToBuild422JSONResponse Notification

func (response AttachQuiltToBuild422JSONResponse) VisitAttachQuiltToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachQuiltToBuild500JSONResponse Notification

func (response AttachQuiltToBuild500JSONResponse) VisitAttachQuiltToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachQuiltToBuilddefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response AttachQuiltToBuilddefaultJSONResponse) VisitAttachQuiltToBuildResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListTeamsRequestObject struct {
	Params ListTeamsParams
}

type ListTeamsResponseObject interface {
	VisitListTeamsResponse(w http.ResponseWriter) error
}

type ListTeams200JSONResponse Teams

func (response ListTeams200JSONResponse) VisitListTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTeams403JSONResponse Notification

func (response ListTeams403JSONResponse) VisitListTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListTeams500JSONResponse Notification

func (response ListTeams500JSONResponse) VisitListTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListTeamsdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ListTeamsdefaultJSONResponse) VisitListTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateTeamRequestObject struct {
	Body *CreateTeamJSONRequestBody
}

type CreateTeamResponseObject interface {
	VisitCreateTeamResponse(w http.ResponseWriter) error
}

type CreateTeam200JSONResponse Team

func (response CreateTeam200JSONResponse) VisitCreateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateTeam403JSONResponse Notification

func (response CreateTeam403JSONResponse) VisitCreateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateTeam422JSONResponse Notification

func (response CreateTeam422JSONResponse) VisitCreateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateTeam500JSONResponse Notification

func (response CreateTeam500JSONResponse) VisitCreateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateTeamdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response CreateTeamdefaultJSONResponse) VisitCreateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteTeamRequestObject struct {
	TeamId string `json:"team_id"`
}

type DeleteTeamResponseObject interface {
	VisitDeleteTeamResponse(w http.ResponseWriter) error
}

type DeleteTeam200JSONResponse Notification

func (response DeleteTeam200JSONResponse) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeam400JSONResponse Notification

func (response DeleteTeam400JSONResponse) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeam403JSONResponse Notification

func (response DeleteTeam403JSONResponse) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeam404JSONResponse Notification

func (response DeleteTeam404JSONResponse) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeam500JSONResponse Notification

func (response DeleteTeam500JSONResponse) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response DeleteTeamdefaultJSONResponse) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ShowTeamRequestObject struct {
	TeamId string `json:"team_id"`
}

type ShowTeamResponseObject interface {
	VisitShowTeamResponse(w http.ResponseWriter) error
}

type ShowTeam200JSONResponse Team

func (response ShowTeam200JSONResponse) VisitShowTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowTeam403JSONResponse Notification

func (response ShowTeam403JSONResponse) VisitShowTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowTeam404JSONResponse Notification

func (response ShowTeam404JSONResponse) VisitShowTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowTeam500JSONResponse Notification

func (response ShowTeam500JSONResponse) VisitShowTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowTeamdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ShowTeamdefaultJSONResponse) VisitShowTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateTeamRequestObject struct {
	TeamId string `json:"team_id"`
	Body   *UpdateTeamJSONRequestBody
}

type UpdateTeamResponseObject interface {
	VisitUpdateTeamResponse(w http.ResponseWriter) error
}

type UpdateTeam200JSONResponse Team

func (response UpdateTeam200JSONResponse) VisitUpdateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTeam403JSONResponse Notification

func (response UpdateTeam403JSONResponse) VisitUpdateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTeam404JSONResponse Notification

func (response UpdateTeam404JSONResponse) VisitUpdateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTeam422JSONResponse Notification

func (response UpdateTeam422JSONResponse) VisitUpdateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTeam500JSONResponse Notification

func (response UpdateTeam500JSONResponse) VisitUpdateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTeamdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response UpdateTeamdefaultJSONResponse) VisitUpdateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteTeamFromModRequestObject struct {
	TeamId string `json:"team_id"`
	Body   *DeleteTeamFromModJSONRequestBody
}

type DeleteTeamFromModResponseObject interface {
	VisitDeleteTeamFromModResponse(w http.ResponseWriter) error
}

type DeleteTeamFromMod200JSONResponse Notification

func (response DeleteTeamFromMod200JSONResponse) VisitDeleteTeamFromModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamFromMod403JSONResponse Notification

func (response DeleteTeamFromMod403JSONResponse) VisitDeleteTeamFromModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamFromMod404JSONResponse Notification

func (response DeleteTeamFromMod404JSONResponse) VisitDeleteTeamFromModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamFromMod412JSONResponse Notification

func (response DeleteTeamFromMod412JSONResponse) VisitDeleteTeamFromModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamFromMod500JSONResponse Notification

func (response DeleteTeamFromMod500JSONResponse) VisitDeleteTeamFromModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamFromModdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response DeleteTeamFromModdefaultJSONResponse) VisitDeleteTeamFromModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListTeamModsRequestObject struct {
	TeamId string `json:"team_id"`
	Params ListTeamModsParams
}

type ListTeamModsResponseObject interface {
	VisitListTeamModsResponse(w http.ResponseWriter) error
}

type ListTeamMods200JSONResponse TeamMods

func (response ListTeamMods200JSONResponse) VisitListTeamModsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTeamMods403JSONResponse Notification

func (response ListTeamMods403JSONResponse) VisitListTeamModsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListTeamMods404JSONResponse Notification

func (response ListTeamMods404JSONResponse) VisitListTeamModsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListTeamMods500JSONResponse Notification

func (response ListTeamMods500JSONResponse) VisitListTeamModsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListTeamModsdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ListTeamModsdefaultJSONResponse) VisitListTeamModsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AttachTeamToModRequestObject struct {
	TeamId string `json:"team_id"`
	Body   *AttachTeamToModJSONRequestBody
}

type AttachTeamToModResponseObject interface {
	VisitAttachTeamToModResponse(w http.ResponseWriter) error
}

type AttachTeamToMod200JSONResponse Notification

func (response AttachTeamToMod200JSONResponse) VisitAttachTeamToModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToMod403JSONResponse Notification

func (response AttachTeamToMod403JSONResponse) VisitAttachTeamToModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToMod404JSONResponse Notification

func (response AttachTeamToMod404JSONResponse) VisitAttachTeamToModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToMod412JSONResponse Notification

func (response AttachTeamToMod412JSONResponse) VisitAttachTeamToModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToMod422JSONResponse Notification

func (response AttachTeamToMod422JSONResponse) VisitAttachTeamToModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToMod500JSONResponse Notification

func (response AttachTeamToMod500JSONResponse) VisitAttachTeamToModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToModdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response AttachTeamToModdefaultJSONResponse) VisitAttachTeamToModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PermitTeamModRequestObject struct {
	TeamId string `json:"team_id"`
	Body   *PermitTeamModJSONRequestBody
}

type PermitTeamModResponseObject interface {
	VisitPermitTeamModResponse(w http.ResponseWriter) error
}

type PermitTeamMod200JSONResponse Notification

func (response PermitTeamMod200JSONResponse) VisitPermitTeamModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamMod403JSONResponse Notification

func (response PermitTeamMod403JSONResponse) VisitPermitTeamModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamMod404JSONResponse Notification

func (response PermitTeamMod404JSONResponse) VisitPermitTeamModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamMod412JSONResponse Notification

func (response PermitTeamMod412JSONResponse) VisitPermitTeamModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamMod422JSONResponse Notification

func (response PermitTeamMod422JSONResponse) VisitPermitTeamModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamMod500JSONResponse Notification

func (response PermitTeamMod500JSONResponse) VisitPermitTeamModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamModdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response PermitTeamModdefaultJSONResponse) VisitPermitTeamModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteTeamFromPackRequestObject struct {
	TeamId string `json:"team_id"`
	Body   *DeleteTeamFromPackJSONRequestBody
}

type DeleteTeamFromPackResponseObject interface {
	VisitDeleteTeamFromPackResponse(w http.ResponseWriter) error
}

type DeleteTeamFromPack200JSONResponse Notification

func (response DeleteTeamFromPack200JSONResponse) VisitDeleteTeamFromPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamFromPack403JSONResponse Notification

func (response DeleteTeamFromPack403JSONResponse) VisitDeleteTeamFromPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamFromPack404JSONResponse Notification

func (response DeleteTeamFromPack404JSONResponse) VisitDeleteTeamFromPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamFromPack412JSONResponse Notification

func (response DeleteTeamFromPack412JSONResponse) VisitDeleteTeamFromPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamFromPack500JSONResponse Notification

func (response DeleteTeamFromPack500JSONResponse) VisitDeleteTeamFromPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamFromPackdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response DeleteTeamFromPackdefaultJSONResponse) VisitDeleteTeamFromPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListTeamPacksRequestObject struct {
	TeamId string `json:"team_id"`
	Params ListTeamPacksParams
}

type ListTeamPacksResponseObject interface {
	VisitListTeamPacksResponse(w http.ResponseWriter) error
}

type ListTeamPacks200JSONResponse TeamPacks

func (response ListTeamPacks200JSONResponse) VisitListTeamPacksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTeamPacks403JSONResponse Notification

func (response ListTeamPacks403JSONResponse) VisitListTeamPacksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListTeamPacks404JSONResponse Notification

func (response ListTeamPacks404JSONResponse) VisitListTeamPacksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListTeamPacks500JSONResponse Notification

func (response ListTeamPacks500JSONResponse) VisitListTeamPacksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListTeamPacksdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ListTeamPacksdefaultJSONResponse) VisitListTeamPacksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AttachTeamToPackRequestObject struct {
	TeamId string `json:"team_id"`
	Body   *AttachTeamToPackJSONRequestBody
}

type AttachTeamToPackResponseObject interface {
	VisitAttachTeamToPackResponse(w http.ResponseWriter) error
}

type AttachTeamToPack200JSONResponse Notification

func (response AttachTeamToPack200JSONResponse) VisitAttachTeamToPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToPack403JSONResponse Notification

func (response AttachTeamToPack403JSONResponse) VisitAttachTeamToPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToPack404JSONResponse Notification

func (response AttachTeamToPack404JSONResponse) VisitAttachTeamToPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToPack412JSONResponse Notification

func (response AttachTeamToPack412JSONResponse) VisitAttachTeamToPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToPack422JSONResponse Notification

func (response AttachTeamToPack422JSONResponse) VisitAttachTeamToPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToPack500JSONResponse Notification

func (response AttachTeamToPack500JSONResponse) VisitAttachTeamToPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToPackdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response AttachTeamToPackdefaultJSONResponse) VisitAttachTeamToPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PermitTeamPackRequestObject struct {
	TeamId string `json:"team_id"`
	Body   *PermitTeamPackJSONRequestBody
}

type PermitTeamPackResponseObject interface {
	VisitPermitTeamPackResponse(w http.ResponseWriter) error
}

type PermitTeamPack200JSONResponse Notification

func (response PermitTeamPack200JSONResponse) VisitPermitTeamPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamPack403JSONResponse Notification

func (response PermitTeamPack403JSONResponse) VisitPermitTeamPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamPack404JSONResponse Notification

func (response PermitTeamPack404JSONResponse) VisitPermitTeamPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamPack412JSONResponse Notification

func (response PermitTeamPack412JSONResponse) VisitPermitTeamPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamPack422JSONResponse Notification

func (response PermitTeamPack422JSONResponse) VisitPermitTeamPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamPack500JSONResponse Notification

func (response PermitTeamPack500JSONResponse) VisitPermitTeamPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamPackdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response PermitTeamPackdefaultJSONResponse) VisitPermitTeamPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteTeamFromUserRequestObject struct {
	TeamId string `json:"team_id"`
	Body   *DeleteTeamFromUserJSONRequestBody
}

type DeleteTeamFromUserResponseObject interface {
	VisitDeleteTeamFromUserResponse(w http.ResponseWriter) error
}

type DeleteTeamFromUser200JSONResponse Notification

func (response DeleteTeamFromUser200JSONResponse) VisitDeleteTeamFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamFromUser403JSONResponse Notification

func (response DeleteTeamFromUser403JSONResponse) VisitDeleteTeamFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamFromUser404JSONResponse Notification

func (response DeleteTeamFromUser404JSONResponse) VisitDeleteTeamFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamFromUser412JSONResponse Notification

func (response DeleteTeamFromUser412JSONResponse) VisitDeleteTeamFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamFromUser500JSONResponse Notification

func (response DeleteTeamFromUser500JSONResponse) VisitDeleteTeamFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamFromUserdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response DeleteTeamFromUserdefaultJSONResponse) VisitDeleteTeamFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListTeamUsersRequestObject struct {
	TeamId string `json:"team_id"`
	Params ListTeamUsersParams
}

type ListTeamUsersResponseObject interface {
	VisitListTeamUsersResponse(w http.ResponseWriter) error
}

type ListTeamUsers200JSONResponse TeamUsers

func (response ListTeamUsers200JSONResponse) VisitListTeamUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTeamUsers403JSONResponse Notification

func (response ListTeamUsers403JSONResponse) VisitListTeamUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListTeamUsers404JSONResponse Notification

func (response ListTeamUsers404JSONResponse) VisitListTeamUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListTeamUsers500JSONResponse Notification

func (response ListTeamUsers500JSONResponse) VisitListTeamUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListTeamUsersdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ListTeamUsersdefaultJSONResponse) VisitListTeamUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AttachTeamToUserRequestObject struct {
	TeamId string `json:"team_id"`
	Body   *AttachTeamToUserJSONRequestBody
}

type AttachTeamToUserResponseObject interface {
	VisitAttachTeamToUserResponse(w http.ResponseWriter) error
}

type AttachTeamToUser200JSONResponse Notification

func (response AttachTeamToUser200JSONResponse) VisitAttachTeamToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToUser403JSONResponse Notification

func (response AttachTeamToUser403JSONResponse) VisitAttachTeamToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToUser404JSONResponse Notification

func (response AttachTeamToUser404JSONResponse) VisitAttachTeamToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToUser412JSONResponse Notification

func (response AttachTeamToUser412JSONResponse) VisitAttachTeamToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToUser422JSONResponse Notification

func (response AttachTeamToUser422JSONResponse) VisitAttachTeamToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToUser500JSONResponse Notification

func (response AttachTeamToUser500JSONResponse) VisitAttachTeamToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachTeamToUserdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response AttachTeamToUserdefaultJSONResponse) VisitAttachTeamToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PermitTeamUserRequestObject struct {
	TeamId string `json:"team_id"`
	Body   *PermitTeamUserJSONRequestBody
}

type PermitTeamUserResponseObject interface {
	VisitPermitTeamUserResponse(w http.ResponseWriter) error
}

type PermitTeamUser200JSONResponse Notification

func (response PermitTeamUser200JSONResponse) VisitPermitTeamUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamUser403JSONResponse Notification

func (response PermitTeamUser403JSONResponse) VisitPermitTeamUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamUser404JSONResponse Notification

func (response PermitTeamUser404JSONResponse) VisitPermitTeamUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamUser412JSONResponse Notification

func (response PermitTeamUser412JSONResponse) VisitPermitTeamUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamUser422JSONResponse Notification

func (response PermitTeamUser422JSONResponse) VisitPermitTeamUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamUser500JSONResponse Notification

func (response PermitTeamUser500JSONResponse) VisitPermitTeamUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PermitTeamUserdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response PermitTeamUserdefaultJSONResponse) VisitPermitTeamUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListUsersRequestObject struct {
	Params ListUsersParams
}

type ListUsersResponseObject interface {
	VisitListUsersResponse(w http.ResponseWriter) error
}

type ListUsers200JSONResponse Users

func (response ListUsers200JSONResponse) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListUsers403JSONResponse Notification

func (response ListUsers403JSONResponse) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListUsers500JSONResponse Notification

func (response ListUsers500JSONResponse) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListUsersdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ListUsersdefaultJSONResponse) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser200JSONResponse User

func (response CreateUser200JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser403JSONResponse Notification

func (response CreateUser403JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser422JSONResponse Notification

func (response CreateUser422JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser500JSONResponse Notification

func (response CreateUser500JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateUserdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response CreateUserdefaultJSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteUserRequestObject struct {
	UserId string `json:"user_id"`
}

type DeleteUserResponseObject interface {
	VisitDeleteUserResponse(w http.ResponseWriter) error
}

type DeleteUser200JSONResponse Notification

func (response DeleteUser200JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser400JSONResponse Notification

func (response DeleteUser400JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser403JSONResponse Notification

func (response DeleteUser403JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser404JSONResponse Notification

func (response DeleteUser404JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser500JSONResponse Notification

func (response DeleteUser500JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response DeleteUserdefaultJSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ShowUserRequestObject struct {
	UserId string `json:"user_id"`
}

type ShowUserResponseObject interface {
	VisitShowUserResponse(w http.ResponseWriter) error
}

type ShowUser200JSONResponse User

func (response ShowUser200JSONResponse) VisitShowUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowUser403JSONResponse Notification

func (response ShowUser403JSONResponse) VisitShowUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ShowUser404JSONResponse Notification

func (response ShowUser404JSONResponse) VisitShowUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ShowUser500JSONResponse Notification

func (response ShowUser500JSONResponse) VisitShowUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ShowUserdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ShowUserdefaultJSONResponse) VisitShowUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateUserRequestObject struct {
	UserId string `json:"user_id"`
	Body   *UpdateUserJSONRequestBody
}

type UpdateUserResponseObject interface {
	VisitUpdateUserResponse(w http.ResponseWriter) error
}

type UpdateUser200JSONResponse User

func (response UpdateUser200JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser403JSONResponse Notification

func (response UpdateUser403JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser404JSONResponse Notification

func (response UpdateUser404JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser422JSONResponse Notification

func (response UpdateUser422JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser500JSONResponse Notification

func (response UpdateUser500JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response UpdateUserdefaultJSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteUserFromModRequestObject struct {
	UserId string `json:"user_id"`
	Body   *DeleteUserFromModJSONRequestBody
}

type DeleteUserFromModResponseObject interface {
	VisitDeleteUserFromModResponse(w http.ResponseWriter) error
}

type DeleteUserFromMod200JSONResponse Notification

func (response DeleteUserFromMod200JSONResponse) VisitDeleteUserFromModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromMod403JSONResponse Notification

func (response DeleteUserFromMod403JSONResponse) VisitDeleteUserFromModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromMod404JSONResponse Notification

func (response DeleteUserFromMod404JSONResponse) VisitDeleteUserFromModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromMod412JSONResponse Notification

func (response DeleteUserFromMod412JSONResponse) VisitDeleteUserFromModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromMod500JSONResponse Notification

func (response DeleteUserFromMod500JSONResponse) VisitDeleteUserFromModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromModdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response DeleteUserFromModdefaultJSONResponse) VisitDeleteUserFromModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListUserModsRequestObject struct {
	UserId string `json:"user_id"`
	Params ListUserModsParams
}

type ListUserModsResponseObject interface {
	VisitListUserModsResponse(w http.ResponseWriter) error
}

type ListUserMods200JSONResponse UserMods

func (response ListUserMods200JSONResponse) VisitListUserModsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListUserMods403JSONResponse Notification

func (response ListUserMods403JSONResponse) VisitListUserModsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListUserMods404JSONResponse Notification

func (response ListUserMods404JSONResponse) VisitListUserModsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListUserMods500JSONResponse Notification

func (response ListUserMods500JSONResponse) VisitListUserModsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListUserModsdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ListUserModsdefaultJSONResponse) VisitListUserModsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AttachUserToModRequestObject struct {
	UserId string `json:"user_id"`
	Body   *AttachUserToModJSONRequestBody
}

type AttachUserToModResponseObject interface {
	VisitAttachUserToModResponse(w http.ResponseWriter) error
}

type AttachUserToMod200JSONResponse Notification

func (response AttachUserToMod200JSONResponse) VisitAttachUserToModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToMod403JSONResponse Notification

func (response AttachUserToMod403JSONResponse) VisitAttachUserToModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToMod404JSONResponse Notification

func (response AttachUserToMod404JSONResponse) VisitAttachUserToModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToMod412JSONResponse Notification

func (response AttachUserToMod412JSONResponse) VisitAttachUserToModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToMod422JSONResponse Notification

func (response AttachUserToMod422JSONResponse) VisitAttachUserToModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToMod500JSONResponse Notification

func (response AttachUserToMod500JSONResponse) VisitAttachUserToModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToModdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response AttachUserToModdefaultJSONResponse) VisitAttachUserToModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PermitUserModRequestObject struct {
	UserId string `json:"user_id"`
	Body   *PermitUserModJSONRequestBody
}

type PermitUserModResponseObject interface {
	VisitPermitUserModResponse(w http.ResponseWriter) error
}

type PermitUserMod200JSONResponse Notification

func (response PermitUserMod200JSONResponse) VisitPermitUserModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserMod403JSONResponse Notification

func (response PermitUserMod403JSONResponse) VisitPermitUserModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserMod404JSONResponse Notification

func (response PermitUserMod404JSONResponse) VisitPermitUserModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserMod412JSONResponse Notification

func (response PermitUserMod412JSONResponse) VisitPermitUserModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserMod422JSONResponse Notification

func (response PermitUserMod422JSONResponse) VisitPermitUserModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserMod500JSONResponse Notification

func (response PermitUserMod500JSONResponse) VisitPermitUserModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserModdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response PermitUserModdefaultJSONResponse) VisitPermitUserModResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteUserFromPackRequestObject struct {
	UserId string `json:"user_id"`
	Body   *DeleteUserFromPackJSONRequestBody
}

type DeleteUserFromPackResponseObject interface {
	VisitDeleteUserFromPackResponse(w http.ResponseWriter) error
}

type DeleteUserFromPack200JSONResponse Notification

func (response DeleteUserFromPack200JSONResponse) VisitDeleteUserFromPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromPack403JSONResponse Notification

func (response DeleteUserFromPack403JSONResponse) VisitDeleteUserFromPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromPack404JSONResponse Notification

func (response DeleteUserFromPack404JSONResponse) VisitDeleteUserFromPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromPack412JSONResponse Notification

func (response DeleteUserFromPack412JSONResponse) VisitDeleteUserFromPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromPack500JSONResponse Notification

func (response DeleteUserFromPack500JSONResponse) VisitDeleteUserFromPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromPackdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response DeleteUserFromPackdefaultJSONResponse) VisitDeleteUserFromPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListUserPacksRequestObject struct {
	UserId string `json:"user_id"`
	Params ListUserPacksParams
}

type ListUserPacksResponseObject interface {
	VisitListUserPacksResponse(w http.ResponseWriter) error
}

type ListUserPacks200JSONResponse UserPacks

func (response ListUserPacks200JSONResponse) VisitListUserPacksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListUserPacks403JSONResponse Notification

func (response ListUserPacks403JSONResponse) VisitListUserPacksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListUserPacks404JSONResponse Notification

func (response ListUserPacks404JSONResponse) VisitListUserPacksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListUserPacks500JSONResponse Notification

func (response ListUserPacks500JSONResponse) VisitListUserPacksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListUserPacksdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ListUserPacksdefaultJSONResponse) VisitListUserPacksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AttachUserToPackRequestObject struct {
	UserId string `json:"user_id"`
	Body   *AttachUserToPackJSONRequestBody
}

type AttachUserToPackResponseObject interface {
	VisitAttachUserToPackResponse(w http.ResponseWriter) error
}

type AttachUserToPack200JSONResponse Notification

func (response AttachUserToPack200JSONResponse) VisitAttachUserToPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToPack403JSONResponse Notification

func (response AttachUserToPack403JSONResponse) VisitAttachUserToPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToPack404JSONResponse Notification

func (response AttachUserToPack404JSONResponse) VisitAttachUserToPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToPack412JSONResponse Notification

func (response AttachUserToPack412JSONResponse) VisitAttachUserToPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToPack422JSONResponse Notification

func (response AttachUserToPack422JSONResponse) VisitAttachUserToPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToPack500JSONResponse Notification

func (response AttachUserToPack500JSONResponse) VisitAttachUserToPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToPackdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response AttachUserToPackdefaultJSONResponse) VisitAttachUserToPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PermitUserPackRequestObject struct {
	UserId string `json:"user_id"`
	Body   *PermitUserPackJSONRequestBody
}

type PermitUserPackResponseObject interface {
	VisitPermitUserPackResponse(w http.ResponseWriter) error
}

type PermitUserPack200JSONResponse Notification

func (response PermitUserPack200JSONResponse) VisitPermitUserPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserPack403JSONResponse Notification

func (response PermitUserPack403JSONResponse) VisitPermitUserPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserPack404JSONResponse Notification

func (response PermitUserPack404JSONResponse) VisitPermitUserPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserPack412JSONResponse Notification

func (response PermitUserPack412JSONResponse) VisitPermitUserPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserPack422JSONResponse Notification

func (response PermitUserPack422JSONResponse) VisitPermitUserPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserPack500JSONResponse Notification

func (response PermitUserPack500JSONResponse) VisitPermitUserPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserPackdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response PermitUserPackdefaultJSONResponse) VisitPermitUserPackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteUserFromTeamRequestObject struct {
	UserId string `json:"user_id"`
	Body   *DeleteUserFromTeamJSONRequestBody
}

type DeleteUserFromTeamResponseObject interface {
	VisitDeleteUserFromTeamResponse(w http.ResponseWriter) error
}

type DeleteUserFromTeam200JSONResponse Notification

func (response DeleteUserFromTeam200JSONResponse) VisitDeleteUserFromTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromTeam403JSONResponse Notification

func (response DeleteUserFromTeam403JSONResponse) VisitDeleteUserFromTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromTeam404JSONResponse Notification

func (response DeleteUserFromTeam404JSONResponse) VisitDeleteUserFromTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromTeam412JSONResponse Notification

func (response DeleteUserFromTeam412JSONResponse) VisitDeleteUserFromTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromTeam500JSONResponse Notification

func (response DeleteUserFromTeam500JSONResponse) VisitDeleteUserFromTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserFromTeamdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response DeleteUserFromTeamdefaultJSONResponse) VisitDeleteUserFromTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListUserTeamsRequestObject struct {
	UserId string `json:"user_id"`
	Params ListUserTeamsParams
}

type ListUserTeamsResponseObject interface {
	VisitListUserTeamsResponse(w http.ResponseWriter) error
}

type ListUserTeams200JSONResponse UserTeams

func (response ListUserTeams200JSONResponse) VisitListUserTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListUserTeams403JSONResponse Notification

func (response ListUserTeams403JSONResponse) VisitListUserTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListUserTeams404JSONResponse Notification

func (response ListUserTeams404JSONResponse) VisitListUserTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListUserTeams500JSONResponse Notification

func (response ListUserTeams500JSONResponse) VisitListUserTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListUserTeamsdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response ListUserTeamsdefaultJSONResponse) VisitListUserTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AttachUserToTeamRequestObject struct {
	UserId string `json:"user_id"`
	Body   *AttachUserToTeamJSONRequestBody
}

type AttachUserToTeamResponseObject interface {
	VisitAttachUserToTeamResponse(w http.ResponseWriter) error
}

type AttachUserToTeam200JSONResponse Notification

func (response AttachUserToTeam200JSONResponse) VisitAttachUserToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToTeam403JSONResponse Notification

func (response AttachUserToTeam403JSONResponse) VisitAttachUserToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToTeam404JSONResponse Notification

func (response AttachUserToTeam404JSONResponse) VisitAttachUserToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToTeam412JSONResponse Notification

func (response AttachUserToTeam412JSONResponse) VisitAttachUserToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToTeam422JSONResponse Notification

func (response AttachUserToTeam422JSONResponse) VisitAttachUserToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToTeam500JSONResponse Notification

func (response AttachUserToTeam500JSONResponse) VisitAttachUserToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AttachUserToTeamdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response AttachUserToTeamdefaultJSONResponse) VisitAttachUserToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PermitUserTeamRequestObject struct {
	UserId string `json:"user_id"`
	Body   *PermitUserTeamJSONRequestBody
}

type PermitUserTeamResponseObject interface {
	VisitPermitUserTeamResponse(w http.ResponseWriter) error
}

type PermitUserTeam200JSONResponse Notification

func (response PermitUserTeam200JSONResponse) VisitPermitUserTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserTeam403JSONResponse Notification

func (response PermitUserTeam403JSONResponse) VisitPermitUserTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserTeam404JSONResponse Notification

func (response PermitUserTeam404JSONResponse) VisitPermitUserTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserTeam412JSONResponse Notification

func (response PermitUserTeam412JSONResponse) VisitPermitUserTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserTeam422JSONResponse Notification

func (response PermitUserTeam422JSONResponse) VisitPermitUserTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserTeam500JSONResponse Notification

func (response PermitUserTeam500JSONResponse) VisitPermitUserTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PermitUserTeamdefaultJSONResponse struct {
	Body       Notification
	StatusCode int
}

func (response PermitUserTeamdefaultJSONResponse) VisitPermitUserTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Authenticate an user by credentials
	// (POST /auth/login)
	LoginAuth(ctx context.Context, request LoginAuthRequestObject) (LoginAuthResponseObject, error)
	// Fetch the available auth providers
	// (GET /auth/providers)
	ExternalProviders(ctx context.Context, request ExternalProvidersRequestObject) (ExternalProvidersResponseObject, error)
	// Refresh an auth token before it expires
	// (GET /auth/refresh)
	RefreshAuth(ctx context.Context, request RefreshAuthRequestObject) (RefreshAuthResponseObject, error)
	// Verify validity for an authentication token
	// (GET /auth/verify)
	VerifyAuth(ctx context.Context, request VerifyAuthRequestObject) (VerifyAuthResponseObject, error)
	// Callback for external authentication
	// (GET /auth/{provider}/callback)
	ExternalCallback(ctx context.Context, request ExternalCallbackRequestObject) (ExternalCallbackResponseObject, error)
	// Initialize the external authentication
	// (GET /auth/{provider}/initialize)
	ExternalInitialize(ctx context.Context, request ExternalInitializeRequestObject) (ExternalInitializeResponseObject, error)
	// Fetch the available Fabric versions
	// (GET /fabric)
	ListFabrics(ctx context.Context, request ListFabricsRequestObject) (ListFabricsResponseObject, error)
	// Update the available Fabric versions
	// (PUT /fabric)
	UpdateFabric(ctx context.Context, request UpdateFabricRequestObject) (UpdateFabricResponseObject, error)
	// Unlink a build from a Fabric version
	// (DELETE /fabric/{fabric_id}/builds)
	DeleteFabricFromBuild(ctx context.Context, request DeleteFabricFromBuildRequestObject) (DeleteFabricFromBuildResponseObject, error)
	// Fetch the builds attached to a Fabric version
	// (GET /fabric/{fabric_id}/builds)
	ListFabricBuilds(ctx context.Context, request ListFabricBuildsRequestObject) (ListFabricBuildsResponseObject, error)
	// Attach a build to a Fabric version
	// (POST /fabric/{fabric_id}/builds)
	AttachFabricToBuild(ctx context.Context, request AttachFabricToBuildRequestObject) (AttachFabricToBuildResponseObject, error)
	// Fetch the available Forge versions
	// (GET /forge)
	ListForges(ctx context.Context, request ListForgesRequestObject) (ListForgesResponseObject, error)
	// Update the available Forge versions
	// (PUT /forge)
	UpdateForge(ctx context.Context, request UpdateForgeRequestObject) (UpdateForgeResponseObject, error)
	// Unlink a build from a Forge version
	// (DELETE /forge/{forge_id}/builds)
	DeleteForgeFromBuild(ctx context.Context, request DeleteForgeFromBuildRequestObject) (DeleteForgeFromBuildResponseObject, error)
	// Fetch the builds attached to a Forge version
	// (GET /forge/{forge_id}/builds)
	ListForgeBuilds(ctx context.Context, request ListForgeBuildsRequestObject) (ListForgeBuildsResponseObject, error)
	// Attach a build to a Forge version
	// (POST /forge/{forge_id}/builds)
	AttachForgeToBuild(ctx context.Context, request AttachForgeToBuildRequestObject) (AttachForgeToBuildResponseObject, error)
	// Fetch the available Minecraft versions
	// (GET /minecraft)
	ListMinecrafts(ctx context.Context, request ListMinecraftsRequestObject) (ListMinecraftsResponseObject, error)
	// Update the available Minecraft versions
	// (PUT /minecraft)
	UpdateMinecraft(ctx context.Context, request UpdateMinecraftRequestObject) (UpdateMinecraftResponseObject, error)
	// Unlink a build from a Minecraft version
	// (DELETE /minecraft/{minecraft_id}/builds)
	DeleteMinecraftFromBuild(ctx context.Context, request DeleteMinecraftFromBuildRequestObject) (DeleteMinecraftFromBuildResponseObject, error)
	// Fetch the builds attached to a Minecraft version
	// (GET /minecraft/{minecraft_id}/builds)
	ListMinecraftBuilds(ctx context.Context, request ListMinecraftBuildsRequestObject) (ListMinecraftBuildsResponseObject, error)
	// Attach a build to a Minecraft version
	// (POST /minecraft/{minecraft_id}/builds)
	AttachMinecraftToBuild(ctx context.Context, request AttachMinecraftToBuildRequestObject) (AttachMinecraftToBuildResponseObject, error)
	// Fetch all available mods
	// (GET /mods)
	ListMods(ctx context.Context, request ListModsRequestObject) (ListModsResponseObject, error)
	// Create a new mod
	// (POST /mods)
	CreateMod(ctx context.Context, request CreateModRequestObject) (CreateModResponseObject, error)
	// Delete a specific mod
	// (DELETE /mods/{mod_id})
	DeleteMod(ctx context.Context, request DeleteModRequestObject) (DeleteModResponseObject, error)
	// Fetch a specific mod
	// (GET /mods/{mod_id})
	ShowMod(ctx context.Context, request ShowModRequestObject) (ShowModResponseObject, error)
	// Update a specific mod
	// (PUT /mods/{mod_id})
	UpdateMod(ctx context.Context, request UpdateModRequestObject) (UpdateModResponseObject, error)
	// Unlink a team from mod
	// (DELETE /mods/{mod_id}/teams)
	DeleteModFromTeam(ctx context.Context, request DeleteModFromTeamRequestObject) (DeleteModFromTeamResponseObject, error)
	// Fetch all teams attached to mod
	// (GET /mods/{mod_id}/teams)
	ListModTeams(ctx context.Context, request ListModTeamsRequestObject) (ListModTeamsResponseObject, error)
	// Attach a team to mod
	// (POST /mods/{mod_id}/teams)
	AttachModToTeam(ctx context.Context, request AttachModToTeamRequestObject) (AttachModToTeamResponseObject, error)
	// Update team perms for mod
	// (PUT /mods/{mod_id}/teams)
	PermitModTeam(ctx context.Context, request PermitModTeamRequestObject) (PermitModTeamResponseObject, error)
	// Unlink a user from mod
	// (DELETE /mods/{mod_id}/users)
	DeleteModFromUser(ctx context.Context, request DeleteModFromUserRequestObject) (DeleteModFromUserResponseObject, error)
	// Fetch all users attached to mod
	// (GET /mods/{mod_id}/users)
	ListModUsers(ctx context.Context, request ListModUsersRequestObject) (ListModUsersResponseObject, error)
	// Attach a user to mod
	// (POST /mods/{mod_id}/users)
	AttachModToUser(ctx context.Context, request AttachModToUserRequestObject) (AttachModToUserResponseObject, error)
	// Update user perms for mod
	// (PUT /mods/{mod_id}/users)
	PermitModUser(ctx context.Context, request PermitModUserRequestObject) (PermitModUserResponseObject, error)
	// Fetch all available versions for a mod
	// (GET /mods/{mod_id}/versions)
	ListVersions(ctx context.Context, request ListVersionsRequestObject) (ListVersionsResponseObject, error)
	// Create a new version for a mod
	// (POST /mods/{mod_id}/versions)
	CreateVersion(ctx context.Context, request CreateVersionRequestObject) (CreateVersionResponseObject, error)
	// Delete a specific version for a mod
	// (DELETE /mods/{mod_id}/versions/{version_id})
	DeleteVersion(ctx context.Context, request DeleteVersionRequestObject) (DeleteVersionResponseObject, error)
	// Fetch a specific version for a mod
	// (GET /mods/{mod_id}/versions/{version_id})
	ShowVersion(ctx context.Context, request ShowVersionRequestObject) (ShowVersionResponseObject, error)
	// Update a specific version for a mod
	// (PUT /mods/{mod_id}/versions/{version_id})
	UpdateVersion(ctx context.Context, request UpdateVersionRequestObject) (UpdateVersionResponseObject, error)
	// Unlink a build from a version
	// (DELETE /mods/{mod_id}/versions/{version_id}/builds)
	DeleteVersionFromBuild(ctx context.Context, request DeleteVersionFromBuildRequestObject) (DeleteVersionFromBuildResponseObject, error)
	// Fetch all builds attached to version
	// (GET /mods/{mod_id}/versions/{version_id}/builds)
	ListVersionBuilds(ctx context.Context, request ListVersionBuildsRequestObject) (ListVersionBuildsResponseObject, error)
	// Attach a build to a version
	// (POST /mods/{mod_id}/versions/{version_id}/builds)
	AttachVersionToBuild(ctx context.Context, request AttachVersionToBuildRequestObject) (AttachVersionToBuildResponseObject, error)
	// Fetch the available Neoforge versions
	// (GET /neoforge)
	ListNeoforges(ctx context.Context, request ListNeoforgesRequestObject) (ListNeoforgesResponseObject, error)
	// Update the available Neoforge versions
	// (PUT /neoforge)
	UpdateNeoforge(ctx context.Context, request UpdateNeoforgeRequestObject) (UpdateNeoforgeResponseObject, error)
	// Unlink a build from a Neoforge version
	// (DELETE /neoforge/{neoforge_id}/builds)
	DeleteNeoforgeFromBuild(ctx context.Context, request DeleteNeoforgeFromBuildRequestObject) (DeleteNeoforgeFromBuildResponseObject, error)
	// Fetch the builds attached to a Neoforge version
	// (GET /neoforge/{neoforge_id}/builds)
	ListNeoforgeBuilds(ctx context.Context, request ListNeoforgeBuildsRequestObject) (ListNeoforgeBuildsResponseObject, error)
	// Attach a build to a Neoforge version
	// (POST /neoforge/{neoforge_id}/builds)
	AttachNeoforgeToBuild(ctx context.Context, request AttachNeoforgeToBuildRequestObject) (AttachNeoforgeToBuildResponseObject, error)
	// Fetch all available packs
	// (GET /packs)
	ListPacks(ctx context.Context, request ListPacksRequestObject) (ListPacksResponseObject, error)
	// Create a new pack
	// (POST /packs)
	CreatePack(ctx context.Context, request CreatePackRequestObject) (CreatePackResponseObject, error)
	// Delete a specific pack
	// (DELETE /packs/{pack_id})
	DeletePack(ctx context.Context, request DeletePackRequestObject) (DeletePackResponseObject, error)
	// Fetch a specific pack
	// (GET /packs/{pack_id})
	ShowPack(ctx context.Context, request ShowPackRequestObject) (ShowPackResponseObject, error)
	// Update a specific pack
	// (PUT /packs/{pack_id})
	UpdatePack(ctx context.Context, request UpdatePackRequestObject) (UpdatePackResponseObject, error)
	// Fetch all available builds for a pack
	// (GET /packs/{pack_id}/builds)
	ListBuilds(ctx context.Context, request ListBuildsRequestObject) (ListBuildsResponseObject, error)
	// Create a new build for a pack
	// (POST /packs/{pack_id}/builds)
	CreateBuild(ctx context.Context, request CreateBuildRequestObject) (CreateBuildResponseObject, error)
	// Delete a specific build for a pack
	// (DELETE /packs/{pack_id}/builds/{build_id})
	DeleteBuild(ctx context.Context, request DeleteBuildRequestObject) (DeleteBuildResponseObject, error)
	// Fetch a specific build for a pack
	// (GET /packs/{pack_id}/builds/{build_id})
	ShowBuild(ctx context.Context, request ShowBuildRequestObject) (ShowBuildResponseObject, error)
	// Update a specific build for a pack
	// (PUT /packs/{pack_id}/builds/{build_id})
	UpdateBuild(ctx context.Context, request UpdateBuildRequestObject) (UpdateBuildResponseObject, error)
	// Unlink a version from a build
	// (DELETE /packs/{pack_id}/builds/{build_id}/versions)
	DeleteBuildFromVersion(ctx context.Context, request DeleteBuildFromVersionRequestObject) (DeleteBuildFromVersionResponseObject, error)
	// Fetch all versions attached to build
	// (GET /packs/{pack_id}/builds/{build_id}/versions)
	ListBuildVersions(ctx context.Context, request ListBuildVersionsRequestObject) (ListBuildVersionsResponseObject, error)
	// Attach a version to a build
	// (POST /packs/{pack_id}/builds/{build_id}/versions)
	AttachBuildToVersion(ctx context.Context, request AttachBuildToVersionRequestObject) (AttachBuildToVersionResponseObject, error)
	// Unlink a team from pack
	// (DELETE /packs/{pack_id}/teams)
	DeletePackFromTeam(ctx context.Context, request DeletePackFromTeamRequestObject) (DeletePackFromTeamResponseObject, error)
	// Fetch all teams attached to pack
	// (GET /packs/{pack_id}/teams)
	ListPackTeams(ctx context.Context, request ListPackTeamsRequestObject) (ListPackTeamsResponseObject, error)
	// Attach a team to pack
	// (POST /packs/{pack_id}/teams)
	AttachPackToTeam(ctx context.Context, request AttachPackToTeamRequestObject) (AttachPackToTeamResponseObject, error)
	// Update team perms for pack
	// (PUT /packs/{pack_id}/teams)
	PermitPackTeam(ctx context.Context, request PermitPackTeamRequestObject) (PermitPackTeamResponseObject, error)
	// Unlink a user from pack
	// (DELETE /packs/{pack_id}/users)
	DeletePackFromUser(ctx context.Context, request DeletePackFromUserRequestObject) (DeletePackFromUserResponseObject, error)
	// Fetch all users attached to pack
	// (GET /packs/{pack_id}/users)
	ListPackUsers(ctx context.Context, request ListPackUsersRequestObject) (ListPackUsersResponseObject, error)
	// Attach a user to pack
	// (POST /packs/{pack_id}/users)
	AttachPackToUser(ctx context.Context, request AttachPackToUserRequestObject) (AttachPackToUserResponseObject, error)
	// Update user perms for pack
	// (PUT /packs/{pack_id}/users)
	PermitPackUser(ctx context.Context, request PermitPackUserRequestObject) (PermitPackUserResponseObject, error)
	// Fetch profile details of the personal account
	// (GET /profile/self)
	ShowProfile(ctx context.Context, request ShowProfileRequestObject) (ShowProfileResponseObject, error)
	// Update your own profile information
	// (PUT /profile/self)
	UpdateProfile(ctx context.Context, request UpdateProfileRequestObject) (UpdateProfileResponseObject, error)
	// Retrieve an unlimited auth token
	// (GET /profile/token)
	TokenProfile(ctx context.Context, request TokenProfileRequestObject) (TokenProfileResponseObject, error)
	// Fetch the available Quilt versions
	// (GET /quilt)
	ListQuilts(ctx context.Context, request ListQuiltsRequestObject) (ListQuiltsResponseObject, error)
	// Update the available Quilt versions
	// (PUT /quilt)
	UpdateQuilt(ctx context.Context, request UpdateQuiltRequestObject) (UpdateQuiltResponseObject, error)
	// Unlink a build from a Quilt version
	// (DELETE /quilt/{quilt_id}/builds)
	DeleteQuiltFromBuild(ctx context.Context, request DeleteQuiltFromBuildRequestObject) (DeleteQuiltFromBuildResponseObject, error)
	// Fetch the builds attached to a Quilt version
	// (GET /quilt/{quilt_id}/builds)
	ListQuiltBuilds(ctx context.Context, request ListQuiltBuildsRequestObject) (ListQuiltBuildsResponseObject, error)
	// Attach a build to a Quilt version
	// (POST /quilt/{quilt_id}/builds)
	AttachQuiltToBuild(ctx context.Context, request AttachQuiltToBuildRequestObject) (AttachQuiltToBuildResponseObject, error)
	// Fetch all available teams
	// (GET /teams)
	ListTeams(ctx context.Context, request ListTeamsRequestObject) (ListTeamsResponseObject, error)
	// Create a new team
	// (POST /teams)
	CreateTeam(ctx context.Context, request CreateTeamRequestObject) (CreateTeamResponseObject, error)
	// Delete a specific team
	// (DELETE /teams/{team_id})
	DeleteTeam(ctx context.Context, request DeleteTeamRequestObject) (DeleteTeamResponseObject, error)
	// Fetch a specific team
	// (GET /teams/{team_id})
	ShowTeam(ctx context.Context, request ShowTeamRequestObject) (ShowTeamResponseObject, error)
	// Update a specific team
	// (PUT /teams/{team_id})
	UpdateTeam(ctx context.Context, request UpdateTeamRequestObject) (UpdateTeamResponseObject, error)
	// Unlink a mod from team
	// (DELETE /teams/{team_id}/mods)
	DeleteTeamFromMod(ctx context.Context, request DeleteTeamFromModRequestObject) (DeleteTeamFromModResponseObject, error)
	// Fetch all mods attached to team
	// (GET /teams/{team_id}/mods)
	ListTeamMods(ctx context.Context, request ListTeamModsRequestObject) (ListTeamModsResponseObject, error)
	// Attach a mod to team
	// (POST /teams/{team_id}/mods)
	AttachTeamToMod(ctx context.Context, request AttachTeamToModRequestObject) (AttachTeamToModResponseObject, error)
	// Update mod perms for team
	// (PUT /teams/{team_id}/mods)
	PermitTeamMod(ctx context.Context, request PermitTeamModRequestObject) (PermitTeamModResponseObject, error)
	// Unlink a pack from team
	// (DELETE /teams/{team_id}/packs)
	DeleteTeamFromPack(ctx context.Context, request DeleteTeamFromPackRequestObject) (DeleteTeamFromPackResponseObject, error)
	// Fetch all packs attached to team
	// (GET /teams/{team_id}/packs)
	ListTeamPacks(ctx context.Context, request ListTeamPacksRequestObject) (ListTeamPacksResponseObject, error)
	// Attach a pack to team
	// (POST /teams/{team_id}/packs)
	AttachTeamToPack(ctx context.Context, request AttachTeamToPackRequestObject) (AttachTeamToPackResponseObject, error)
	// Update pack perms for team
	// (PUT /teams/{team_id}/packs)
	PermitTeamPack(ctx context.Context, request PermitTeamPackRequestObject) (PermitTeamPackResponseObject, error)
	// Unlink a user from team
	// (DELETE /teams/{team_id}/users)
	DeleteTeamFromUser(ctx context.Context, request DeleteTeamFromUserRequestObject) (DeleteTeamFromUserResponseObject, error)
	// Fetch all users attached to team
	// (GET /teams/{team_id}/users)
	ListTeamUsers(ctx context.Context, request ListTeamUsersRequestObject) (ListTeamUsersResponseObject, error)
	// Attach a user to team
	// (POST /teams/{team_id}/users)
	AttachTeamToUser(ctx context.Context, request AttachTeamToUserRequestObject) (AttachTeamToUserResponseObject, error)
	// Update user perms for team
	// (PUT /teams/{team_id}/users)
	PermitTeamUser(ctx context.Context, request PermitTeamUserRequestObject) (PermitTeamUserResponseObject, error)
	// Fetch all available users
	// (GET /users)
	ListUsers(ctx context.Context, request ListUsersRequestObject) (ListUsersResponseObject, error)
	// Create a new user
	// (POST /users)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
	// Delete a specific user
	// (DELETE /users/{user_id})
	DeleteUser(ctx context.Context, request DeleteUserRequestObject) (DeleteUserResponseObject, error)
	// Fetch a specific user
	// (GET /users/{user_id})
	ShowUser(ctx context.Context, request ShowUserRequestObject) (ShowUserResponseObject, error)
	// Update a specific user
	// (PUT /users/{user_id})
	UpdateUser(ctx context.Context, request UpdateUserRequestObject) (UpdateUserResponseObject, error)
	// Unlink a mod from user
	// (DELETE /users/{user_id}/mods)
	DeleteUserFromMod(ctx context.Context, request DeleteUserFromModRequestObject) (DeleteUserFromModResponseObject, error)
	// Fetch all mods attached to user
	// (GET /users/{user_id}/mods)
	ListUserMods(ctx context.Context, request ListUserModsRequestObject) (ListUserModsResponseObject, error)
	// Attach a mod to user
	// (POST /users/{user_id}/mods)
	AttachUserToMod(ctx context.Context, request AttachUserToModRequestObject) (AttachUserToModResponseObject, error)
	// Update mod perms for user
	// (PUT /users/{user_id}/mods)
	PermitUserMod(ctx context.Context, request PermitUserModRequestObject) (PermitUserModResponseObject, error)
	// Unlink a pack from user
	// (DELETE /users/{user_id}/packs)
	DeleteUserFromPack(ctx context.Context, request DeleteUserFromPackRequestObject) (DeleteUserFromPackResponseObject, error)
	// Fetch all packs attached to user
	// (GET /users/{user_id}/packs)
	ListUserPacks(ctx context.Context, request ListUserPacksRequestObject) (ListUserPacksResponseObject, error)
	// Attach a pack to user
	// (POST /users/{user_id}/packs)
	AttachUserToPack(ctx context.Context, request AttachUserToPackRequestObject) (AttachUserToPackResponseObject, error)
	// Update pack perms for user
	// (PUT /users/{user_id}/packs)
	PermitUserPack(ctx context.Context, request PermitUserPackRequestObject) (PermitUserPackResponseObject, error)
	// Unlink a team from user
	// (DELETE /users/{user_id}/teams)
	DeleteUserFromTeam(ctx context.Context, request DeleteUserFromTeamRequestObject) (DeleteUserFromTeamResponseObject, error)
	// Fetch all teams attached to user
	// (GET /users/{user_id}/teams)
	ListUserTeams(ctx context.Context, request ListUserTeamsRequestObject) (ListUserTeamsResponseObject, error)
	// Attach a team to user
	// (POST /users/{user_id}/teams)
	AttachUserToTeam(ctx context.Context, request AttachUserToTeamRequestObject) (AttachUserToTeamResponseObject, error)
	// Update team perms for user
	// (PUT /users/{user_id}/teams)
	PermitUserTeam(ctx context.Context, request PermitUserTeamRequestObject) (PermitUserTeamResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// LoginAuth operation middleware
func (sh *strictHandler) LoginAuth(w http.ResponseWriter, r *http.Request) {
	var request LoginAuthRequestObject

	var body LoginAuthJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LoginAuth(ctx, request.(LoginAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LoginAuth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoginAuthResponseObject); ok {
		if err := validResponse.VisitLoginAuthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExternalProviders operation middleware
func (sh *strictHandler) ExternalProviders(w http.ResponseWriter, r *http.Request) {
	var request ExternalProvidersRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ExternalProviders(ctx, request.(ExternalProvidersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExternalProviders")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ExternalProvidersResponseObject); ok {
		if err := validResponse.VisitExternalProvidersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RefreshAuth operation middleware
func (sh *strictHandler) RefreshAuth(w http.ResponseWriter, r *http.Request) {
	var request RefreshAuthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RefreshAuth(ctx, request.(RefreshAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RefreshAuth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RefreshAuthResponseObject); ok {
		if err := validResponse.VisitRefreshAuthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyAuth operation middleware
func (sh *strictHandler) VerifyAuth(w http.ResponseWriter, r *http.Request) {
	var request VerifyAuthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyAuth(ctx, request.(VerifyAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyAuth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(VerifyAuthResponseObject); ok {
		if err := validResponse.VisitVerifyAuthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExternalCallback operation middleware
func (sh *strictHandler) ExternalCallback(w http.ResponseWriter, r *http.Request, provider string, params ExternalCallbackParams) {
	var request ExternalCallbackRequestObject

	request.Provider = provider
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ExternalCallback(ctx, request.(ExternalCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExternalCallback")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ExternalCallbackResponseObject); ok {
		if err := validResponse.VisitExternalCallbackResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExternalInitialize operation middleware
func (sh *strictHandler) ExternalInitialize(w http.ResponseWriter, r *http.Request, provider string, params ExternalInitializeParams) {
	var request ExternalInitializeRequestObject

	request.Provider = provider
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ExternalInitialize(ctx, request.(ExternalInitializeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExternalInitialize")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ExternalInitializeResponseObject); ok {
		if err := validResponse.VisitExternalInitializeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListFabrics operation middleware
func (sh *strictHandler) ListFabrics(w http.ResponseWriter, r *http.Request, params ListFabricsParams) {
	var request ListFabricsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListFabrics(ctx, request.(ListFabricsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListFabrics")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListFabricsResponseObject); ok {
		if err := validResponse.VisitListFabricsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateFabric operation middleware
func (sh *strictHandler) UpdateFabric(w http.ResponseWriter, r *http.Request) {
	var request UpdateFabricRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateFabric(ctx, request.(UpdateFabricRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateFabric")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateFabricResponseObject); ok {
		if err := validResponse.VisitUpdateFabricResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteFabricFromBuild operation middleware
func (sh *strictHandler) DeleteFabricFromBuild(w http.ResponseWriter, r *http.Request, fabricId string) {
	var request DeleteFabricFromBuildRequestObject

	request.FabricId = fabricId

	var body DeleteFabricFromBuildJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFabricFromBuild(ctx, request.(DeleteFabricFromBuildRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFabricFromBuild")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteFabricFromBuildResponseObject); ok {
		if err := validResponse.VisitDeleteFabricFromBuildResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListFabricBuilds operation middleware
func (sh *strictHandler) ListFabricBuilds(w http.ResponseWriter, r *http.Request, fabricId string, params ListFabricBuildsParams) {
	var request ListFabricBuildsRequestObject

	request.FabricId = fabricId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListFabricBuilds(ctx, request.(ListFabricBuildsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListFabricBuilds")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListFabricBuildsResponseObject); ok {
		if err := validResponse.VisitListFabricBuildsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachFabricToBuild operation middleware
func (sh *strictHandler) AttachFabricToBuild(w http.ResponseWriter, r *http.Request, fabricId string) {
	var request AttachFabricToBuildRequestObject

	request.FabricId = fabricId

	var body AttachFabricToBuildJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachFabricToBuild(ctx, request.(AttachFabricToBuildRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachFabricToBuild")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachFabricToBuildResponseObject); ok {
		if err := validResponse.VisitAttachFabricToBuildResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListForges operation middleware
func (sh *strictHandler) ListForges(w http.ResponseWriter, r *http.Request, params ListForgesParams) {
	var request ListForgesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListForges(ctx, request.(ListForgesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListForges")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListForgesResponseObject); ok {
		if err := validResponse.VisitListForgesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateForge operation middleware
func (sh *strictHandler) UpdateForge(w http.ResponseWriter, r *http.Request) {
	var request UpdateForgeRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateForge(ctx, request.(UpdateForgeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateForge")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateForgeResponseObject); ok {
		if err := validResponse.VisitUpdateForgeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteForgeFromBuild operation middleware
func (sh *strictHandler) DeleteForgeFromBuild(w http.ResponseWriter, r *http.Request, forgeId string) {
	var request DeleteForgeFromBuildRequestObject

	request.ForgeId = forgeId

	var body DeleteForgeFromBuildJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteForgeFromBuild(ctx, request.(DeleteForgeFromBuildRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteForgeFromBuild")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteForgeFromBuildResponseObject); ok {
		if err := validResponse.VisitDeleteForgeFromBuildResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListForgeBuilds operation middleware
func (sh *strictHandler) ListForgeBuilds(w http.ResponseWriter, r *http.Request, forgeId string, params ListForgeBuildsParams) {
	var request ListForgeBuildsRequestObject

	request.ForgeId = forgeId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListForgeBuilds(ctx, request.(ListForgeBuildsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListForgeBuilds")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListForgeBuildsResponseObject); ok {
		if err := validResponse.VisitListForgeBuildsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachForgeToBuild operation middleware
func (sh *strictHandler) AttachForgeToBuild(w http.ResponseWriter, r *http.Request, forgeId string) {
	var request AttachForgeToBuildRequestObject

	request.ForgeId = forgeId

	var body AttachForgeToBuildJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachForgeToBuild(ctx, request.(AttachForgeToBuildRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachForgeToBuild")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachForgeToBuildResponseObject); ok {
		if err := validResponse.VisitAttachForgeToBuildResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListMinecrafts operation middleware
func (sh *strictHandler) ListMinecrafts(w http.ResponseWriter, r *http.Request, params ListMinecraftsParams) {
	var request ListMinecraftsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListMinecrafts(ctx, request.(ListMinecraftsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListMinecrafts")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListMinecraftsResponseObject); ok {
		if err := validResponse.VisitListMinecraftsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateMinecraft operation middleware
func (sh *strictHandler) UpdateMinecraft(w http.ResponseWriter, r *http.Request) {
	var request UpdateMinecraftRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateMinecraft(ctx, request.(UpdateMinecraftRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateMinecraft")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateMinecraftResponseObject); ok {
		if err := validResponse.VisitUpdateMinecraftResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteMinecraftFromBuild operation middleware
func (sh *strictHandler) DeleteMinecraftFromBuild(w http.ResponseWriter, r *http.Request, minecraftId string) {
	var request DeleteMinecraftFromBuildRequestObject

	request.MinecraftId = minecraftId

	var body DeleteMinecraftFromBuildJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteMinecraftFromBuild(ctx, request.(DeleteMinecraftFromBuildRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteMinecraftFromBuild")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteMinecraftFromBuildResponseObject); ok {
		if err := validResponse.VisitDeleteMinecraftFromBuildResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListMinecraftBuilds operation middleware
func (sh *strictHandler) ListMinecraftBuilds(w http.ResponseWriter, r *http.Request, minecraftId string, params ListMinecraftBuildsParams) {
	var request ListMinecraftBuildsRequestObject

	request.MinecraftId = minecraftId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListMinecraftBuilds(ctx, request.(ListMinecraftBuildsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListMinecraftBuilds")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListMinecraftBuildsResponseObject); ok {
		if err := validResponse.VisitListMinecraftBuildsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachMinecraftToBuild operation middleware
func (sh *strictHandler) AttachMinecraftToBuild(w http.ResponseWriter, r *http.Request, minecraftId string) {
	var request AttachMinecraftToBuildRequestObject

	request.MinecraftId = minecraftId

	var body AttachMinecraftToBuildJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachMinecraftToBuild(ctx, request.(AttachMinecraftToBuildRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachMinecraftToBuild")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachMinecraftToBuildResponseObject); ok {
		if err := validResponse.VisitAttachMinecraftToBuildResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListMods operation middleware
func (sh *strictHandler) ListMods(w http.ResponseWriter, r *http.Request, params ListModsParams) {
	var request ListModsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListMods(ctx, request.(ListModsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListMods")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListModsResponseObject); ok {
		if err := validResponse.VisitListModsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateMod operation middleware
func (sh *strictHandler) CreateMod(w http.ResponseWriter, r *http.Request) {
	var request CreateModRequestObject

	var body CreateModJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateMod(ctx, request.(CreateModRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateMod")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateModResponseObject); ok {
		if err := validResponse.VisitCreateModResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteMod operation middleware
func (sh *strictHandler) DeleteMod(w http.ResponseWriter, r *http.Request, modId string) {
	var request DeleteModRequestObject

	request.ModId = modId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteMod(ctx, request.(DeleteModRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteMod")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteModResponseObject); ok {
		if err := validResponse.VisitDeleteModResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowMod operation middleware
func (sh *strictHandler) ShowMod(w http.ResponseWriter, r *http.Request, modId string) {
	var request ShowModRequestObject

	request.ModId = modId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowMod(ctx, request.(ShowModRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowMod")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowModResponseObject); ok {
		if err := validResponse.VisitShowModResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateMod operation middleware
func (sh *strictHandler) UpdateMod(w http.ResponseWriter, r *http.Request, modId string) {
	var request UpdateModRequestObject

	request.ModId = modId

	var body UpdateModJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateMod(ctx, request.(UpdateModRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateMod")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateModResponseObject); ok {
		if err := validResponse.VisitUpdateModResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteModFromTeam operation middleware
func (sh *strictHandler) DeleteModFromTeam(w http.ResponseWriter, r *http.Request, modId string) {
	var request DeleteModFromTeamRequestObject

	request.ModId = modId

	var body DeleteModFromTeamJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteModFromTeam(ctx, request.(DeleteModFromTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteModFromTeam")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteModFromTeamResponseObject); ok {
		if err := validResponse.VisitDeleteModFromTeamResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListModTeams operation middleware
func (sh *strictHandler) ListModTeams(w http.ResponseWriter, r *http.Request, modId string, params ListModTeamsParams) {
	var request ListModTeamsRequestObject

	request.ModId = modId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListModTeams(ctx, request.(ListModTeamsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListModTeams")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListModTeamsResponseObject); ok {
		if err := validResponse.VisitListModTeamsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachModToTeam operation middleware
func (sh *strictHandler) AttachModToTeam(w http.ResponseWriter, r *http.Request, modId string) {
	var request AttachModToTeamRequestObject

	request.ModId = modId

	var body AttachModToTeamJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachModToTeam(ctx, request.(AttachModToTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachModToTeam")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachModToTeamResponseObject); ok {
		if err := validResponse.VisitAttachModToTeamResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PermitModTeam operation middleware
func (sh *strictHandler) PermitModTeam(w http.ResponseWriter, r *http.Request, modId string) {
	var request PermitModTeamRequestObject

	request.ModId = modId

	var body PermitModTeamJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PermitModTeam(ctx, request.(PermitModTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PermitModTeam")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PermitModTeamResponseObject); ok {
		if err := validResponse.VisitPermitModTeamResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteModFromUser operation middleware
func (sh *strictHandler) DeleteModFromUser(w http.ResponseWriter, r *http.Request, modId string) {
	var request DeleteModFromUserRequestObject

	request.ModId = modId

	var body DeleteModFromUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteModFromUser(ctx, request.(DeleteModFromUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteModFromUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteModFromUserResponseObject); ok {
		if err := validResponse.VisitDeleteModFromUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListModUsers operation middleware
func (sh *strictHandler) ListModUsers(w http.ResponseWriter, r *http.Request, modId string, params ListModUsersParams) {
	var request ListModUsersRequestObject

	request.ModId = modId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListModUsers(ctx, request.(ListModUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListModUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListModUsersResponseObject); ok {
		if err := validResponse.VisitListModUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachModToUser operation middleware
func (sh *strictHandler) AttachModToUser(w http.ResponseWriter, r *http.Request, modId string) {
	var request AttachModToUserRequestObject

	request.ModId = modId

	var body AttachModToUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachModToUser(ctx, request.(AttachModToUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachModToUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachModToUserResponseObject); ok {
		if err := validResponse.VisitAttachModToUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PermitModUser operation middleware
func (sh *strictHandler) PermitModUser(w http.ResponseWriter, r *http.Request, modId string) {
	var request PermitModUserRequestObject

	request.ModId = modId

	var body PermitModUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PermitModUser(ctx, request.(PermitModUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PermitModUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PermitModUserResponseObject); ok {
		if err := validResponse.VisitPermitModUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListVersions operation middleware
func (sh *strictHandler) ListVersions(w http.ResponseWriter, r *http.Request, modId string, params ListVersionsParams) {
	var request ListVersionsRequestObject

	request.ModId = modId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListVersions(ctx, request.(ListVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListVersionsResponseObject); ok {
		if err := validResponse.VisitListVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateVersion operation middleware
func (sh *strictHandler) CreateVersion(w http.ResponseWriter, r *http.Request, modId string) {
	var request CreateVersionRequestObject

	request.ModId = modId

	var body CreateVersionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateVersion(ctx, request.(CreateVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateVersion")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateVersionResponseObject); ok {
		if err := validResponse.VisitCreateVersionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteVersion operation middleware
func (sh *strictHandler) DeleteVersion(w http.ResponseWriter, r *http.Request, modId string, versionId string) {
	var request DeleteVersionRequestObject

	request.ModId = modId
	request.VersionId = versionId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteVersion(ctx, request.(DeleteVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteVersion")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteVersionResponseObject); ok {
		if err := validResponse.VisitDeleteVersionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowVersion operation middleware
func (sh *strictHandler) ShowVersion(w http.ResponseWriter, r *http.Request, modId string, versionId string) {
	var request ShowVersionRequestObject

	request.ModId = modId
	request.VersionId = versionId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowVersion(ctx, request.(ShowVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowVersion")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowVersionResponseObject); ok {
		if err := validResponse.VisitShowVersionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateVersion operation middleware
func (sh *strictHandler) UpdateVersion(w http.ResponseWriter, r *http.Request, modId string, versionId string) {
	var request UpdateVersionRequestObject

	request.ModId = modId
	request.VersionId = versionId

	var body UpdateVersionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateVersion(ctx, request.(UpdateVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateVersion")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateVersionResponseObject); ok {
		if err := validResponse.VisitUpdateVersionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteVersionFromBuild operation middleware
func (sh *strictHandler) DeleteVersionFromBuild(w http.ResponseWriter, r *http.Request, modId string, versionId string) {
	var request DeleteVersionFromBuildRequestObject

	request.ModId = modId
	request.VersionId = versionId

	var body DeleteVersionFromBuildJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteVersionFromBuild(ctx, request.(DeleteVersionFromBuildRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteVersionFromBuild")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteVersionFromBuildResponseObject); ok {
		if err := validResponse.VisitDeleteVersionFromBuildResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListVersionBuilds operation middleware
func (sh *strictHandler) ListVersionBuilds(w http.ResponseWriter, r *http.Request, modId string, versionId string, params ListVersionBuildsParams) {
	var request ListVersionBuildsRequestObject

	request.ModId = modId
	request.VersionId = versionId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListVersionBuilds(ctx, request.(ListVersionBuildsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListVersionBuilds")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListVersionBuildsResponseObject); ok {
		if err := validResponse.VisitListVersionBuildsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachVersionToBuild operation middleware
func (sh *strictHandler) AttachVersionToBuild(w http.ResponseWriter, r *http.Request, modId string, versionId string) {
	var request AttachVersionToBuildRequestObject

	request.ModId = modId
	request.VersionId = versionId

	var body AttachVersionToBuildJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachVersionToBuild(ctx, request.(AttachVersionToBuildRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachVersionToBuild")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachVersionToBuildResponseObject); ok {
		if err := validResponse.VisitAttachVersionToBuildResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListNeoforges operation middleware
func (sh *strictHandler) ListNeoforges(w http.ResponseWriter, r *http.Request, params ListNeoforgesParams) {
	var request ListNeoforgesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListNeoforges(ctx, request.(ListNeoforgesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListNeoforges")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListNeoforgesResponseObject); ok {
		if err := validResponse.VisitListNeoforgesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateNeoforge operation middleware
func (sh *strictHandler) UpdateNeoforge(w http.ResponseWriter, r *http.Request) {
	var request UpdateNeoforgeRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateNeoforge(ctx, request.(UpdateNeoforgeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateNeoforge")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateNeoforgeResponseObject); ok {
		if err := validResponse.VisitUpdateNeoforgeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteNeoforgeFromBuild operation middleware
func (sh *strictHandler) DeleteNeoforgeFromBuild(w http.ResponseWriter, r *http.Request, neoforgeId string) {
	var request DeleteNeoforgeFromBuildRequestObject

	request.NeoforgeId = neoforgeId

	var body DeleteNeoforgeFromBuildJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteNeoforgeFromBuild(ctx, request.(DeleteNeoforgeFromBuildRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteNeoforgeFromBuild")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteNeoforgeFromBuildResponseObject); ok {
		if err := validResponse.VisitDeleteNeoforgeFromBuildResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListNeoforgeBuilds operation middleware
func (sh *strictHandler) ListNeoforgeBuilds(w http.ResponseWriter, r *http.Request, neoforgeId string, params ListNeoforgeBuildsParams) {
	var request ListNeoforgeBuildsRequestObject

	request.NeoforgeId = neoforgeId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListNeoforgeBuilds(ctx, request.(ListNeoforgeBuildsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListNeoforgeBuilds")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListNeoforgeBuildsResponseObject); ok {
		if err := validResponse.VisitListNeoforgeBuildsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachNeoforgeToBuild operation middleware
func (sh *strictHandler) AttachNeoforgeToBuild(w http.ResponseWriter, r *http.Request, neoforgeId string) {
	var request AttachNeoforgeToBuildRequestObject

	request.NeoforgeId = neoforgeId

	var body AttachNeoforgeToBuildJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachNeoforgeToBuild(ctx, request.(AttachNeoforgeToBuildRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachNeoforgeToBuild")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachNeoforgeToBuildResponseObject); ok {
		if err := validResponse.VisitAttachNeoforgeToBuildResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListPacks operation middleware
func (sh *strictHandler) ListPacks(w http.ResponseWriter, r *http.Request, params ListPacksParams) {
	var request ListPacksRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListPacks(ctx, request.(ListPacksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListPacks")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListPacksResponseObject); ok {
		if err := validResponse.VisitListPacksResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreatePack operation middleware
func (sh *strictHandler) CreatePack(w http.ResponseWriter, r *http.Request) {
	var request CreatePackRequestObject

	var body CreatePackJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePack(ctx, request.(CreatePackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePack")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreatePackResponseObject); ok {
		if err := validResponse.VisitCreatePackResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePack operation middleware
func (sh *strictHandler) DeletePack(w http.ResponseWriter, r *http.Request, packId string) {
	var request DeletePackRequestObject

	request.PackId = packId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePack(ctx, request.(DeletePackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePack")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeletePackResponseObject); ok {
		if err := validResponse.VisitDeletePackResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowPack operation middleware
func (sh *strictHandler) ShowPack(w http.ResponseWriter, r *http.Request, packId string) {
	var request ShowPackRequestObject

	request.PackId = packId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowPack(ctx, request.(ShowPackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowPack")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowPackResponseObject); ok {
		if err := validResponse.VisitShowPackResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdatePack operation middleware
func (sh *strictHandler) UpdatePack(w http.ResponseWriter, r *http.Request, packId string) {
	var request UpdatePackRequestObject

	request.PackId = packId

	var body UpdatePackJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePack(ctx, request.(UpdatePackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePack")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdatePackResponseObject); ok {
		if err := validResponse.VisitUpdatePackResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListBuilds operation middleware
func (sh *strictHandler) ListBuilds(w http.ResponseWriter, r *http.Request, packId string, params ListBuildsParams) {
	var request ListBuildsRequestObject

	request.PackId = packId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListBuilds(ctx, request.(ListBuildsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListBuilds")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListBuildsResponseObject); ok {
		if err := validResponse.VisitListBuildsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateBuild operation middleware
func (sh *strictHandler) CreateBuild(w http.ResponseWriter, r *http.Request, packId string) {
	var request CreateBuildRequestObject

	request.PackId = packId

	var body CreateBuildJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateBuild(ctx, request.(CreateBuildRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateBuild")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateBuildResponseObject); ok {
		if err := validResponse.VisitCreateBuildResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteBuild operation middleware
func (sh *strictHandler) DeleteBuild(w http.ResponseWriter, r *http.Request, packId string, buildId string) {
	var request DeleteBuildRequestObject

	request.PackId = packId
	request.BuildId = buildId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteBuild(ctx, request.(DeleteBuildRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteBuild")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteBuildResponseObject); ok {
		if err := validResponse.VisitDeleteBuildResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowBuild operation middleware
func (sh *strictHandler) ShowBuild(w http.ResponseWriter, r *http.Request, packId string, buildId string) {
	var request ShowBuildRequestObject

	request.PackId = packId
	request.BuildId = buildId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowBuild(ctx, request.(ShowBuildRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowBuild")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowBuildResponseObject); ok {
		if err := validResponse.VisitShowBuildResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateBuild operation middleware
func (sh *strictHandler) UpdateBuild(w http.ResponseWriter, r *http.Request, packId string, buildId string) {
	var request UpdateBuildRequestObject

	request.PackId = packId
	request.BuildId = buildId

	var body UpdateBuildJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateBuild(ctx, request.(UpdateBuildRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateBuild")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateBuildResponseObject); ok {
		if err := validResponse.VisitUpdateBuildResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteBuildFromVersion operation middleware
func (sh *strictHandler) DeleteBuildFromVersion(w http.ResponseWriter, r *http.Request, packId string, buildId string) {
	var request DeleteBuildFromVersionRequestObject

	request.PackId = packId
	request.BuildId = buildId

	var body DeleteBuildFromVersionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteBuildFromVersion(ctx, request.(DeleteBuildFromVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteBuildFromVersion")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteBuildFromVersionResponseObject); ok {
		if err := validResponse.VisitDeleteBuildFromVersionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListBuildVersions operation middleware
func (sh *strictHandler) ListBuildVersions(w http.ResponseWriter, r *http.Request, packId string, buildId string, params ListBuildVersionsParams) {
	var request ListBuildVersionsRequestObject

	request.PackId = packId
	request.BuildId = buildId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListBuildVersions(ctx, request.(ListBuildVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListBuildVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListBuildVersionsResponseObject); ok {
		if err := validResponse.VisitListBuildVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachBuildToVersion operation middleware
func (sh *strictHandler) AttachBuildToVersion(w http.ResponseWriter, r *http.Request, packId string, buildId string) {
	var request AttachBuildToVersionRequestObject

	request.PackId = packId
	request.BuildId = buildId

	var body AttachBuildToVersionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachBuildToVersion(ctx, request.(AttachBuildToVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachBuildToVersion")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachBuildToVersionResponseObject); ok {
		if err := validResponse.VisitAttachBuildToVersionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePackFromTeam operation middleware
func (sh *strictHandler) DeletePackFromTeam(w http.ResponseWriter, r *http.Request, packId string) {
	var request DeletePackFromTeamRequestObject

	request.PackId = packId

	var body DeletePackFromTeamJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePackFromTeam(ctx, request.(DeletePackFromTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePackFromTeam")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeletePackFromTeamResponseObject); ok {
		if err := validResponse.VisitDeletePackFromTeamResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListPackTeams operation middleware
func (sh *strictHandler) ListPackTeams(w http.ResponseWriter, r *http.Request, packId string, params ListPackTeamsParams) {
	var request ListPackTeamsRequestObject

	request.PackId = packId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListPackTeams(ctx, request.(ListPackTeamsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListPackTeams")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListPackTeamsResponseObject); ok {
		if err := validResponse.VisitListPackTeamsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachPackToTeam operation middleware
func (sh *strictHandler) AttachPackToTeam(w http.ResponseWriter, r *http.Request, packId string) {
	var request AttachPackToTeamRequestObject

	request.PackId = packId

	var body AttachPackToTeamJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachPackToTeam(ctx, request.(AttachPackToTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachPackToTeam")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachPackToTeamResponseObject); ok {
		if err := validResponse.VisitAttachPackToTeamResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PermitPackTeam operation middleware
func (sh *strictHandler) PermitPackTeam(w http.ResponseWriter, r *http.Request, packId string) {
	var request PermitPackTeamRequestObject

	request.PackId = packId

	var body PermitPackTeamJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PermitPackTeam(ctx, request.(PermitPackTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PermitPackTeam")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PermitPackTeamResponseObject); ok {
		if err := validResponse.VisitPermitPackTeamResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePackFromUser operation middleware
func (sh *strictHandler) DeletePackFromUser(w http.ResponseWriter, r *http.Request, packId string) {
	var request DeletePackFromUserRequestObject

	request.PackId = packId

	var body DeletePackFromUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePackFromUser(ctx, request.(DeletePackFromUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePackFromUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeletePackFromUserResponseObject); ok {
		if err := validResponse.VisitDeletePackFromUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListPackUsers operation middleware
func (sh *strictHandler) ListPackUsers(w http.ResponseWriter, r *http.Request, packId string, params ListPackUsersParams) {
	var request ListPackUsersRequestObject

	request.PackId = packId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListPackUsers(ctx, request.(ListPackUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListPackUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListPackUsersResponseObject); ok {
		if err := validResponse.VisitListPackUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachPackToUser operation middleware
func (sh *strictHandler) AttachPackToUser(w http.ResponseWriter, r *http.Request, packId string) {
	var request AttachPackToUserRequestObject

	request.PackId = packId

	var body AttachPackToUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachPackToUser(ctx, request.(AttachPackToUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachPackToUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachPackToUserResponseObject); ok {
		if err := validResponse.VisitAttachPackToUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PermitPackUser operation middleware
func (sh *strictHandler) PermitPackUser(w http.ResponseWriter, r *http.Request, packId string) {
	var request PermitPackUserRequestObject

	request.PackId = packId

	var body PermitPackUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PermitPackUser(ctx, request.(PermitPackUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PermitPackUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PermitPackUserResponseObject); ok {
		if err := validResponse.VisitPermitPackUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowProfile operation middleware
func (sh *strictHandler) ShowProfile(w http.ResponseWriter, r *http.Request) {
	var request ShowProfileRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowProfile(ctx, request.(ShowProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowProfileResponseObject); ok {
		if err := validResponse.VisitShowProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProfile operation middleware
func (sh *strictHandler) UpdateProfile(w http.ResponseWriter, r *http.Request) {
	var request UpdateProfileRequestObject

	var body UpdateProfileJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProfile(ctx, request.(UpdateProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProfileResponseObject); ok {
		if err := validResponse.VisitUpdateProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TokenProfile operation middleware
func (sh *strictHandler) TokenProfile(w http.ResponseWriter, r *http.Request) {
	var request TokenProfileRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TokenProfile(ctx, request.(TokenProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TokenProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TokenProfileResponseObject); ok {
		if err := validResponse.VisitTokenProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListQuilts operation middleware
func (sh *strictHandler) ListQuilts(w http.ResponseWriter, r *http.Request, params ListQuiltsParams) {
	var request ListQuiltsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListQuilts(ctx, request.(ListQuiltsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListQuilts")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListQuiltsResponseObject); ok {
		if err := validResponse.VisitListQuiltsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateQuilt operation middleware
func (sh *strictHandler) UpdateQuilt(w http.ResponseWriter, r *http.Request) {
	var request UpdateQuiltRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateQuilt(ctx, request.(UpdateQuiltRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateQuilt")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateQuiltResponseObject); ok {
		if err := validResponse.VisitUpdateQuiltResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteQuiltFromBuild operation middleware
func (sh *strictHandler) DeleteQuiltFromBuild(w http.ResponseWriter, r *http.Request, quiltId string) {
	var request DeleteQuiltFromBuildRequestObject

	request.QuiltId = quiltId

	var body DeleteQuiltFromBuildJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteQuiltFromBuild(ctx, request.(DeleteQuiltFromBuildRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteQuiltFromBuild")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteQuiltFromBuildResponseObject); ok {
		if err := validResponse.VisitDeleteQuiltFromBuildResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListQuiltBuilds operation middleware
func (sh *strictHandler) ListQuiltBuilds(w http.ResponseWriter, r *http.Request, quiltId string, params ListQuiltBuildsParams) {
	var request ListQuiltBuildsRequestObject

	request.QuiltId = quiltId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListQuiltBuilds(ctx, request.(ListQuiltBuildsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListQuiltBuilds")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListQuiltBuildsResponseObject); ok {
		if err := validResponse.VisitListQuiltBuildsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachQuiltToBuild operation middleware
func (sh *strictHandler) AttachQuiltToBuild(w http.ResponseWriter, r *http.Request, quiltId string) {
	var request AttachQuiltToBuildRequestObject

	request.QuiltId = quiltId

	var body AttachQuiltToBuildJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachQuiltToBuild(ctx, request.(AttachQuiltToBuildRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachQuiltToBuild")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachQuiltToBuildResponseObject); ok {
		if err := validResponse.VisitAttachQuiltToBuildResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTeams operation middleware
func (sh *strictHandler) ListTeams(w http.ResponseWriter, r *http.Request, params ListTeamsParams) {
	var request ListTeamsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTeams(ctx, request.(ListTeamsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTeams")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTeamsResponseObject); ok {
		if err := validResponse.VisitListTeamsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateTeam operation middleware
func (sh *strictHandler) CreateTeam(w http.ResponseWriter, r *http.Request) {
	var request CreateTeamRequestObject

	var body CreateTeamJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTeam(ctx, request.(CreateTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTeam")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateTeamResponseObject); ok {
		if err := validResponse.VisitCreateTeamResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTeam operation middleware
func (sh *strictHandler) DeleteTeam(w http.ResponseWriter, r *http.Request, teamId string) {
	var request DeleteTeamRequestObject

	request.TeamId = teamId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTeam(ctx, request.(DeleteTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTeam")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteTeamResponseObject); ok {
		if err := validResponse.VisitDeleteTeamResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowTeam operation middleware
func (sh *strictHandler) ShowTeam(w http.ResponseWriter, r *http.Request, teamId string) {
	var request ShowTeamRequestObject

	request.TeamId = teamId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowTeam(ctx, request.(ShowTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowTeam")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowTeamResponseObject); ok {
		if err := validResponse.VisitShowTeamResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateTeam operation middleware
func (sh *strictHandler) UpdateTeam(w http.ResponseWriter, r *http.Request, teamId string) {
	var request UpdateTeamRequestObject

	request.TeamId = teamId

	var body UpdateTeamJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTeam(ctx, request.(UpdateTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateTeam")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateTeamResponseObject); ok {
		if err := validResponse.VisitUpdateTeamResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTeamFromMod operation middleware
func (sh *strictHandler) DeleteTeamFromMod(w http.ResponseWriter, r *http.Request, teamId string) {
	var request DeleteTeamFromModRequestObject

	request.TeamId = teamId

	var body DeleteTeamFromModJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTeamFromMod(ctx, request.(DeleteTeamFromModRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTeamFromMod")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteTeamFromModResponseObject); ok {
		if err := validResponse.VisitDeleteTeamFromModResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTeamMods operation middleware
func (sh *strictHandler) ListTeamMods(w http.ResponseWriter, r *http.Request, teamId string, params ListTeamModsParams) {
	var request ListTeamModsRequestObject

	request.TeamId = teamId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTeamMods(ctx, request.(ListTeamModsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTeamMods")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTeamModsResponseObject); ok {
		if err := validResponse.VisitListTeamModsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachTeamToMod operation middleware
func (sh *strictHandler) AttachTeamToMod(w http.ResponseWriter, r *http.Request, teamId string) {
	var request AttachTeamToModRequestObject

	request.TeamId = teamId

	var body AttachTeamToModJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachTeamToMod(ctx, request.(AttachTeamToModRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachTeamToMod")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachTeamToModResponseObject); ok {
		if err := validResponse.VisitAttachTeamToModResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PermitTeamMod operation middleware
func (sh *strictHandler) PermitTeamMod(w http.ResponseWriter, r *http.Request, teamId string) {
	var request PermitTeamModRequestObject

	request.TeamId = teamId

	var body PermitTeamModJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PermitTeamMod(ctx, request.(PermitTeamModRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PermitTeamMod")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PermitTeamModResponseObject); ok {
		if err := validResponse.VisitPermitTeamModResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTeamFromPack operation middleware
func (sh *strictHandler) DeleteTeamFromPack(w http.ResponseWriter, r *http.Request, teamId string) {
	var request DeleteTeamFromPackRequestObject

	request.TeamId = teamId

	var body DeleteTeamFromPackJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTeamFromPack(ctx, request.(DeleteTeamFromPackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTeamFromPack")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteTeamFromPackResponseObject); ok {
		if err := validResponse.VisitDeleteTeamFromPackResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTeamPacks operation middleware
func (sh *strictHandler) ListTeamPacks(w http.ResponseWriter, r *http.Request, teamId string, params ListTeamPacksParams) {
	var request ListTeamPacksRequestObject

	request.TeamId = teamId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTeamPacks(ctx, request.(ListTeamPacksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTeamPacks")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTeamPacksResponseObject); ok {
		if err := validResponse.VisitListTeamPacksResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachTeamToPack operation middleware
func (sh *strictHandler) AttachTeamToPack(w http.ResponseWriter, r *http.Request, teamId string) {
	var request AttachTeamToPackRequestObject

	request.TeamId = teamId

	var body AttachTeamToPackJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachTeamToPack(ctx, request.(AttachTeamToPackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachTeamToPack")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachTeamToPackResponseObject); ok {
		if err := validResponse.VisitAttachTeamToPackResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PermitTeamPack operation middleware
func (sh *strictHandler) PermitTeamPack(w http.ResponseWriter, r *http.Request, teamId string) {
	var request PermitTeamPackRequestObject

	request.TeamId = teamId

	var body PermitTeamPackJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PermitTeamPack(ctx, request.(PermitTeamPackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PermitTeamPack")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PermitTeamPackResponseObject); ok {
		if err := validResponse.VisitPermitTeamPackResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTeamFromUser operation middleware
func (sh *strictHandler) DeleteTeamFromUser(w http.ResponseWriter, r *http.Request, teamId string) {
	var request DeleteTeamFromUserRequestObject

	request.TeamId = teamId

	var body DeleteTeamFromUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTeamFromUser(ctx, request.(DeleteTeamFromUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTeamFromUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteTeamFromUserResponseObject); ok {
		if err := validResponse.VisitDeleteTeamFromUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTeamUsers operation middleware
func (sh *strictHandler) ListTeamUsers(w http.ResponseWriter, r *http.Request, teamId string, params ListTeamUsersParams) {
	var request ListTeamUsersRequestObject

	request.TeamId = teamId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTeamUsers(ctx, request.(ListTeamUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTeamUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTeamUsersResponseObject); ok {
		if err := validResponse.VisitListTeamUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachTeamToUser operation middleware
func (sh *strictHandler) AttachTeamToUser(w http.ResponseWriter, r *http.Request, teamId string) {
	var request AttachTeamToUserRequestObject

	request.TeamId = teamId

	var body AttachTeamToUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachTeamToUser(ctx, request.(AttachTeamToUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachTeamToUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachTeamToUserResponseObject); ok {
		if err := validResponse.VisitAttachTeamToUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PermitTeamUser operation middleware
func (sh *strictHandler) PermitTeamUser(w http.ResponseWriter, r *http.Request, teamId string) {
	var request PermitTeamUserRequestObject

	request.TeamId = teamId

	var body PermitTeamUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PermitTeamUser(ctx, request.(PermitTeamUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PermitTeamUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PermitTeamUserResponseObject); ok {
		if err := validResponse.VisitPermitTeamUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListUsers operation middleware
func (sh *strictHandler) ListUsers(w http.ResponseWriter, r *http.Request, params ListUsersParams) {
	var request ListUsersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListUsers(ctx, request.(ListUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListUsersResponseObject); ok {
		if err := validResponse.VisitListUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(w http.ResponseWriter, r *http.Request) {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx, request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		if err := validResponse.VisitCreateUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUser operation middleware
func (sh *strictHandler) DeleteUser(w http.ResponseWriter, r *http.Request, userId string) {
	var request DeleteUserRequestObject

	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUser(ctx, request.(DeleteUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteUserResponseObject); ok {
		if err := validResponse.VisitDeleteUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowUser operation middleware
func (sh *strictHandler) ShowUser(w http.ResponseWriter, r *http.Request, userId string) {
	var request ShowUserRequestObject

	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowUser(ctx, request.(ShowUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowUserResponseObject); ok {
		if err := validResponse.VisitShowUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateUser operation middleware
func (sh *strictHandler) UpdateUser(w http.ResponseWriter, r *http.Request, userId string) {
	var request UpdateUserRequestObject

	request.UserId = userId

	var body UpdateUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUser(ctx, request.(UpdateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateUserResponseObject); ok {
		if err := validResponse.VisitUpdateUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUserFromMod operation middleware
func (sh *strictHandler) DeleteUserFromMod(w http.ResponseWriter, r *http.Request, userId string) {
	var request DeleteUserFromModRequestObject

	request.UserId = userId

	var body DeleteUserFromModJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUserFromMod(ctx, request.(DeleteUserFromModRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUserFromMod")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteUserFromModResponseObject); ok {
		if err := validResponse.VisitDeleteUserFromModResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListUserMods operation middleware
func (sh *strictHandler) ListUserMods(w http.ResponseWriter, r *http.Request, userId string, params ListUserModsParams) {
	var request ListUserModsRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListUserMods(ctx, request.(ListUserModsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListUserMods")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListUserModsResponseObject); ok {
		if err := validResponse.VisitListUserModsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachUserToMod operation middleware
func (sh *strictHandler) AttachUserToMod(w http.ResponseWriter, r *http.Request, userId string) {
	var request AttachUserToModRequestObject

	request.UserId = userId

	var body AttachUserToModJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachUserToMod(ctx, request.(AttachUserToModRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachUserToMod")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachUserToModResponseObject); ok {
		if err := validResponse.VisitAttachUserToModResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PermitUserMod operation middleware
func (sh *strictHandler) PermitUserMod(w http.ResponseWriter, r *http.Request, userId string) {
	var request PermitUserModRequestObject

	request.UserId = userId

	var body PermitUserModJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PermitUserMod(ctx, request.(PermitUserModRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PermitUserMod")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PermitUserModResponseObject); ok {
		if err := validResponse.VisitPermitUserModResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUserFromPack operation middleware
func (sh *strictHandler) DeleteUserFromPack(w http.ResponseWriter, r *http.Request, userId string) {
	var request DeleteUserFromPackRequestObject

	request.UserId = userId

	var body DeleteUserFromPackJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUserFromPack(ctx, request.(DeleteUserFromPackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUserFromPack")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteUserFromPackResponseObject); ok {
		if err := validResponse.VisitDeleteUserFromPackResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListUserPacks operation middleware
func (sh *strictHandler) ListUserPacks(w http.ResponseWriter, r *http.Request, userId string, params ListUserPacksParams) {
	var request ListUserPacksRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListUserPacks(ctx, request.(ListUserPacksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListUserPacks")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListUserPacksResponseObject); ok {
		if err := validResponse.VisitListUserPacksResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachUserToPack operation middleware
func (sh *strictHandler) AttachUserToPack(w http.ResponseWriter, r *http.Request, userId string) {
	var request AttachUserToPackRequestObject

	request.UserId = userId

	var body AttachUserToPackJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachUserToPack(ctx, request.(AttachUserToPackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachUserToPack")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachUserToPackResponseObject); ok {
		if err := validResponse.VisitAttachUserToPackResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PermitUserPack operation middleware
func (sh *strictHandler) PermitUserPack(w http.ResponseWriter, r *http.Request, userId string) {
	var request PermitUserPackRequestObject

	request.UserId = userId

	var body PermitUserPackJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PermitUserPack(ctx, request.(PermitUserPackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PermitUserPack")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PermitUserPackResponseObject); ok {
		if err := validResponse.VisitPermitUserPackResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUserFromTeam operation middleware
func (sh *strictHandler) DeleteUserFromTeam(w http.ResponseWriter, r *http.Request, userId string) {
	var request DeleteUserFromTeamRequestObject

	request.UserId = userId

	var body DeleteUserFromTeamJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUserFromTeam(ctx, request.(DeleteUserFromTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUserFromTeam")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteUserFromTeamResponseObject); ok {
		if err := validResponse.VisitDeleteUserFromTeamResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListUserTeams operation middleware
func (sh *strictHandler) ListUserTeams(w http.ResponseWriter, r *http.Request, userId string, params ListUserTeamsParams) {
	var request ListUserTeamsRequestObject

	request.UserId = userId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListUserTeams(ctx, request.(ListUserTeamsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListUserTeams")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListUserTeamsResponseObject); ok {
		if err := validResponse.VisitListUserTeamsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AttachUserToTeam operation middleware
func (sh *strictHandler) AttachUserToTeam(w http.ResponseWriter, r *http.Request, userId string) {
	var request AttachUserToTeamRequestObject

	request.UserId = userId

	var body AttachUserToTeamJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AttachUserToTeam(ctx, request.(AttachUserToTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AttachUserToTeam")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AttachUserToTeamResponseObject); ok {
		if err := validResponse.VisitAttachUserToTeamResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PermitUserTeam operation middleware
func (sh *strictHandler) PermitUserTeam(w http.ResponseWriter, r *http.Request, userId string) {
	var request PermitUserTeamRequestObject

	request.UserId = userId

	var body PermitUserTeamJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PermitUserTeam(ctx, request.(PermitUserTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PermitUserTeam")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PermitUserTeamResponseObject); ok {
		if err := validResponse.VisitPermitUserTeamResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a3OkOLL2XyF434/VXXZfzsb60+meXe/22elez4574kRMOBxyoXJhA6oWwpd2+L+f",
	"0BWoQiAo6kKRn7pdCJBSmY8yHyWpF39G4iVJcMJS/+zFT2cLHCPxX5SxxXVEbsOE/7WkZIkpC7G4tkRp",
	"+khowP8/JzRGzD/Lf5z47HmJ/TM/ZTRMbv3XiZ+lmCYoxvyGlYuvE5/iH1lIceCf/Zm3nOQPvDJPJDd3",
	"eMb4E0X3GLnHFd3DT8uQ4vSad6vQwQAx/IaF4tkUo+DfSfTsnzGa4dUeT/ynN0kWRegmwrrF0xsShwzH",
	"S6Zuep345v31j1sdo7zNOqoHTMP58/qwZhQjhoPtD6s4W+1GZu6sGtxNFkZCZQKczmi4ZCFJ/DP/Kwlw",
	"5DHiUbykOMUJ82TLSd/jf534c3RDwxm///9TPPfP/P83zS1gqtR/qlqZ9tdhsK65rtKcE3qLG98oGunW",
	"G71P3tsoiTv0gLq/JEIMp6xw/w0hEUaJ8wNiHBP63L0DcZjgGUVz1iTZvGHxro0kXI1kzndj4qQSpl3h",
	"no26vUSz+6aXija8bXYTSTvpOL8/sjBqnBvZSLfeaHAUz0gc4yTAwQa9TqPstnsfsmWwIUDxNSVk/C3+",
	"Z4WB1TDKF4lU4KcrnHr6jlVYNbBcN1OykXl71Uy9TnpB6M2FOPELwqkblG6W31E9sJVFzoigdNvVytR5",
	"fxh510/h9RJRFKfrM3nBf8cM05RPJ2IMzRYeoV6WRGFy3zCrMameooJo6kfJH5A3t43Ou5Cdbxpk2l5R",
	"0w01tQ3cMcJQVNK3MGH/9SEfVpgwfItpQYKiRxwBUqceXReUTT0TUYqe121ei9YuVDdhRmHKPDL31C2V",
	"wmw5iPXOb0vMq0KpFEbuzDUKQzXdhkvp6G9t5jT0urSca2FYJHotNdaGSxXilU29OaFK0rVaVwlMWo/q",
	"UUm00qHE1eqQPGlAdkwqji9toTjbNqK2YUknQyrKqEY67dBF37Mqma0iakEQNig9N/1aH6b2vpsnX7Tc",
	"I2iUopx9BCv94o4SZ/WMbIY6/Ak7Bx3x0kbMyQeXumvd1hGnFSvRDW9y8dgF0xJt5C27BRsjBCvW6F6t",
	"DbFkv42jzFsP1k+Rdx0E2nwtSNM+MRuhjnnKrpHHjK0RfVYGmrZTxG2jUDcWrxMarYisXljtUKlw206R",
	"qSwUGzp9LfZufcjEjZKXdEB5cChjC0K7m3sfqFbqeNeOBCRBDG+dct8MWjemZNMw2OD1+6ZGJ/4jvknD",
	"7tNUNAkSWGzhmmEUd2XkYhJ4/P41Q1liGsunzVEW8YFnKab+xMdJFut9M3/ioyAO+XySxwTTwh5aLgPx",
	"+MZlQ7S6Ko3Xu8Qorlsn1NhTVzTwZGsL71gLWyTQQ3HHOjEv+s6VVaTbeqBkYpUGn5NNNEHN6bY0QTR0",
	"2k5f1YTvKaYNmsBvc9cE2XoDTWixSJqeOWmNmMNKrXldl4lNGi2dARJUyqLFst6vllcOq7gJ2Tg00xjo",
	"U/7Tt1wcVrluFFboh+w6qtADawwqyqNMWynRtkOKLtvrnUyrLK1aObVDkPyunUYTJYHYsPJboW/rwyUs",
	"nIczxCo3pv+BE0zDmUdxuiRJioWqY0oJTT2UBN4DisJA3Ls+cNnMeSj5oyqDTpym6NaCJhWOL0MsSwut",
	"tZAbnMxvRWlUSEvbqgMyCHNdMRfHbbfrG7X31gtWz5o31cVLRUN3cI/ILXF6rmh4AJHUEcVCF1K7KtXz",
	"+qaNjnq89S0lWVKRu0cShhN2vRk/uMudl+DjJplWbDHkSDtbRgRtkIyV0agnzfQ+F3WqWkk1KrkpqWgN",
	"6gnq2Yt6fpnZF/drvay5KaZoDYoJitmLYv4qtalaMTchOYWuHiTLKcbdQHOa4afuhllNdLbKe2tPdZpb",
	"+2CBjGTsMtmE7RRSOki6Uwy8ge80w2+hEtWM57YyTjtwntXq81ohGatM2pEW8o4qibj3vHedrx4bJfMw",
	"cmM+ddu1nc8ZCx/qvo/SEeWr1m23phlbtJxofov/al2bpAx36SfgGIXRBl9LZVG0WXTv6qi0oeSL+wi9",
	"SLqdYZRMuqf3t/mC0/mpuWl1TB9qtVAKsQgvoC+x9OIEWr91be/JGfipQrGHMJBrYiOMcZDwzB2rYBaE",
	"6TJCz05WE9DwQb7UmSx03tpx34G5yIdiFUy75askoR0T72ZiatfrQt/Wxmw+tmscr2wJ+3j8p9+ULKrF",
	"udEOnnjCrrfvxHga9+4Kg0vdVWbbu3btPhft5BAWxGMXTDvUULfsFC1yIdig4jfdq7Uh6ri6cYCV8f1g",
	"UOKAvuK9lIKsnIlr19xL3rgyAbOPGXFP04mJ9cPf/qmfJoLECNHSo15mcZVtkh/9KjlclWfZsyQV6pnu",
	"Sq5YJ9/2hW9fc1HxPXDFkGtWGj3ytJWSb5g8VZsn2Ea3uiwxWih2cThv+gtxVO7892H0rUpBiD02sHsj",
	"iFUrsO2gmwnfyPQrdcDiKG7N+MX7qsbdZP7uRKIZ7KYsYj19vhMIsHKPom+bUO1CSgdJtYuBN1DtZvgt",
	"VKKaat/OPHai2s1rbP64kYxVJu2ijur9qPZ7TL1R7dadJa1JjUOr1OicZO+YpmWY9673Ax2/Mzr+QAnp",
	"AyOEv6fVpGeue67WJhjP7fiWBWZ67aKwn225bUUpeZ/k+KpF5Rp5C0mNJPLuS9VdcNJMhEu9Ld2wKvIW",
	"U22JvPVMd/W1rJO/38hbD7nGz9IjT1sp+YaRt/1bq/YumJsOva4LxS4O58hbiGNEkfcA7L4i8laRRnXk",
	"bSZ8I9M/yMjbjLvJ/N0jbzPYTSPvmsyjXUGANfLOQzVnkWxtE+QYWbOtY4Du/qot2HZYzIRvhAEHmehq",
	"xt2EAe7cghnspsRCDSWyKwyopSPaUS0W8mmrhFItl2SlkQqfPFZ/eYkiL2U0m7GMYj7YdEEeC99cqi8x",
	"18Y6D7ElWcH6GWWxv3/k3arqdIsixrZCt71UhVccgUOx4GvRtlWaoWOQN/JvGotKY6+crGehPjmnAdnV",
	"QyzHDGwrPUdXTG5K0CkNMW1jG30m6djrFU+2VNmjbdHuV4toa4XqnPmtRVqZ/g1fZcFXWW2pW62j55aE",
	"3laF0rV/Yi2VvlUTbVGIwaHoub3cOdcePMtoyJ5/5w+UQ/uMUrnQiZeIpU78Ym5fMLbkb/yMEZU+ZN5S",
	"/rTW9BdC7kNhyiGX+AIjmV0s12R9OR/EMvwXFlD4T9nSduP/vvl08eUNb7t2Lx9dmMyJxhM0Eyqu9mv8",
	"+wiHKcP0vx/xzSJcLkP8NsD5g/+lLvtKPcVI0rPpVN/3Fmdr5fH8TxdfvADPwyQULt+cUE8/aOLFKEG3",
	"WBR0EmG/uFwsohmFM5ykQkqqF5+WaLbAb969PSn142w6fXx8fIvE1beE3k7Vren01y+//P3b73/nt7xd",
	"sDjyC4qgu+L9e4mTTxdfCscPnPmnb0/enrxB0XKBTvlNZIkTtAz9M/89v+JLmBIKMkUZW0zzo6uIPKiG",
	"m4fwRL8E/pn/K7+s9gj46o1T9pkEzwV0F1uQy2WkSnhM71K5OEndbtL8wvFZYqrLE3G5wN6M4gAnLESR",
	"9FIytuB/zhDDftGjMAecyLIpYojvTk767ak8kqqipzJ2YDjwRBPvMWQLTx6w5XEU5nPx4eS0t96UashU",
	"9Od7IqtOhj9xIDvzSElyW5Qm79LHHgXU1KXfSYw9jpI04UEWpg9YFbaRFqhIgl32RrzdyxKKIzV3Hltg",
	"b4GSIFIhs0ZW/+zPq4mfZnGM6DO36YIeeiiRzMDNc0nAE5+h25Q7u2IX8Yo/T1pd6euLW1xheH9/koIq",
	"ftCwNd3Ou1MhqU/ejEQRngksXP8GBLRoAy06x2y2EK3RAwqFl7T+jY1NiSieU5wurCr0H3ndoPdegFF1",
	"4mCA8RyFkZyjWwXZkt3x1AhAmx202eivml0OgEJt5Rzf4Dmh2AuZmug6Jc5PcazU4T/E5Z2osOpJhVy+",
	"YoYCxJDIKlvgwlD3uqyHCWhuZ82ViiVtP2TPwotXWqyWdb7cSdHatfdF4/TrdIaiSNcBq13Rf9ENuS+u",
	"CTj/7M/VePZT4oXClZiHWJzckete4RtVEU8J6sEEPYWrZfd4UpD2Wvj/9AY/oXgpQozbkC2yG/91stYn",
	"/vaUSd9bvPpHhulz/m59zfoiyzNnJLA9Ul2yP/FqBRnen/xlnR34Dw5CimdMEASEMGPLuU5KY/6wM6XV",
	"rl1xmsPUy5L7hDzK3py+28PCKOJeFIU/sVf85nZovpW2M1lAUxnfioG7mXYukEbj/pI3Had5tzbG0syU",
	"FA5s0djiTyy0Y8jmmFuGuKWVQebnvlUa369hyvKDzGqt7neM6GzhabWu1HHRxHe2pv8hi8T7G8H+mu73",
	"6aLqA+QcAnR1Fp9hoYUpvd+dj5pK20mIrKghvVXwT9v5p1XMwPnKxOa2ogzkSuxwV1jId7E/ZA603JqW",
	"NsJshMLES7PZDKepp1MjQEHXFPTjDuXxZe5RHBOGvZRkdIaNbLTiDcNipI63N5l8gZm+qINPw+B1Wswr",
	"iLCsIV02qr+J3+UbzimJ9VHk9W6fhueCo0GoJ7Z/K90906XW/p5eoN4R/DR7puQxPb07uSEnIbvL1GLV",
	"/4ZO1dG4lp0deYy1IFYYUUknO93SGTha7dI/VnZEqJo13pu5KDe9Y9dYpgVpeYiUJXAuWkOlTPBCajLn",
	"lMQeWsHKau+iwf82mUXDwMDJTsOD9bcRysLklrvvWZzY3kcoK70tT6eWICva5UnVpR8VDMukR/WBiBKz",
	"+L9oVpVxXRyBaGTvPaEFqmKl8/paVe9ROit0W/7F39DYH9FovT8X6JZ3JwrjkFm6o69VdOf05KQqlafw",
	"3tOTE+tLyXyeYttbzcWK1za99GQHQaVOoXTZ+1WAq1MoYS1cXQthGeoS40p1ytWLEcf1qDpr6ZN4jrz/",
	"koBfvolfLucE/HLwy938chRRjILnkm/+4d0+uHP11Q72lD0BPLeDZ4miJkpwxGRBp+iTBe3hgjm57zjZ",
	"ejk8F7JenI0IXP3RcfXleS0YirCNJqZeHZwKSywQ9SMh6pvsxawr0xd5qG4rkp7f0YajF71xDgVUfzpH",
	"Andh9Ix+Pv24+evsIX64pXe3H5fbiwTWD14Ggn74gYDQWODnj5mfL0JkpUdR7247k/OHAH5AzQM1P2pq",
	"Pl+lgZnvYxGE9ac/Yr5xIaql5Xkrd1YePHGg5METB0YecNnCyDeA8evEn8amPEUdJ2+KWBwvLx/nQ3Tw",
	"qUxr4OePjp//uj63ue3k9tLA0xfrvsDaC1z9OLh6Z9sprT3TF/PfVty9eVsL/j5HbtfIodi3ztEDms+e",
	"4nfkEd3N2eLm+a83P063Fz3kPQYu/7giiNy+gM8/Yj5/DUatHkizy+7K7R8UMALHDxz/mDn+lRUceP6+",
	"FkhYm3rj+t0XqTrO3zzFmfcHDx72AMCDh30AwGzHfQBXoBacjDqwzh5XkGC/mwC9O+srbrpaRtSvykMH",
	"T3y0njhx875lO2DWh+rmoigq8NjqME+DkiSocWR/EceQyDNUt+IMksDm+cUk9/vkaSg79ftqeqbOZpHV",
	"z3kXD8jdA89mgGYqrcxDXoIf1aHCZfPU7sv0RZ5y/OqwgURc4k0SuEea8nzlzvU3/7q4R+HPgD4+L+kH",
	"/Hi3/MCy7eY9bBC6nezBiuR8CjVRx++MMIQkQGp1hhFp+B7y0iWe8WdXYollY+X3BXkEzKhb9ufcmcKB",
	"dEwwQ2GUgpGCkXZzyZtstC79akBWureIQZ4NeCgRgzqpEKBjDTogYBlkaodMkGtAsbWoZVo4c7whdjmn",
	"JFant48Y6Upn1NegHm8GaW6DQUAij9Pf3+4YtyxIb+spvU1MpchuaxFuqf2mSywP+j54jJsc7UYY7H+N",
	"eP/rWnokbptgnmoMjjssFR234YQGlZLNLOF/XVoZCS4J+MYuvnHJL4bkMfCLHf1iSBo7uqQxoVh2vK2i",
	"Wy8wjUPtpQPYtgLbPfCvALbHQUIA0A6YEhYqtcQ0TsXprm60cJYKTHWkhbkJjRyNucAcaGGToAa08EAQ",
	"WczY3hC5JAqghTejhcVUdqSFvwtABFp427Qwn6MVarj4U4zCyJ/48yyK1E8oiEP+HjRj4QNwx+PmjqXb",
	"4sgdq8bAHcN60pE7FhrUB3cMDrSLA11ynoE7BufZURTAHR8ddywUqyN3DGDbGmyBOwaw7chUANAOmDsW",
	"KtWWOzbFOOsqO/yRV+wESmWnmXZQawL4Eg4aeS3xZrrk8OqOA1sy4IIXWp3EooJakSbyw/w/TGmhsXrx",
	"uriSxXtXl/dZrqOhh7pkR7GnAC/gMh9HyRCt1XaAs/vN0xf1P7eyIgPCwsl6p7SgXDuWi6Z75+ji4w25",
	"ZQ9knsTk6TZ6vqMx1D2prntiUHyMyKxMy5OhL/iA/ZVBacbHmqIogHiHj3gN3p+u3GK8vzGXYACY2VIh",
	"FxeUqSnrAjjTI87sPQTewx5WQw91DRoAwQYQhID4OErS9BYVOx/aprSqzZFtgOX7w3KnAyi0MOAoueGg",
	"uzC+iZm6SpCH0+SO4TS5ilMfmj6vUCDtfHYcIHQdQkO2AmQrHG22QosT6kpuAgRVwCz1ksRQcTidfcWr",
	"++5DTY37QXSw6g0yLoHvVCAugTPy4JOV4hl5thXjdeJPE0zmhN7i2uzpb6rRfg/H22rGhBmhg6unGx9g",
	"niqYSpcjgPNU0W9rU5sbjTGVhn08/Qwf1tzDV9OPO5THl7lHcUwY9lKS0Rk2stHqN6xCT10Mp7jkTF/0",
	"/1rtseg3tdhkMYDtGjgUOtb5TG2yuA8iche8S98tljdZEP8l+Lm1wMF0uP2R2rCTccgRg7GrAzpRG3Yx",
	"+t7FWEVPm9fR6KG7bmocECIOfANBAu7KNkLpRwXJckuBz8zs/loJWvwfDiEY9VZDeel2CkANHTzmzYaG",
	"lREWpS6RcMV+g/vqVLf/oJ/hvAEBPnuNzw4sP/jswPADwx+1QujXiT/lHmd9qZQL0WKfRP8uD/+CXJ/R",
	"O+DSJBzcbtUQSPTjKAuyVECnkZL/3VgKhKOjvx1/ULzf4v7xa/usrlHXN11aw/TxgLw+8HCGXtpiKQ1u",
	"xUiNKzN9ERyaU+kKZbsNgadQY9egU728c8CJAxbf/Hz8ybLgPlgs5jheBFAboro2hMSgMQaUXHGB3eqv",
	"HEQ1ptSUgADkaPABdIEF6QOM+cNisNVeayrYTLUm/2pYxrrHOGIPJQrq+qbrEwCGrGMIBDLHUZLAOZop",
	"pMNZmVrXZI8DgDr4SvQ4meOdccV75Ifd8zLGnI4Bfm/f/LTKxZDVa6x+cA1X7ZhpcbyesJCgW0bFHjj1",
	"2t5pUl32UjUFXAFf+ChIfZX8XINsdpd4+iLzpZwo/+FAYMXn7lJKrt3SUuncr+Q9vsfBu9Pnm6eH+eO7",
	"n+G7jxnsRVTvRYwYkGVKGaHSaMDj621XohkUa3YoAOgOGehqXT29d6Ic0jETn4At29lFcYGWmh0VAJde",
	"wGWvAe4eNntqe6d3ewD16lAPYt3j2PfpKeAtHXbqEPmeUxI7HysA8L0X+L7WRd9cPgBbO2UAijccfj3M",
	"iZq8aoTf4ddguj4n1HDop4aDOWBAVnG4UW6yW9RudvDdz6YGhLYiNCQYQILBoBMMrtsckF1yBiBqAq6o",
	"j8wDc0x2sfqDdU2rK/YgpuaSQORxxJEHlKCAyKNT5AGVKI6uEoXGBlGLwrJiVPFbDHPYcfpu85yS+BKj",
	"eOwfdlxzmTUAtpAAbwc00XBS3AiVU7Y3iObWBcxQT8yQmEpBC7XK5ND1dy4FMMKHHfusDAQFgcZcEOha",
	"+iaOVYE81RoStGHF6Eq/CBUqcS/tvvmQ3rhYPQh4ym6ecslJBkYDnGRXJxlIjKMjMYRi1aFuVX7kBaZx",
	"aFx2gNyWkLuHpESA3CPhJQBuB5waKVRqiWksv292T4nMUgGtrpQxN6TRozKXmQtlzNsBZTwoaBZTtjdo",
	"LskCKOPNKGMxld0p4+8CGIEy3jplzOdphTYu/hSjMPIn/jyLIvUTCuKQvwfNWPgAvPLIeWXpwLjyyqo1",
	"8MqwrHTllYUK9cQrgzvt5k6XPGnglcGTdpUF8MpHxysLxerOKwPkdoBc4JUBcruSFwC3A+aVhUo58cqU",
	"zMMIT1Mcza1FlsXRD7Khv824UL3CVgoyoxQnzFPNDq9WBuhp27hsZSp5uC9OuME0JXxcaDYjWcKKqqt0",
	"pOnsg4K2bmEtrldUM6o9ni9Q30NzxMChmhIsPgNefJ5JRj3ymBj1CpM5obF8UZUpFxciRu5xYl2JLvnV",
	"HSxFXBuvZVcqJPMPnPBOCXHc48RLsJiop2WoowRYkIamu//BjIb4AXsoEXu+cchv4fKUk2xV3B9ZKAdm",
	"3Zb6jbfY71HC26Tzf8jhOVD5ouUBfq4PdtLWcePX8wr9v5XnNbcUaRsNvpq42wdK4vC18+MO5fFl7lEc",
	"E4a9lGR0ho1stNYNK8+rnb2YdWX6Iv5ZOQmpPudLPP2cktixXKlEZVfSVPenM2vKsp/J+zs0i34sTx8f",
	"0iS7f3+zNdZU9lZWeXCp7gBZX0MgTqX9EKombW/UqSy9A4lf/SR+qdqgsoZcCSIrPYp6d9v1TLiDAL+B",
	"Z4JJeF3JBSv9qABYlnGbyI03JWXxf/jQeNQJYYVV2imONEk8Yz5orm4RhPWnS0CrDporpoi5LER16WLi",
	"7ksCnnhnTxyyxsATb+GJQ+LY0SWOSdVyAuPXiZ8XU7MGCE5VhaB+D7jVA3ernUv3HFjVHkDJzQ5MZgrf",
	"NDryvxsPSVZ1G7bh+on3u5RB2MPhw3V902cPmz5Cfgy4NL2d/cukwa0YqfFgpi+iiIjT6b5uNVeEGrsG",
	"l+rlrWNLs4zzB7w5hXNzq8/NlbAzxojxcq2ICiDIJqflVsNIzQm5YwWLupVeHz0rV/oxn8EI5tnrgbM2",
	"66xJhzp4+9xjgLCHTPq6vuk0eoCNddiACOU4Tmx1DlOmMXHJTuOack5J/JUEI0S565gELoUhYwK5aANC",
	"PkLFjO1t++srgTS0vtLQ+ESKJLRWkZXeV/pKXLLO9oNrx3tGBRwRCptdanV13vDyZGPw1mGl6LrlxjWo",
	"lC5mDfdrUsT4ZFwScIdd3WFICAN32M0dhlywo8sF42pVh7P2GmLKOQeQdeMcoHAYgGwnzgEAdsC8L1eo",
	"vGqYO/UrTqdw534vZDmy0QGx+NbNAYlFFUugf4cExfs9Vl5UkgQCuB8CWExldwb4QmAhUMBAAQMFvAcK",
	"WLoirhywag0kMKwWXUlgoUI9scDgGLdwjIEIBsfY1TEGKvjoqGChWN25YIDaNhwE0MEAtR05CIDZARPC",
	"QqW6MMKO5xNrRtjtdJ/jQ2OHA33EoOFI4sGhMRxJfIRHEndihB2PJAZGGE4hBrZ4t2yx8ynEZhUGthjY",
	"4l5PIe7OFoPT3MJpBrYYnGY4fXj0pw93ZIsBatvwE8AWA9TCqcOjP3XYzhYbdtjKmzhxJkBVFLtuHgZ0",
	"xRHSFc5MxYGRFACjmxXzzRQQahTlfzcW81Xu6jbcQvF+Wz2sohe4h2K+dX3TxXxNH6GYL/g8vRXzzaTB",
	"rRipcXWmLyKQcirm6xZqCjV2DTXVy7uHmnfBtg8RHm4pXwk6Y4wkv69FkIAfm5TyrQaRmlK+44SKulVe",
	"F/KVq/yYK3KCcfZayNdmmzWFfA/cOvcYGuyBIK7tmyrjC6CxDhoQmxxHGV/nAMWxjC/XFOcyvkeGcQ4F",
	"dcSIoYjvoHAPivgeYRHfVjGV3nhyK+K7D1SD+g1HnZG7s02tPW9kORfq1eso+OMQxPdZqNcaztck3fLJ",
	"cCzUCw4v5NuCwwtlekdeprcVaSqTbZX7DRDrwilAni1ALBTpHXeRXndi17FIr2Z23QrkHBsMO5THkVnO",
	"UKJ3aEAMJXqPsERvJ37XsUQvELxA8ALB230ddWd4R1yGFyjebZXh7c7xguvr7PoCzQuuLxThHX0R3o5M",
	"LwCtO8cAZC8ALZTgHX0JXne+V5Tkded7L2W1hpFhsaqJ3ojFosoN8L1DwmK2VrJwl1gsyuwA39sP3yum",
	"sjvfeymQEPjenfK9QPOOgOaVPoYrzataA80LC0FXmleoUE80L3i8zh4v0Lzg8bp6vEDzHh3NKxSrO80L",
	"QOtOLQDNC0DbkVoAkB0wzSsPXWyiefmdeJbRkD0LDP0nRjwUPvvzioeUnzGihb9QGs70H78Qch9i8dcV",
	"fwaXkoThjEb+mb9gbJmeTaeMPr+9j3CYMkzf4myKluH04dR/vXr9vwAAAP//LlxkigaLAgA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
